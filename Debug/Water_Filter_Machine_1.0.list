
Water_Filter_Machine_1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ac4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08004b84  08004b84  00014b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cd4  08004cd4  00020120  2**0
                  CONTENTS
  4 .ARM          00000000  08004cd4  08004cd4  00020120  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004cd4  08004cd4  00020120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cd4  08004cd4  00014cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cd8  08004cd8  00014cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000120  20000000  08004cdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000120  08004dfc  00020120  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  08004dfc  00020240  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c7d3  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f46  00000000  00000000  0002c91b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  0002f868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000980  00000000  00000000  00030358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011d9a  00000000  00000000  00030cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012180  00000000  00000000  00042a72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005b4f1  00000000  00000000  00054bf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b00e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000264c  00000000  00000000  000b0134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000120 	.word	0x20000120
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004b6c 	.word	0x08004b6c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000124 	.word	0x20000124
 8000104:	08004b6c 	.word	0x08004b6c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <error_behavior>:
enum{
	WLS2_LEVEL_0		= 0x10,
	WLS2_LEVEL_1		= 0x20,
};

static void error_behavior(){
 8000244:	b590      	push	{r4, r7, lr}
 8000246:	b089      	sub	sp, #36	; 0x24
 8000248:	af00      	add	r7, sp, #0
	switch(CONTROL_Data.error_runnign_state){
 800024a:	4b2d      	ldr	r3, [pc, #180]	; (8000300 <error_behavior+0xbc>)
 800024c:	789b      	ldrb	r3, [r3, #2]
 800024e:	2b00      	cmp	r3, #0
 8000250:	d002      	beq.n	8000258 <error_behavior+0x14>
 8000252:	2b01      	cmp	r3, #1
 8000254:	d025      	beq.n	80002a2 <error_behavior+0x5e>
				__auto_mode_timer = HAL_GetTick();
			}
			break;
		}
		default:
			break;
 8000256:	e04e      	b.n	80002f6 <error_behavior+0xb2>
			MOTOR_Set_State(MOTOR_OFF);
 8000258:	2000      	movs	r0, #0
 800025a:	f000 f9ab 	bl	80005b4 <MOTOR_Set_State>
			RELAY_Set_State(TURN_OFF_ALL);
 800025e:	2000      	movs	r0, #0
 8000260:	f000 f9de 	bl	8000620 <RELAY_Set_State>
			uint32_t t_time = (HAL_GetTick() - __auto_mode_timer) / 60000;
 8000264:	f001 fa2c 	bl	80016c0 <HAL_GetTick>
 8000268:	0002      	movs	r2, r0
 800026a:	4b26      	ldr	r3, [pc, #152]	; (8000304 <error_behavior+0xc0>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	1ad3      	subs	r3, r2, r3
 8000270:	4925      	ldr	r1, [pc, #148]	; (8000308 <error_behavior+0xc4>)
 8000272:	0018      	movs	r0, r3
 8000274:	f7ff ff5a 	bl	800012c <__udivsi3>
 8000278:	0003      	movs	r3, r0
 800027a:	61bb      	str	r3, [r7, #24]
			if(t_time >= FLASH_DATA_Get_Current_Data().washing_cycle / 2){
 800027c:	003b      	movs	r3, r7
 800027e:	0018      	movs	r0, r3
 8000280:	f000 fac6 	bl	8000810 <FLASH_DATA_Get_Current_Data>
 8000284:	003b      	movs	r3, r7
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	085b      	lsrs	r3, r3, #1
 800028a:	69ba      	ldr	r2, [r7, #24]
 800028c:	429a      	cmp	r2, r3
 800028e:	d32f      	bcc.n	80002f0 <error_behavior+0xac>
				CONTROL_Data.error_runnign_state = ERROR_WASHING_STATE;
 8000290:	4b1b      	ldr	r3, [pc, #108]	; (8000300 <error_behavior+0xbc>)
 8000292:	2201      	movs	r2, #1
 8000294:	709a      	strb	r2, [r3, #2]
				__auto_mode_timer = HAL_GetTick();
 8000296:	f001 fa13 	bl	80016c0 <HAL_GetTick>
 800029a:	0002      	movs	r2, r0
 800029c:	4b19      	ldr	r3, [pc, #100]	; (8000304 <error_behavior+0xc0>)
 800029e:	601a      	str	r2, [r3, #0]
			break;
 80002a0:	e026      	b.n	80002f0 <error_behavior+0xac>
			MOTOR_Set_State(MOTOR_ON);
 80002a2:	2001      	movs	r0, #1
 80002a4:	f000 f986 	bl	80005b4 <MOTOR_Set_State>
			RELAY_Set_State(TURN_ON_RELAY_1);
 80002a8:	2001      	movs	r0, #1
 80002aa:	f000 f9b9 	bl	8000620 <RELAY_Set_State>
			uint32_t t_time = HAL_GetTick() - __auto_mode_timer;
 80002ae:	f001 fa07 	bl	80016c0 <HAL_GetTick>
 80002b2:	0002      	movs	r2, r0
 80002b4:	4b13      	ldr	r3, [pc, #76]	; (8000304 <error_behavior+0xc0>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	1ad3      	subs	r3, r2, r3
 80002ba:	61fb      	str	r3, [r7, #28]
			if(t_time > FLASH_DATA_Get_Current_Data().washing_time * 1000){
 80002bc:	240c      	movs	r4, #12
 80002be:	193b      	adds	r3, r7, r4
 80002c0:	0018      	movs	r0, r3
 80002c2:	f000 faa5 	bl	8000810 <FLASH_DATA_Get_Current_Data>
 80002c6:	193b      	adds	r3, r7, r4
 80002c8:	685a      	ldr	r2, [r3, #4]
 80002ca:	0013      	movs	r3, r2
 80002cc:	015b      	lsls	r3, r3, #5
 80002ce:	1a9b      	subs	r3, r3, r2
 80002d0:	009b      	lsls	r3, r3, #2
 80002d2:	189b      	adds	r3, r3, r2
 80002d4:	00db      	lsls	r3, r3, #3
 80002d6:	001a      	movs	r2, r3
 80002d8:	69fb      	ldr	r3, [r7, #28]
 80002da:	4293      	cmp	r3, r2
 80002dc:	d90a      	bls.n	80002f4 <error_behavior+0xb0>
				CONTROL_Data.error_runnign_state = ERROR_IDLE_STATE;
 80002de:	4b08      	ldr	r3, [pc, #32]	; (8000300 <error_behavior+0xbc>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	709a      	strb	r2, [r3, #2]
				__auto_mode_timer = HAL_GetTick();
 80002e4:	f001 f9ec 	bl	80016c0 <HAL_GetTick>
 80002e8:	0002      	movs	r2, r0
 80002ea:	4b06      	ldr	r3, [pc, #24]	; (8000304 <error_behavior+0xc0>)
 80002ec:	601a      	str	r2, [r3, #0]
			break;
 80002ee:	e001      	b.n	80002f4 <error_behavior+0xb0>
			break;
 80002f0:	46c0      	nop			; (mov r8, r8)
 80002f2:	e000      	b.n	80002f6 <error_behavior+0xb2>
			break;
 80002f4:	46c0      	nop			; (mov r8, r8)
	}

}
 80002f6:	46c0      	nop			; (mov r8, r8)
 80002f8:	46bd      	mov	sp, r7
 80002fa:	b009      	add	sp, #36	; 0x24
 80002fc:	bd90      	pop	{r4, r7, pc}
 80002fe:	46c0      	nop			; (mov r8, r8)
 8000300:	2000013c 	.word	0x2000013c
 8000304:	20000148 	.word	0x20000148
 8000308:	0000ea60 	.word	0x0000ea60

0800030c <WLS1_Control>:

void WLS1_Control(){
 800030c:	b5b0      	push	{r4, r5, r7, lr}
 800030e:	b084      	sub	sp, #16
 8000310:	af00      	add	r7, sp, #0
	uint8_t t_value_mask = WLS_Value();
 8000312:	250f      	movs	r5, #15
 8000314:	197c      	adds	r4, r7, r5
 8000316:	f003 fee9 	bl	80040ec <WLS_Value>
 800031a:	0003      	movs	r3, r0
 800031c:	7023      	strb	r3, [r4, #0]
	if(HAL_GetTick() > 3000){
 800031e:	f001 f9cf 	bl	80016c0 <HAL_GetTick>
 8000322:	0003      	movs	r3, r0
 8000324:	4a31      	ldr	r2, [pc, #196]	; (80003ec <WLS1_Control+0xe0>)
 8000326:	4293      	cmp	r3, r2
 8000328:	d95b      	bls.n	80003e2 <WLS1_Control+0xd6>
		if((t_value_mask & WLS1_LEVEL_0) != 0){
 800032a:	197b      	adds	r3, r7, r5
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	2201      	movs	r2, #1
 8000330:	4013      	ands	r3, r2
 8000332:	d003      	beq.n	800033c <WLS1_Control+0x30>
			CONTROL_Data.drum_control_state = DRUM_HIGH_WATER_STATE;
 8000334:	4b2e      	ldr	r3, [pc, #184]	; (80003f0 <WLS1_Control+0xe4>)
 8000336:	2201      	movs	r2, #1
 8000338:	701a      	strb	r2, [r3, #0]
 800033a:	e043      	b.n	80003c4 <WLS1_Control+0xb8>
		} else if((t_value_mask & WLS1_LEVEL_1) != 0){
 800033c:	230f      	movs	r3, #15
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	2202      	movs	r2, #2
 8000344:	4013      	ands	r3, r2
 8000346:	d003      	beq.n	8000350 <WLS1_Control+0x44>
			CONTROL_Data.drum_control_state = DRUM_NORMAL_STATE;
 8000348:	4b29      	ldr	r3, [pc, #164]	; (80003f0 <WLS1_Control+0xe4>)
 800034a:	2200      	movs	r2, #0
 800034c:	701a      	strb	r2, [r3, #0]
 800034e:	e039      	b.n	80003c4 <WLS1_Control+0xb8>
		} else if((t_value_mask & WLS1_LEVEL_2) != 0){
 8000350:	230f      	movs	r3, #15
 8000352:	18fb      	adds	r3, r7, r3
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	2204      	movs	r2, #4
 8000358:	4013      	ands	r3, r2
 800035a:	d022      	beq.n	80003a2 <WLS1_Control+0x96>
			if(__last_drum_state == DRUM_NORMAL_STATE){
 800035c:	4b25      	ldr	r3, [pc, #148]	; (80003f4 <WLS1_Control+0xe8>)
 800035e:	881b      	ldrh	r3, [r3, #0]
 8000360:	2b00      	cmp	r3, #0
 8000362:	d12f      	bne.n	80003c4 <WLS1_Control+0xb8>
				CONTROL_Data.drum_control_state = DRUM_WASHING_STATE;
 8000364:	4b22      	ldr	r3, [pc, #136]	; (80003f0 <WLS1_Control+0xe4>)
 8000366:	2202      	movs	r2, #2
 8000368:	701a      	strb	r2, [r3, #0]
				__counter_timer = HAL_GetTick();
 800036a:	f001 f9a9 	bl	80016c0 <HAL_GetTick>
 800036e:	0002      	movs	r2, r0
 8000370:	4b21      	ldr	r3, [pc, #132]	; (80003f8 <WLS1_Control+0xec>)
 8000372:	601a      	str	r2, [r3, #0]
				FLASH_DATA_t t_data = FLASH_DATA_Get_Current_Data();
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	0018      	movs	r0, r3
 8000378:	f000 fa4a 	bl	8000810 <FLASH_DATA_Get_Current_Data>
				t_data.washing_cycle = (HAL_GetTick() - __counter_timer) / 60;
 800037c:	f001 f9a0 	bl	80016c0 <HAL_GetTick>
 8000380:	0002      	movs	r2, r0
 8000382:	4b1d      	ldr	r3, [pc, #116]	; (80003f8 <WLS1_Control+0xec>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	1ad3      	subs	r3, r2, r3
 8000388:	213c      	movs	r1, #60	; 0x3c
 800038a:	0018      	movs	r0, r3
 800038c:	f7ff fece 	bl	800012c <__udivsi3>
 8000390:	0003      	movs	r3, r0
 8000392:	001a      	movs	r2, r3
 8000394:	1d3b      	adds	r3, r7, #4
 8000396:	601a      	str	r2, [r3, #0]
				FLASH_DATA_Update(&t_data);
 8000398:	1d3b      	adds	r3, r7, #4
 800039a:	0018      	movs	r0, r3
 800039c:	f000 f9de 	bl	800075c <FLASH_DATA_Update>
 80003a0:	e010      	b.n	80003c4 <WLS1_Control+0xb8>
			}
		} else if((t_value_mask & WLS1_LEVEL_3) != 0){
 80003a2:	230f      	movs	r3, #15
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	2208      	movs	r2, #8
 80003aa:	4013      	ands	r3, r2
 80003ac:	d007      	beq.n	80003be <WLS1_Control+0xb2>
			if(__last_drum_state == DRUM_WASHING_STATE){
 80003ae:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <WLS1_Control+0xe8>)
 80003b0:	881b      	ldrh	r3, [r3, #0]
 80003b2:	2b02      	cmp	r3, #2
 80003b4:	d106      	bne.n	80003c4 <WLS1_Control+0xb8>
				CONTROL_Data.drum_control_state = DRUM_LOW_WATER_STATE;
 80003b6:	4b0e      	ldr	r3, [pc, #56]	; (80003f0 <WLS1_Control+0xe4>)
 80003b8:	2203      	movs	r2, #3
 80003ba:	701a      	strb	r2, [r3, #0]
 80003bc:	e002      	b.n	80003c4 <WLS1_Control+0xb8>
			}
		} else{
			CONTROL_Data.drum_control_state = DRUM_ERROR_STATE;
 80003be:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <WLS1_Control+0xe4>)
 80003c0:	2204      	movs	r2, #4
 80003c2:	701a      	strb	r2, [r3, #0]
		}
		if(CONTROL_Data.drum_control_state != __last_drum_state){
 80003c4:	4b0a      	ldr	r3, [pc, #40]	; (80003f0 <WLS1_Control+0xe4>)
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	b29a      	uxth	r2, r3
 80003ca:	4b0a      	ldr	r3, [pc, #40]	; (80003f4 <WLS1_Control+0xe8>)
 80003cc:	881b      	ldrh	r3, [r3, #0]
 80003ce:	429a      	cmp	r2, r3
 80003d0:	d007      	beq.n	80003e2 <WLS1_Control+0xd6>
			MENU_Data.changed = 0;
 80003d2:	4b0a      	ldr	r3, [pc, #40]	; (80003fc <WLS1_Control+0xf0>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	705a      	strb	r2, [r3, #1]
			__last_drum_state = CONTROL_Data.drum_control_state;
 80003d8:	4b05      	ldr	r3, [pc, #20]	; (80003f0 <WLS1_Control+0xe4>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	b29a      	uxth	r2, r3
 80003de:	4b05      	ldr	r3, [pc, #20]	; (80003f4 <WLS1_Control+0xe8>)
 80003e0:	801a      	strh	r2, [r3, #0]
		}
	}
}
 80003e2:	46c0      	nop			; (mov r8, r8)
 80003e4:	46bd      	mov	sp, r7
 80003e6:	b004      	add	sp, #16
 80003e8:	bdb0      	pop	{r4, r5, r7, pc}
 80003ea:	46c0      	nop			; (mov r8, r8)
 80003ec:	00000bb8 	.word	0x00000bb8
 80003f0:	2000013c 	.word	0x2000013c
 80003f4:	20000144 	.word	0x20000144
 80003f8:	2000014c 	.word	0x2000014c
 80003fc:	20000168 	.word	0x20000168

08000400 <WLS2_Control>:

void WLS2_Control(){
 8000400:	b590      	push	{r4, r7, lr}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
	uint8_t t_value_mask = WLS_Value();
 8000406:	1dfc      	adds	r4, r7, #7
 8000408:	f003 fe70 	bl	80040ec <WLS_Value>
 800040c:	0003      	movs	r3, r0
 800040e:	7023      	strb	r3, [r4, #0]
	if(HAL_GetTick() > 3000){
 8000410:	f001 f956 	bl	80016c0 <HAL_GetTick>
 8000414:	0003      	movs	r3, r0
 8000416:	4a13      	ldr	r2, [pc, #76]	; (8000464 <WLS2_Control+0x64>)
 8000418:	4293      	cmp	r3, r2
 800041a:	d910      	bls.n	800043e <WLS2_Control+0x3e>
		if((t_value_mask & WLS2_LEVEL_0) != 0){
 800041c:	1dfb      	adds	r3, r7, #7
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	2210      	movs	r2, #16
 8000422:	4013      	ands	r3, r2
 8000424:	d003      	beq.n	800042e <WLS2_Control+0x2e>
			CONTROL_Data.pool_control_state = POOL_NORMAL_STATE;
 8000426:	4b10      	ldr	r3, [pc, #64]	; (8000468 <WLS2_Control+0x68>)
 8000428:	2200      	movs	r2, #0
 800042a:	705a      	strb	r2, [r3, #1]
 800042c:	e007      	b.n	800043e <WLS2_Control+0x3e>
		} else if((t_value_mask & WLS2_LEVEL_1) != 0){
 800042e:	1dfb      	adds	r3, r7, #7
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	2220      	movs	r2, #32
 8000434:	4013      	ands	r3, r2
 8000436:	d102      	bne.n	800043e <WLS2_Control+0x3e>
			;
		} else{
			CONTROL_Data.pool_control_state = POOL_LOW_WATER_STATE;
 8000438:	4b0b      	ldr	r3, [pc, #44]	; (8000468 <WLS2_Control+0x68>)
 800043a:	2201      	movs	r2, #1
 800043c:	705a      	strb	r2, [r3, #1]
		}
	}
	if(CONTROL_Data.pool_control_state != __last_pool_state){
 800043e:	4b0a      	ldr	r3, [pc, #40]	; (8000468 <WLS2_Control+0x68>)
 8000440:	785b      	ldrb	r3, [r3, #1]
 8000442:	b29a      	uxth	r2, r3
 8000444:	4b09      	ldr	r3, [pc, #36]	; (800046c <WLS2_Control+0x6c>)
 8000446:	881b      	ldrh	r3, [r3, #0]
 8000448:	429a      	cmp	r2, r3
 800044a:	d007      	beq.n	800045c <WLS2_Control+0x5c>
		MENU_Data.changed = 0;
 800044c:	4b08      	ldr	r3, [pc, #32]	; (8000470 <WLS2_Control+0x70>)
 800044e:	2200      	movs	r2, #0
 8000450:	705a      	strb	r2, [r3, #1]
		__last_pool_state = CONTROL_Data.pool_control_state;
 8000452:	4b05      	ldr	r3, [pc, #20]	; (8000468 <WLS2_Control+0x68>)
 8000454:	785b      	ldrb	r3, [r3, #1]
 8000456:	b29a      	uxth	r2, r3
 8000458:	4b04      	ldr	r3, [pc, #16]	; (800046c <WLS2_Control+0x6c>)
 800045a:	801a      	strh	r2, [r3, #0]
	}
}
 800045c:	46c0      	nop			; (mov r8, r8)
 800045e:	46bd      	mov	sp, r7
 8000460:	b003      	add	sp, #12
 8000462:	bd90      	pop	{r4, r7, pc}
 8000464:	00000bb8 	.word	0x00000bb8
 8000468:	2000013c 	.word	0x2000013c
 800046c:	20000146 	.word	0x20000146
 8000470:	20000168 	.word	0x20000168

08000474 <CONTRL_Init>:

void CONTRL_Init(){
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
	CONTROL_Data.drum_control_state = DRUM_NORMAL_STATE;
 8000478:	4b0b      	ldr	r3, [pc, #44]	; (80004a8 <CONTRL_Init+0x34>)
 800047a:	2200      	movs	r2, #0
 800047c:	701a      	strb	r2, [r3, #0]
	CONTROL_Data.pool_control_state = POOL_NORMAL_STATE;
 800047e:	4b0a      	ldr	r3, [pc, #40]	; (80004a8 <CONTRL_Init+0x34>)
 8000480:	2200      	movs	r2, #0
 8000482:	705a      	strb	r2, [r3, #1]
	__last_drum_state = DRUM_NORMAL_STATE;
 8000484:	4b09      	ldr	r3, [pc, #36]	; (80004ac <CONTRL_Init+0x38>)
 8000486:	2200      	movs	r2, #0
 8000488:	801a      	strh	r2, [r3, #0]
	__last_pool_state = POOL_NORMAL_STATE;
 800048a:	4b09      	ldr	r3, [pc, #36]	; (80004b0 <CONTRL_Init+0x3c>)
 800048c:	2200      	movs	r2, #0
 800048e:	801a      	strh	r2, [r3, #0]

	MOTOR_Init(MOTOR_OFF);
 8000490:	2000      	movs	r0, #0
 8000492:	f000 f87f 	bl	8000594 <MOTOR_Init>
	RELAY_Init();
 8000496:	f000 f8b9 	bl	800060c <RELAY_Init>
	WLS_Init();
 800049a:	f003 fe0f 	bl	80040bc <WLS_Init>

	FLASH_DATA_Init();
 800049e:	f000 f909 	bl	80006b4 <FLASH_DATA_Init>
}
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	2000013c 	.word	0x2000013c
 80004ac:	20000144 	.word	0x20000144
 80004b0:	20000146 	.word	0x20000146

080004b4 <CONTROL_Handle>:

void CONTROL_Handle(){
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
	MOTOR_Handle();
 80004b8:	f000 f88c 	bl	80005d4 <MOTOR_Handle>
	RELAY_Handle();
 80004bc:	f000 f8ca 	bl	8000654 <RELAY_Handle>
	WLS_Handle();
 80004c0:	f003 fd18 	bl	8003ef4 <WLS_Handle>
	WLS1_Control();
 80004c4:	f7ff ff22 	bl	800030c <WLS1_Control>
	WLS2_Control();
 80004c8:	f7ff ff9a 	bl	8000400 <WLS2_Control>
	switch(CONTROL_Data.drum_control_state){
 80004cc:	4b2d      	ldr	r3, [pc, #180]	; (8000584 <CONTROL_Handle+0xd0>)
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	2b04      	cmp	r3, #4
 80004d2:	d823      	bhi.n	800051c <CONTROL_Handle+0x68>
 80004d4:	009a      	lsls	r2, r3, #2
 80004d6:	4b2c      	ldr	r3, [pc, #176]	; (8000588 <CONTROL_Handle+0xd4>)
 80004d8:	18d3      	adds	r3, r2, r3
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	469f      	mov	pc, r3
		case DRUM_HIGH_WATER_STATE:
			MOTOR_Set_State(MOTOR_OFF);
 80004de:	2000      	movs	r0, #0
 80004e0:	f000 f868 	bl	80005b4 <MOTOR_Set_State>
			RELAY_Set_State(TURN_OFF_ALL);
 80004e4:	2000      	movs	r0, #0
 80004e6:	f000 f89b 	bl	8000620 <RELAY_Set_State>
			break;
 80004ea:	e018      	b.n	800051e <CONTROL_Handle+0x6a>
		case DRUM_NORMAL_STATE:
			MOTOR_Set_State(MOTOR_OFF);
 80004ec:	2000      	movs	r0, #0
 80004ee:	f000 f861 	bl	80005b4 <MOTOR_Set_State>
			RELAY_Set_State(TURN_ON_RELAY_2);
 80004f2:	2002      	movs	r0, #2
 80004f4:	f000 f894 	bl	8000620 <RELAY_Set_State>
			break;
 80004f8:	e011      	b.n	800051e <CONTROL_Handle+0x6a>
		case DRUM_WASHING_STATE:
			MOTOR_Set_State(MOTOR_ON);
 80004fa:	2001      	movs	r0, #1
 80004fc:	f000 f85a 	bl	80005b4 <MOTOR_Set_State>
			RELAY_Set_State(TURN_ON_RELAY_1 | TURN_ON_RELAY_2);
 8000500:	2003      	movs	r0, #3
 8000502:	f000 f88d 	bl	8000620 <RELAY_Set_State>
			break;
 8000506:	e00a      	b.n	800051e <CONTROL_Handle+0x6a>
		case DRUM_LOW_WATER_STATE:
			MOTOR_Set_State(MOTOR_OFF);
 8000508:	2000      	movs	r0, #0
 800050a:	f000 f853 	bl	80005b4 <MOTOR_Set_State>
			RELAY_Set_State(TURN_ON_RELAY_2 | TURN_ON_RELAY_3 | TURN_ON_RELAY_4);
 800050e:	200e      	movs	r0, #14
 8000510:	f000 f886 	bl	8000620 <RELAY_Set_State>
			break;
 8000514:	e003      	b.n	800051e <CONTROL_Handle+0x6a>
		case DRUM_ERROR_STATE:
			error_behavior();
 8000516:	f7ff fe95 	bl	8000244 <error_behavior>
			break;
 800051a:	e000      	b.n	800051e <CONTROL_Handle+0x6a>
		default:
			break;
 800051c:	46c0      	nop			; (mov r8, r8)
	}

	switch(CONTROL_Data.pool_control_state){
 800051e:	4b19      	ldr	r3, [pc, #100]	; (8000584 <CONTROL_Handle+0xd0>)
 8000520:	785b      	ldrb	r3, [r3, #1]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d002      	beq.n	800052c <CONTROL_Handle+0x78>
 8000526:	2b01      	cmp	r3, #1
 8000528:	d00c      	beq.n	8000544 <CONTROL_Handle+0x90>
 800052a:	e016      	b.n	800055a <CONTROL_Handle+0xa6>
		case POOL_NORMAL_STATE:
			RELAY_Set_State(RELAY_Current_Relay_Mask() & ~(TURN_ON_RELAY_5));
 800052c:	f000 f888 	bl	8000640 <RELAY_Current_Relay_Mask>
 8000530:	0003      	movs	r3, r0
 8000532:	001a      	movs	r2, r3
 8000534:	2310      	movs	r3, #16
 8000536:	439a      	bics	r2, r3
 8000538:	0013      	movs	r3, r2
 800053a:	b2db      	uxtb	r3, r3
 800053c:	0018      	movs	r0, r3
 800053e:	f000 f86f 	bl	8000620 <RELAY_Set_State>
			break;
 8000542:	e00a      	b.n	800055a <CONTROL_Handle+0xa6>
		case POOL_LOW_WATER_STATE:
			RELAY_Set_State(RELAY_Current_Relay_Mask() | TURN_ON_RELAY_5);
 8000544:	f000 f87c 	bl	8000640 <RELAY_Current_Relay_Mask>
 8000548:	0003      	movs	r3, r0
 800054a:	001a      	movs	r2, r3
 800054c:	2310      	movs	r3, #16
 800054e:	4313      	orrs	r3, r2
 8000550:	b2db      	uxtb	r3, r3
 8000552:	0018      	movs	r0, r3
 8000554:	f000 f864 	bl	8000620 <RELAY_Set_State>
			break;
 8000558:	46c0      	nop			; (mov r8, r8)
	}

	if(RELAY_Current_Relay_Mask() != __relay_mask){
 800055a:	f000 f871 	bl	8000640 <RELAY_Current_Relay_Mask>
 800055e:	0003      	movs	r3, r0
 8000560:	001a      	movs	r2, r3
 8000562:	4b0a      	ldr	r3, [pc, #40]	; (800058c <CONTROL_Handle+0xd8>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	429a      	cmp	r2, r3
 8000568:	d008      	beq.n	800057c <CONTROL_Handle+0xc8>
		MENU_Data.changed = 0;
 800056a:	4b09      	ldr	r3, [pc, #36]	; (8000590 <CONTROL_Handle+0xdc>)
 800056c:	2200      	movs	r2, #0
 800056e:	705a      	strb	r2, [r3, #1]
		__relay_mask = RELAY_Current_Relay_Mask();
 8000570:	f000 f866 	bl	8000640 <RELAY_Current_Relay_Mask>
 8000574:	0003      	movs	r3, r0
 8000576:	001a      	movs	r2, r3
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <CONTROL_Handle+0xd8>)
 800057a:	701a      	strb	r2, [r3, #0]
	}

}
 800057c:	46c0      	nop			; (mov r8, r8)
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	2000013c 	.word	0x2000013c
 8000588:	08004c6c 	.word	0x08004c6c
 800058c:	20000150 	.word	0x20000150
 8000590:	20000168 	.word	0x20000168

08000594 <MOTOR_Init>:
#include "Motor.h"

MOTOR_DATA_HandleTypeDef MOTOR_Data;

void MOTOR_Init(MOTOR_STATE_HandleTypdeDef p_move){
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	0002      	movs	r2, r0
 800059c:	1dfb      	adds	r3, r7, #7
 800059e:	701a      	strb	r2, [r3, #0]
	MOTOR_Data.state = MOTOR_OFF;
 80005a0:	4b03      	ldr	r3, [pc, #12]	; (80005b0 <MOTOR_Init+0x1c>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	701a      	strb	r2, [r3, #0]
}
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	46bd      	mov	sp, r7
 80005aa:	b002      	add	sp, #8
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	20000154 	.word	0x20000154

080005b4 <MOTOR_Set_State>:

void MOTOR_Set_State(MOTOR_STATE_HandleTypdeDef p_state){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	0002      	movs	r2, r0
 80005bc:	1dfb      	adds	r3, r7, #7
 80005be:	701a      	strb	r2, [r3, #0]
	MOTOR_Data.state = p_state;
 80005c0:	4b03      	ldr	r3, [pc, #12]	; (80005d0 <MOTOR_Set_State+0x1c>)
 80005c2:	1dfa      	adds	r2, r7, #7
 80005c4:	7812      	ldrb	r2, [r2, #0]
 80005c6:	701a      	strb	r2, [r3, #0]
}
 80005c8:	46c0      	nop			; (mov r8, r8)
 80005ca:	46bd      	mov	sp, r7
 80005cc:	b002      	add	sp, #8
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	20000154 	.word	0x20000154

080005d4 <MOTOR_Handle>:

void MOTOR_Handle(){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	if(MOTOR_Data.state == MOTOR_ON){
 80005d8:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <MOTOR_Handle+0x34>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d108      	bne.n	80005f2 <MOTOR_Handle+0x1e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);
 80005e0:	2380      	movs	r3, #128	; 0x80
 80005e2:	0159      	lsls	r1, r3, #5
 80005e4:	2390      	movs	r3, #144	; 0x90
 80005e6:	05db      	lsls	r3, r3, #23
 80005e8:	2201      	movs	r2, #1
 80005ea:	0018      	movs	r0, r3
 80005ec:	f001 fcd9 	bl	8001fa2 <HAL_GPIO_WritePin>
	} else{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
	}
}
 80005f0:	e007      	b.n	8000602 <MOTOR_Handle+0x2e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
 80005f2:	2380      	movs	r3, #128	; 0x80
 80005f4:	0159      	lsls	r1, r3, #5
 80005f6:	2390      	movs	r3, #144	; 0x90
 80005f8:	05db      	lsls	r3, r3, #23
 80005fa:	2200      	movs	r2, #0
 80005fc:	0018      	movs	r0, r3
 80005fe:	f001 fcd0 	bl	8001fa2 <HAL_GPIO_WritePin>
}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000154 	.word	0x20000154

0800060c <RELAY_Init>:
#ifdef __STM32F4xx_HAL_H
		GPIO_PIN_9
#endif
};

void RELAY_Init(){
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	RELAY_Data.relay_mask = 0x00;
 8000610:	4b02      	ldr	r3, [pc, #8]	; (800061c <RELAY_Init+0x10>)
 8000612:	2200      	movs	r2, #0
 8000614:	701a      	strb	r2, [r3, #0]
}
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000158 	.word	0x20000158

08000620 <RELAY_Set_State>:

void RELAY_Set_State(uint8_t p_relay_mask){
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	0002      	movs	r2, r0
 8000628:	1dfb      	adds	r3, r7, #7
 800062a:	701a      	strb	r2, [r3, #0]
	RELAY_Data.relay_mask = p_relay_mask;
 800062c:	4b03      	ldr	r3, [pc, #12]	; (800063c <RELAY_Set_State+0x1c>)
 800062e:	1dfa      	adds	r2, r7, #7
 8000630:	7812      	ldrb	r2, [r2, #0]
 8000632:	701a      	strb	r2, [r3, #0]
}
 8000634:	46c0      	nop			; (mov r8, r8)
 8000636:	46bd      	mov	sp, r7
 8000638:	b002      	add	sp, #8
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000158 	.word	0x20000158

08000640 <RELAY_Current_Relay_Mask>:

uint8_t RELAY_Current_Relay_Mask(){
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
	return RELAY_Data.relay_mask;
 8000644:	4b02      	ldr	r3, [pc, #8]	; (8000650 <RELAY_Current_Relay_Mask+0x10>)
 8000646:	781b      	ldrb	r3, [r3, #0]
}
 8000648:	0018      	movs	r0, r3
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	20000158 	.word	0x20000158

08000654 <RELAY_Handle>:

void RELAY_Handle(){
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
	for(int i = 0; i < NUM_OF_RELAY; i++){
 800065a:	2300      	movs	r3, #0
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	e01a      	b.n	8000696 <RELAY_Handle+0x42>
		uint8_t t_relay_state = (RELAY_Data.relay_mask & (0x01 << i)) ? 1 : 0;
 8000660:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <RELAY_Handle+0x54>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	001a      	movs	r2, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	411a      	asrs	r2, r3
 800066a:	0013      	movs	r3, r2
 800066c:	b2da      	uxtb	r2, r3
 800066e:	1cfb      	adds	r3, r7, #3
 8000670:	2101      	movs	r1, #1
 8000672:	400a      	ands	r2, r1
 8000674:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(RELAY_Port[i], RELAY_Pin[i], t_relay_state);
 8000676:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <RELAY_Handle+0x58>)
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	0092      	lsls	r2, r2, #2
 800067c:	58d0      	ldr	r0, [r2, r3]
 800067e:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <RELAY_Handle+0x5c>)
 8000680:	687a      	ldr	r2, [r7, #4]
 8000682:	0052      	lsls	r2, r2, #1
 8000684:	5ad1      	ldrh	r1, [r2, r3]
 8000686:	1cfb      	adds	r3, r7, #3
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	001a      	movs	r2, r3
 800068c:	f001 fc89 	bl	8001fa2 <HAL_GPIO_WritePin>
	for(int i = 0; i < NUM_OF_RELAY; i++){
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	3301      	adds	r3, #1
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2b04      	cmp	r3, #4
 800069a:	dde1      	ble.n	8000660 <RELAY_Handle+0xc>
	}
}
 800069c:	46c0      	nop			; (mov r8, r8)
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	46bd      	mov	sp, r7
 80006a2:	b002      	add	sp, #8
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	20000158 	.word	0x20000158
 80006ac:	20000000 	.word	0x20000000
 80006b0:	20000014 	.word	0x20000014

080006b4 <FLASH_DATA_Init>:

#define DATA_FRAME_SIZE_BYTE 	(sizeof(FLASH_DATA_t))	// in byte

FLASH_DATA_t FLASH_Data;

void FLASH_DATA_Init(){
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
	uint8_t t_data[DATA_FRAME_SIZE_BYTE];
	FLASH_Read(FIRST_PAGE_ADD + BYTE_PER_PAGE * 63, t_data, DATA_FRAME_SIZE_BYTE);
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	4824      	ldr	r0, [pc, #144]	; (8000750 <FLASH_DATA_Init+0x9c>)
 80006be:	2209      	movs	r2, #9
 80006c0:	0019      	movs	r1, r3
 80006c2:	f003 fd84 	bl	80041ce <FLASH_Read>
	FLASH_Data = *(FLASH_DATA_t *)t_data;
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	4a22      	ldr	r2, [pc, #136]	; (8000754 <FLASH_DATA_Init+0xa0>)
 80006ca:	0010      	movs	r0, r2
 80006cc:	0019      	movs	r1, r3
 80006ce:	2309      	movs	r3, #9
 80006d0:	001a      	movs	r2, r3
 80006d2:	f003 fdd7 	bl	8004284 <memcpy>
	if(FLASH_Data.washing_time < MIN_WASHING_TIME || FLASH_Data.washing_time > MAX_WASHING_TIME ||
 80006d6:	4b1f      	ldr	r3, [pc, #124]	; (8000754 <FLASH_DATA_Init+0xa0>)
 80006d8:	685b      	ldr	r3, [r3, #4]
 80006da:	2b09      	cmp	r3, #9
 80006dc:	d912      	bls.n	8000704 <FLASH_DATA_Init+0x50>
 80006de:	4b1d      	ldr	r3, [pc, #116]	; (8000754 <FLASH_DATA_Init+0xa0>)
 80006e0:	685b      	ldr	r3, [r3, #4]
 80006e2:	4a1d      	ldr	r2, [pc, #116]	; (8000758 <FLASH_DATA_Init+0xa4>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d80d      	bhi.n	8000704 <FLASH_DATA_Init+0x50>
		FLASH_Data.washing_cycle < MIN_WASHING_CYCLE || FLASH_Data.washing_cycle > MAX_WASHING_CYCLE ||
 80006e8:	4b1a      	ldr	r3, [pc, #104]	; (8000754 <FLASH_DATA_Init+0xa0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
	if(FLASH_Data.washing_time < MIN_WASHING_TIME || FLASH_Data.washing_time > MAX_WASHING_TIME ||
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d909      	bls.n	8000704 <FLASH_DATA_Init+0x50>
		FLASH_Data.washing_cycle < MIN_WASHING_CYCLE || FLASH_Data.washing_cycle > MAX_WASHING_CYCLE ||
 80006f0:	4b18      	ldr	r3, [pc, #96]	; (8000754 <FLASH_DATA_Init+0xa0>)
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	23b4      	movs	r3, #180	; 0xb4
 80006f6:	00db      	lsls	r3, r3, #3
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d803      	bhi.n	8000704 <FLASH_DATA_Init+0x50>
		FLASH_Data.sensor_normal_state > 1){
 80006fc:	4b15      	ldr	r3, [pc, #84]	; (8000754 <FLASH_DATA_Init+0xa0>)
 80006fe:	7a1b      	ldrb	r3, [r3, #8]
		FLASH_Data.washing_cycle < MIN_WASHING_CYCLE || FLASH_Data.washing_cycle > MAX_WASHING_CYCLE ||
 8000700:	2b01      	cmp	r3, #1
 8000702:	d921      	bls.n	8000748 <FLASH_DATA_Init+0x94>
		if(FLASH_Data.washing_time < MIN_WASHING_TIME || FLASH_Data.washing_time > MAX_WASHING_TIME){
 8000704:	4b13      	ldr	r3, [pc, #76]	; (8000754 <FLASH_DATA_Init+0xa0>)
 8000706:	685b      	ldr	r3, [r3, #4]
 8000708:	2b09      	cmp	r3, #9
 800070a:	d904      	bls.n	8000716 <FLASH_DATA_Init+0x62>
 800070c:	4b11      	ldr	r3, [pc, #68]	; (8000754 <FLASH_DATA_Init+0xa0>)
 800070e:	685b      	ldr	r3, [r3, #4]
 8000710:	4a11      	ldr	r2, [pc, #68]	; (8000758 <FLASH_DATA_Init+0xa4>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d902      	bls.n	800071c <FLASH_DATA_Init+0x68>
			FLASH_Data.washing_time = MIN_WASHING_TIME;
 8000716:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <FLASH_DATA_Init+0xa0>)
 8000718:	220a      	movs	r2, #10
 800071a:	605a      	str	r2, [r3, #4]
		}
		if(FLASH_Data.washing_cycle < MIN_WASHING_CYCLE || FLASH_Data.washing_cycle > MAX_WASHING_CYCLE){
 800071c:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <FLASH_DATA_Init+0xa0>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2b01      	cmp	r3, #1
 8000722:	d905      	bls.n	8000730 <FLASH_DATA_Init+0x7c>
 8000724:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <FLASH_DATA_Init+0xa0>)
 8000726:	681a      	ldr	r2, [r3, #0]
 8000728:	23b4      	movs	r3, #180	; 0xb4
 800072a:	00db      	lsls	r3, r3, #3
 800072c:	429a      	cmp	r2, r3
 800072e:	d902      	bls.n	8000736 <FLASH_DATA_Init+0x82>
			FLASH_Data.washing_cycle = MIN_WASHING_CYCLE;
 8000730:	4b08      	ldr	r3, [pc, #32]	; (8000754 <FLASH_DATA_Init+0xa0>)
 8000732:	2202      	movs	r2, #2
 8000734:	601a      	str	r2, [r3, #0]
		}
		if(FLASH_Data.sensor_normal_state > 1){
 8000736:	4b07      	ldr	r3, [pc, #28]	; (8000754 <FLASH_DATA_Init+0xa0>)
 8000738:	7a1b      	ldrb	r3, [r3, #8]
 800073a:	2b01      	cmp	r3, #1
 800073c:	d902      	bls.n	8000744 <FLASH_DATA_Init+0x90>
			FLASH_Data.sensor_normal_state = 0;
 800073e:	4b05      	ldr	r3, [pc, #20]	; (8000754 <FLASH_DATA_Init+0xa0>)
 8000740:	2200      	movs	r2, #0
 8000742:	721a      	strb	r2, [r3, #8]
		}
		FLASH_DATA_Store();
 8000744:	f000 f856 	bl	80007f4 <FLASH_DATA_Store>
	}
}
 8000748:	46c0      	nop			; (mov r8, r8)
 800074a:	46bd      	mov	sp, r7
 800074c:	b004      	add	sp, #16
 800074e:	bd80      	pop	{r7, pc}
 8000750:	0800fc00 	.word	0x0800fc00
 8000754:	2000015c 	.word	0x2000015c
 8000758:	0000270f 	.word	0x0000270f

0800075c <FLASH_DATA_Update>:

void FLASH_DATA_Update(FLASH_DATA_t *p_new_data){
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
	FLASH_Data = *p_new_data;
 8000764:	4a21      	ldr	r2, [pc, #132]	; (80007ec <FLASH_DATA_Update+0x90>)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	0010      	movs	r0, r2
 800076a:	0019      	movs	r1, r3
 800076c:	2309      	movs	r3, #9
 800076e:	001a      	movs	r2, r3
 8000770:	f003 fd88 	bl	8004284 <memcpy>
	if(p_new_data->washing_time < MIN_WASHING_TIME){
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	791a      	ldrb	r2, [r3, #4]
 8000778:	7959      	ldrb	r1, [r3, #5]
 800077a:	0209      	lsls	r1, r1, #8
 800077c:	430a      	orrs	r2, r1
 800077e:	7999      	ldrb	r1, [r3, #6]
 8000780:	0409      	lsls	r1, r1, #16
 8000782:	430a      	orrs	r2, r1
 8000784:	79db      	ldrb	r3, [r3, #7]
 8000786:	061b      	lsls	r3, r3, #24
 8000788:	4313      	orrs	r3, r2
 800078a:	2b09      	cmp	r3, #9
 800078c:	d803      	bhi.n	8000796 <FLASH_DATA_Update+0x3a>
		FLASH_Data.washing_time = MIN_WASHING_TIME;
 800078e:	4b17      	ldr	r3, [pc, #92]	; (80007ec <FLASH_DATA_Update+0x90>)
 8000790:	220a      	movs	r2, #10
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	e011      	b.n	80007ba <FLASH_DATA_Update+0x5e>
	} else if(p_new_data->washing_time > MAX_WASHING_TIME){
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	791a      	ldrb	r2, [r3, #4]
 800079a:	7959      	ldrb	r1, [r3, #5]
 800079c:	0209      	lsls	r1, r1, #8
 800079e:	430a      	orrs	r2, r1
 80007a0:	7999      	ldrb	r1, [r3, #6]
 80007a2:	0409      	lsls	r1, r1, #16
 80007a4:	430a      	orrs	r2, r1
 80007a6:	79db      	ldrb	r3, [r3, #7]
 80007a8:	061b      	lsls	r3, r3, #24
 80007aa:	4313      	orrs	r3, r2
 80007ac:	001a      	movs	r2, r3
 80007ae:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <FLASH_DATA_Update+0x94>)
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d902      	bls.n	80007ba <FLASH_DATA_Update+0x5e>
		FLASH_Data.washing_time = MAX_WASHING_TIME;
 80007b4:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <FLASH_DATA_Update+0x90>)
 80007b6:	4a0e      	ldr	r2, [pc, #56]	; (80007f0 <FLASH_DATA_Update+0x94>)
 80007b8:	605a      	str	r2, [r3, #4]
	}
	if(FLASH_Data.washing_cycle < MIN_WASHING_CYCLE){
 80007ba:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <FLASH_DATA_Update+0x90>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d803      	bhi.n	80007ca <FLASH_DATA_Update+0x6e>
		FLASH_Data.washing_cycle = MIN_WASHING_CYCLE;
 80007c2:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <FLASH_DATA_Update+0x90>)
 80007c4:	2202      	movs	r2, #2
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	e009      	b.n	80007de <FLASH_DATA_Update+0x82>
	} else if(FLASH_Data.washing_cycle > MAX_WASHING_CYCLE){
 80007ca:	4b08      	ldr	r3, [pc, #32]	; (80007ec <FLASH_DATA_Update+0x90>)
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	23b4      	movs	r3, #180	; 0xb4
 80007d0:	00db      	lsls	r3, r3, #3
 80007d2:	429a      	cmp	r2, r3
 80007d4:	d903      	bls.n	80007de <FLASH_DATA_Update+0x82>
		FLASH_Data.washing_cycle = MAX_WASHING_CYCLE;
 80007d6:	4b05      	ldr	r3, [pc, #20]	; (80007ec <FLASH_DATA_Update+0x90>)
 80007d8:	22b4      	movs	r2, #180	; 0xb4
 80007da:	00d2      	lsls	r2, r2, #3
 80007dc:	601a      	str	r2, [r3, #0]
	}
	FLASH_DATA_Store();
 80007de:	f000 f809 	bl	80007f4 <FLASH_DATA_Store>
}
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	46bd      	mov	sp, r7
 80007e6:	b002      	add	sp, #8
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	2000015c 	.word	0x2000015c
 80007f0:	0000270f 	.word	0x0000270f

080007f4 <FLASH_DATA_Store>:

void FLASH_DATA_Store(){
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	FLASH_Write(63, (uint8_t *)(&FLASH_Data), DATA_FRAME_SIZE_BYTE);
 80007f8:	4b04      	ldr	r3, [pc, #16]	; (800080c <FLASH_DATA_Store+0x18>)
 80007fa:	2209      	movs	r2, #9
 80007fc:	0019      	movs	r1, r3
 80007fe:	203f      	movs	r0, #63	; 0x3f
 8000800:	f003 fca0 	bl	8004144 <FLASH_Write>
}
 8000804:	46c0      	nop			; (mov r8, r8)
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	2000015c 	.word	0x2000015c

08000810 <FLASH_DATA_Get_Current_Data>:

FLASH_DATA_t FLASH_DATA_Get_Current_Data(){
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	return FLASH_Data;
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	4b05      	ldr	r3, [pc, #20]	; (8000830 <FLASH_DATA_Get_Current_Data+0x20>)
 800081c:	0010      	movs	r0, r2
 800081e:	0019      	movs	r1, r3
 8000820:	2309      	movs	r3, #9
 8000822:	001a      	movs	r2, r3
 8000824:	f003 fd2e 	bl	8004284 <memcpy>
}
 8000828:	6878      	ldr	r0, [r7, #4]
 800082a:	46bd      	mov	sp, r7
 800082c:	b002      	add	sp, #8
 800082e:	bd80      	pop	{r7, pc}
 8000830:	2000015c 	.word	0x2000015c

08000834 <MAIN_MENU_Init>:
#include "Control.h"
#include "Menu.h"
#include "Relay.h"
#include "Motor.h"

void MAIN_MENU_Init(){
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0

}
 8000838:	46c0      	nop			; (mov r8, r8)
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
	...

08000840 <MAIN_MENU_Set_State>:

void MAIN_MENU_Set_State(){
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
	MENU_Data.state = MAIN_MENU;
 8000844:	4b05      	ldr	r3, [pc, #20]	; (800085c <MAIN_MENU_Set_State+0x1c>)
 8000846:	2200      	movs	r2, #0
 8000848:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 800084a:	4b04      	ldr	r3, [pc, #16]	; (800085c <MAIN_MENU_Set_State+0x1c>)
 800084c:	2200      	movs	r2, #0
 800084e:	705a      	strb	r2, [r3, #1]
	MENU_Data.is_changing_menu = 1;
 8000850:	4b02      	ldr	r3, [pc, #8]	; (800085c <MAIN_MENU_Set_State+0x1c>)
 8000852:	2201      	movs	r2, #1
 8000854:	709a      	strb	r2, [r3, #2]
}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000168 	.word	0x20000168

08000860 <MAIN_MENU_Display>:

void MAIN_MENU_Display(){
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
	if(MENU_Data.is_changing_menu){
 8000866:	4b55      	ldr	r3, [pc, #340]	; (80009bc <MAIN_MENU_Display+0x15c>)
 8000868:	789b      	ldrb	r3, [r3, #2]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d007      	beq.n	800087e <MAIN_MENU_Display+0x1e>
		LCD_Clear(MENU_Data.hlcd);
 800086e:	4b53      	ldr	r3, [pc, #332]	; (80009bc <MAIN_MENU_Display+0x15c>)
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	0018      	movs	r0, r3
 8000874:	f003 fa23 	bl	8003cbe <LCD_Clear>
		MENU_Data.is_changing_menu = 0;
 8000878:	4b50      	ldr	r3, [pc, #320]	; (80009bc <MAIN_MENU_Display+0x15c>)
 800087a:	2200      	movs	r2, #0
 800087c:	709a      	strb	r2, [r3, #2]
	}
	LCD_Cursor_No_Blink(MENU_Data.hlcd);
 800087e:	4b4f      	ldr	r3, [pc, #316]	; (80009bc <MAIN_MENU_Display+0x15c>)
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	0018      	movs	r0, r3
 8000884:	f003 fa81 	bl	8003d8a <LCD_Cursor_No_Blink>

	LCD_Set_Cursor(MENU_Data.hlcd, 0, 0);
 8000888:	4b4c      	ldr	r3, [pc, #304]	; (80009bc <MAIN_MENU_Display+0x15c>)
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	2200      	movs	r2, #0
 800088e:	2100      	movs	r1, #0
 8000890:	0018      	movs	r0, r3
 8000892:	f003 fa2b 	bl	8003cec <LCD_Set_Cursor>
	LCD_Write(MENU_Data.hlcd, "Time: %02d:%02d", REALTIME_Data.system_hour, REALTIME_Data.system_minute);
 8000896:	4b49      	ldr	r3, [pc, #292]	; (80009bc <MAIN_MENU_Display+0x15c>)
 8000898:	6858      	ldr	r0, [r3, #4]
 800089a:	4b49      	ldr	r3, [pc, #292]	; (80009c0 <MAIN_MENU_Display+0x160>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	001a      	movs	r2, r3
 80008a0:	4b47      	ldr	r3, [pc, #284]	; (80009c0 <MAIN_MENU_Display+0x160>)
 80008a2:	785b      	ldrb	r3, [r3, #1]
 80008a4:	4947      	ldr	r1, [pc, #284]	; (80009c4 <MAIN_MENU_Display+0x164>)
 80008a6:	f003 f9cc 	bl	8003c42 <LCD_Write>

	LCD_Set_Cursor(MENU_Data.hlcd, 0, 1);
 80008aa:	4b44      	ldr	r3, [pc, #272]	; (80009bc <MAIN_MENU_Display+0x15c>)
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	2201      	movs	r2, #1
 80008b0:	2100      	movs	r1, #0
 80008b2:	0018      	movs	r0, r3
 80008b4:	f003 fa1a 	bl	8003cec <LCD_Set_Cursor>
	if(CONTROL_Data.drum_control_state == DRUM_NORMAL_STATE){
 80008b8:	4b43      	ldr	r3, [pc, #268]	; (80009c8 <MAIN_MENU_Display+0x168>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d109      	bne.n	80008d4 <MAIN_MENU_Display+0x74>
		LCD_Write(MENU_Data.hlcd, "WLS1:NoEr  ", CONTROL_Data.drum_control_state);
 80008c0:	4b3e      	ldr	r3, [pc, #248]	; (80009bc <MAIN_MENU_Display+0x15c>)
 80008c2:	6858      	ldr	r0, [r3, #4]
 80008c4:	4b40      	ldr	r3, [pc, #256]	; (80009c8 <MAIN_MENU_Display+0x168>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	001a      	movs	r2, r3
 80008ca:	4b40      	ldr	r3, [pc, #256]	; (80009cc <MAIN_MENU_Display+0x16c>)
 80008cc:	0019      	movs	r1, r3
 80008ce:	f003 f9b8 	bl	8003c42 <LCD_Write>
 80008d2:	e008      	b.n	80008e6 <MAIN_MENU_Display+0x86>
	} else{
		LCD_Write(MENU_Data.hlcd, "WLS1:Er%1d   ", CONTROL_Data.drum_control_state);
 80008d4:	4b39      	ldr	r3, [pc, #228]	; (80009bc <MAIN_MENU_Display+0x15c>)
 80008d6:	6858      	ldr	r0, [r3, #4]
 80008d8:	4b3b      	ldr	r3, [pc, #236]	; (80009c8 <MAIN_MENU_Display+0x168>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	001a      	movs	r2, r3
 80008de:	4b3c      	ldr	r3, [pc, #240]	; (80009d0 <MAIN_MENU_Display+0x170>)
 80008e0:	0019      	movs	r1, r3
 80008e2:	f003 f9ae 	bl	8003c42 <LCD_Write>
	}

	if(CONTROL_Data.pool_control_state == POOL_NORMAL_STATE){
 80008e6:	4b38      	ldr	r3, [pc, #224]	; (80009c8 <MAIN_MENU_Display+0x168>)
 80008e8:	785b      	ldrb	r3, [r3, #1]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d109      	bne.n	8000902 <MAIN_MENU_Display+0xa2>
		LCD_Write(MENU_Data.hlcd, "WLS2:NoEr", CONTROL_Data.pool_control_state);
 80008ee:	4b33      	ldr	r3, [pc, #204]	; (80009bc <MAIN_MENU_Display+0x15c>)
 80008f0:	6858      	ldr	r0, [r3, #4]
 80008f2:	4b35      	ldr	r3, [pc, #212]	; (80009c8 <MAIN_MENU_Display+0x168>)
 80008f4:	785b      	ldrb	r3, [r3, #1]
 80008f6:	001a      	movs	r2, r3
 80008f8:	4b36      	ldr	r3, [pc, #216]	; (80009d4 <MAIN_MENU_Display+0x174>)
 80008fa:	0019      	movs	r1, r3
 80008fc:	f003 f9a1 	bl	8003c42 <LCD_Write>
 8000900:	e008      	b.n	8000914 <MAIN_MENU_Display+0xb4>
	} else{
		LCD_Write(MENU_Data.hlcd, "WLS2:Er%1d ", CONTROL_Data.pool_control_state);
 8000902:	4b2e      	ldr	r3, [pc, #184]	; (80009bc <MAIN_MENU_Display+0x15c>)
 8000904:	6858      	ldr	r0, [r3, #4]
 8000906:	4b30      	ldr	r3, [pc, #192]	; (80009c8 <MAIN_MENU_Display+0x168>)
 8000908:	785b      	ldrb	r3, [r3, #1]
 800090a:	001a      	movs	r2, r3
 800090c:	4b32      	ldr	r3, [pc, #200]	; (80009d8 <MAIN_MENU_Display+0x178>)
 800090e:	0019      	movs	r1, r3
 8000910:	f003 f997 	bl	8003c42 <LCD_Write>
	}

	LCD_Set_Cursor(MENU_Data.hlcd, 0, 2);
 8000914:	4b29      	ldr	r3, [pc, #164]	; (80009bc <MAIN_MENU_Display+0x15c>)
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	2202      	movs	r2, #2
 800091a:	2100      	movs	r1, #0
 800091c:	0018      	movs	r0, r3
 800091e:	f003 f9e5 	bl	8003cec <LCD_Set_Cursor>
	LCD_Write(MENU_Data.hlcd, "Motor: ");
 8000922:	4b26      	ldr	r3, [pc, #152]	; (80009bc <MAIN_MENU_Display+0x15c>)
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	4a2d      	ldr	r2, [pc, #180]	; (80009dc <MAIN_MENU_Display+0x17c>)
 8000928:	0011      	movs	r1, r2
 800092a:	0018      	movs	r0, r3
 800092c:	f003 f989 	bl	8003c42 <LCD_Write>
	for(int i = 0; i < 5; i++){
 8000930:	2300      	movs	r3, #0
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	e01b      	b.n	800096e <MAIN_MENU_Display+0x10e>
		if((RELAY_Current_Relay_Mask() & (1 << i))){
 8000936:	f7ff fe83 	bl	8000640 <RELAY_Current_Relay_Mask>
 800093a:	0003      	movs	r3, r0
 800093c:	001a      	movs	r2, r3
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	411a      	asrs	r2, r3
 8000942:	0013      	movs	r3, r2
 8000944:	2201      	movs	r2, #1
 8000946:	4013      	ands	r3, r2
 8000948:	d008      	beq.n	800095c <MAIN_MENU_Display+0xfc>
			LCD_Write(MENU_Data.hlcd, "%1d", i + 1);
 800094a:	4b1c      	ldr	r3, [pc, #112]	; (80009bc <MAIN_MENU_Display+0x15c>)
 800094c:	6858      	ldr	r0, [r3, #4]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	1c5a      	adds	r2, r3, #1
 8000952:	4b23      	ldr	r3, [pc, #140]	; (80009e0 <MAIN_MENU_Display+0x180>)
 8000954:	0019      	movs	r1, r3
 8000956:	f003 f974 	bl	8003c42 <LCD_Write>
 800095a:	e005      	b.n	8000968 <MAIN_MENU_Display+0x108>
		} else{
			LCD_Send_Data(MENU_Data.hlcd, 0xFF);
 800095c:	4b17      	ldr	r3, [pc, #92]	; (80009bc <MAIN_MENU_Display+0x15c>)
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	21ff      	movs	r1, #255	; 0xff
 8000962:	0018      	movs	r0, r3
 8000964:	f003 fa75 	bl	8003e52 <LCD_Send_Data>
	for(int i = 0; i < 5; i++){
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	3301      	adds	r3, #1
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2b04      	cmp	r3, #4
 8000972:	dde0      	ble.n	8000936 <MAIN_MENU_Display+0xd6>
		}
	}

	if(MOTOR_Data.state == MOTOR_ON){
 8000974:	4b1b      	ldr	r3, [pc, #108]	; (80009e4 <MAIN_MENU_Display+0x184>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	2b01      	cmp	r3, #1
 800097a:	d107      	bne.n	800098c <MAIN_MENU_Display+0x12c>
		LCD_Write(MENU_Data.hlcd, "%1d", 6);
 800097c:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <MAIN_MENU_Display+0x15c>)
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	4917      	ldr	r1, [pc, #92]	; (80009e0 <MAIN_MENU_Display+0x180>)
 8000982:	2206      	movs	r2, #6
 8000984:	0018      	movs	r0, r3
 8000986:	f003 f95c 	bl	8003c42 <LCD_Write>
 800098a:	e005      	b.n	8000998 <MAIN_MENU_Display+0x138>
	} else{
		LCD_Send_Data(MENU_Data.hlcd, 0xFF);
 800098c:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <MAIN_MENU_Display+0x15c>)
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	21ff      	movs	r1, #255	; 0xff
 8000992:	0018      	movs	r0, r3
 8000994:	f003 fa5d 	bl	8003e52 <LCD_Send_Data>
	}

	LCD_Set_Cursor(MENU_Data.hlcd, 0, 3);
 8000998:	4b08      	ldr	r3, [pc, #32]	; (80009bc <MAIN_MENU_Display+0x15c>)
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	2203      	movs	r2, #3
 800099e:	2100      	movs	r1, #0
 80009a0:	0018      	movs	r0, r3
 80009a2:	f003 f9a3 	bl	8003cec <LCD_Set_Cursor>
	LCD_Write(MENU_Data.hlcd, " [Press # to set up]");
 80009a6:	4b05      	ldr	r3, [pc, #20]	; (80009bc <MAIN_MENU_Display+0x15c>)
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	4a0f      	ldr	r2, [pc, #60]	; (80009e8 <MAIN_MENU_Display+0x188>)
 80009ac:	0011      	movs	r1, r2
 80009ae:	0018      	movs	r0, r3
 80009b0:	f003 f947 	bl	8003c42 <LCD_Write>

}
 80009b4:	46c0      	nop			; (mov r8, r8)
 80009b6:	46bd      	mov	sp, r7
 80009b8:	b002      	add	sp, #8
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000168 	.word	0x20000168
 80009c0:	2000019c 	.word	0x2000019c
 80009c4:	08004b84 	.word	0x08004b84
 80009c8:	2000013c 	.word	0x2000013c
 80009cc:	08004b94 	.word	0x08004b94
 80009d0:	08004ba0 	.word	0x08004ba0
 80009d4:	08004bb0 	.word	0x08004bb0
 80009d8:	08004bbc 	.word	0x08004bbc
 80009dc:	08004bc8 	.word	0x08004bc8
 80009e0:	08004bd0 	.word	0x08004bd0
 80009e4:	20000154 	.word	0x20000154
 80009e8:	08004bd4 	.word	0x08004bd4

080009ec <MENU_Init>:
extern I2C_HandleTypeDef hi2c2;

MENU_DATA_t MENU_Data;
static LCD_I2C_HandleTypeDef hlcd;

void MENU_Init(){
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af02      	add	r7, sp, #8
	MENU_Data.state = MAIN_MENU;
 80009f2:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <MENU_Init+0x38>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 80009f8:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <MENU_Init+0x38>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	705a      	strb	r2, [r3, #1]
	MENU_Data.is_changing_menu = 1;
 80009fe:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <MENU_Init+0x38>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	709a      	strb	r2, [r3, #2]
	MENU_Data.hlcd = &hlcd;
 8000a04:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <MENU_Init+0x38>)
 8000a06:	4a08      	ldr	r2, [pc, #32]	; (8000a28 <MENU_Init+0x3c>)
 8000a08:	605a      	str	r2, [r3, #4]
	LCD_Init(&hlcd, &hi2c2, 20, 4, 0x4E);
 8000a0a:	4908      	ldr	r1, [pc, #32]	; (8000a2c <MENU_Init+0x40>)
 8000a0c:	4806      	ldr	r0, [pc, #24]	; (8000a28 <MENU_Init+0x3c>)
 8000a0e:	234e      	movs	r3, #78	; 0x4e
 8000a10:	9300      	str	r3, [sp, #0]
 8000a12:	2304      	movs	r3, #4
 8000a14:	2214      	movs	r2, #20
 8000a16:	f003 f89f 	bl	8003b58 <LCD_Init>

	MAIN_MENU_Init();
 8000a1a:	f7ff ff0b 	bl	8000834 <MAIN_MENU_Init>
}
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20000168 	.word	0x20000168
 8000a28:	20000170 	.word	0x20000170
 8000a2c:	200001ac 	.word	0x200001ac

08000a30 <MENU_Handle>:

void MENU_Handle(){
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
	if(!MENU_Data.changed){
 8000a34:	4b0d      	ldr	r3, [pc, #52]	; (8000a6c <MENU_Handle+0x3c>)
 8000a36:	785b      	ldrb	r3, [r3, #1]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d112      	bne.n	8000a62 <MENU_Handle+0x32>
		switch(MENU_Data.state){
 8000a3c:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <MENU_Handle+0x3c>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d002      	beq.n	8000a4a <MENU_Handle+0x1a>
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d006      	beq.n	8000a56 <MENU_Handle+0x26>
			case SETTING_MENU:
				SETTING_MENU_Display();
				MENU_Data.changed = 1;
				break;
			default:
				break;
 8000a48:	e00c      	b.n	8000a64 <MENU_Handle+0x34>
				MAIN_MENU_Display();
 8000a4a:	f7ff ff09 	bl	8000860 <MAIN_MENU_Display>
				MENU_Data.changed = 1;
 8000a4e:	4b07      	ldr	r3, [pc, #28]	; (8000a6c <MENU_Handle+0x3c>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	705a      	strb	r2, [r3, #1]
				break;
 8000a54:	e006      	b.n	8000a64 <MENU_Handle+0x34>
				SETTING_MENU_Display();
 8000a56:	f000 f9c5 	bl	8000de4 <SETTING_MENU_Display>
				MENU_Data.changed = 1;
 8000a5a:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <MENU_Handle+0x3c>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	705a      	strb	r2, [r3, #1]
				break;
 8000a60:	e000      	b.n	8000a64 <MENU_Handle+0x34>
		}
	}
 8000a62:	46c0      	nop			; (mov r8, r8)
}
 8000a64:	46c0      	nop			; (mov r8, r8)
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	20000168 	.word	0x20000168

08000a70 <SETTING_MENU_Set_State>:

void SETTING_MENU_Init(){

}

void SETTING_MENU_Set_State(){
 8000a70:	b590      	push	{r4, r7, lr}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
	MENU_Data.state = SETTING_MENU;
 8000a76:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <SETTING_MENU_Set_State+0x54>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	701a      	strb	r2, [r3, #0]
	MENU_Data.changed = 0;
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <SETTING_MENU_Set_State+0x54>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	705a      	strb	r2, [r3, #1]
	MENU_Data.is_changing_menu = 1;
 8000a82:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <SETTING_MENU_Set_State+0x54>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	709a      	strb	r2, [r3, #2]
	SETTING_MENU_Data.setting_state = NON_SETTING;
 8000a88:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <SETTING_MENU_Set_State+0x58>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	741a      	strb	r2, [r3, #16]
	SETTING_MENU_Data.new_flash_data = FLASH_DATA_Get_Current_Data();
 8000a8e:	4c0e      	ldr	r4, [pc, #56]	; (8000ac8 <SETTING_MENU_Set_State+0x58>)
 8000a90:	003b      	movs	r3, r7
 8000a92:	0018      	movs	r0, r3
 8000a94:	f7ff febc 	bl	8000810 <FLASH_DATA_Get_Current_Data>
 8000a98:	003b      	movs	r3, r7
 8000a9a:	0020      	movs	r0, r4
 8000a9c:	0019      	movs	r1, r3
 8000a9e:	2309      	movs	r3, #9
 8000aa0:	001a      	movs	r2, r3
 8000aa2:	f003 fbef 	bl	8004284 <memcpy>
	SETTING_MENU_Data.new_realtime = REALTIME_Data;
 8000aa6:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <SETTING_MENU_Set_State+0x58>)
 8000aa8:	2209      	movs	r2, #9
 8000aaa:	4908      	ldr	r1, [pc, #32]	; (8000acc <SETTING_MENU_Set_State+0x5c>)
 8000aac:	189b      	adds	r3, r3, r2
 8000aae:	2206      	movs	r2, #6
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f003 fbe7 	bl	8004284 <memcpy>
	SETTING_MENU_Data.pointer_position = 0;
 8000ab6:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <SETTING_MENU_Set_State+0x58>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	73da      	strb	r2, [r3, #15]
}
 8000abc:	46c0      	nop			; (mov r8, r8)
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	b005      	add	sp, #20
 8000ac2:	bd90      	pop	{r4, r7, pc}
 8000ac4:	20000168 	.word	0x20000168
 8000ac8:	2000017c 	.word	0x2000017c
 8000acc:	2000019c 	.word	0x2000019c

08000ad0 <SETTING_MENU_Keypad_Input>:
	SETTING_MENU_Data.setting_state = p_new_setting_state;
	SETTING_MENU_Data.pointer_position = 0;
	MENU_Data.changed = 0;
}

void SETTING_MENU_Keypad_Input(uint8_t p_key){
 8000ad0:	b590      	push	{r4, r7, lr}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	0002      	movs	r2, r0
 8000ad8:	1dfb      	adds	r3, r7, #7
 8000ada:	701a      	strb	r2, [r3, #0]
	if(p_key == '#'){
 8000adc:	1dfb      	adds	r3, r7, #7
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b23      	cmp	r3, #35	; 0x23
 8000ae2:	d13d      	bne.n	8000b60 <SETTING_MENU_Keypad_Input+0x90>
		if(SETTING_MENU_Data.setting_state == NON_SETTING){
 8000ae4:	4bbb      	ldr	r3, [pc, #748]	; (8000dd4 <SETTING_MENU_Keypad_Input+0x304>)
 8000ae6:	7c1b      	ldrb	r3, [r3, #16]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d100      	bne.n	8000aee <SETTING_MENU_Keypad_Input+0x1e>
 8000aec:	e16d      	b.n	8000dca <SETTING_MENU_Keypad_Input+0x2fa>
			return;
		}
		if(SETTING_MENU_Data.setting_state == SETTING_HOUR){
 8000aee:	4bb9      	ldr	r3, [pc, #740]	; (8000dd4 <SETTING_MENU_Keypad_Input+0x304>)
 8000af0:	7c1b      	ldrb	r3, [r3, #16]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d106      	bne.n	8000b04 <SETTING_MENU_Keypad_Input+0x34>
			SETTING_MENU_Data.setting_state = SETTING_MINUTE;
 8000af6:	4bb7      	ldr	r3, [pc, #732]	; (8000dd4 <SETTING_MENU_Keypad_Input+0x304>)
 8000af8:	2202      	movs	r2, #2
 8000afa:	741a      	strb	r2, [r3, #16]
			SETTING_MENU_Data.pointer_position = 0;
 8000afc:	4bb5      	ldr	r3, [pc, #724]	; (8000dd4 <SETTING_MENU_Keypad_Input+0x304>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	73da      	strb	r2, [r3, #15]
 8000b02:	e15e      	b.n	8000dc2 <SETTING_MENU_Keypad_Input+0x2f2>
		} else if(SETTING_MENU_Data.setting_state == SETTING_WASHING_TIME){
 8000b04:	4bb3      	ldr	r3, [pc, #716]	; (8000dd4 <SETTING_MENU_Keypad_Input+0x304>)
 8000b06:	7c1b      	ldrb	r3, [r3, #16]
 8000b08:	2b03      	cmp	r3, #3
 8000b0a:	d10e      	bne.n	8000b2a <SETTING_MENU_Keypad_Input+0x5a>
			if(SETTING_MENU_Data.new_flash_data.washing_time < MIN_WASHING_TIME){
 8000b0c:	4bb1      	ldr	r3, [pc, #708]	; (8000dd4 <SETTING_MENU_Keypad_Input+0x304>)
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	2b09      	cmp	r3, #9
 8000b12:	d803      	bhi.n	8000b1c <SETTING_MENU_Keypad_Input+0x4c>
				SETTING_MENU_Data.new_flash_data.washing_time = MIN_WASHING_TIME;
 8000b14:	4baf      	ldr	r3, [pc, #700]	; (8000dd4 <SETTING_MENU_Keypad_Input+0x304>)
 8000b16:	220a      	movs	r2, #10
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	e152      	b.n	8000dc2 <SETTING_MENU_Keypad_Input+0x2f2>
			} else{
				FLASH_DATA_Update(&SETTING_MENU_Data.new_flash_data);
 8000b1c:	4bad      	ldr	r3, [pc, #692]	; (8000dd4 <SETTING_MENU_Keypad_Input+0x304>)
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f7ff fe1c 	bl	800075c <FLASH_DATA_Update>
				SETTING_MENU_Set_State();
 8000b24:	f7ff ffa4 	bl	8000a70 <SETTING_MENU_Set_State>
				return;
 8000b28:	e150      	b.n	8000dcc <SETTING_MENU_Keypad_Input+0x2fc>
			}
		} else{
			if(SETTING_MENU_Data.setting_state == NON_SETTING){
 8000b2a:	4baa      	ldr	r3, [pc, #680]	; (8000dd4 <SETTING_MENU_Keypad_Input+0x304>)
 8000b2c:	7c1b      	ldrb	r3, [r3, #16]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d102      	bne.n	8000b38 <SETTING_MENU_Keypad_Input+0x68>
				MAIN_MENU_Set_State();
 8000b32:	f7ff fe85 	bl	8000840 <MAIN_MENU_Set_State>
 8000b36:	e010      	b.n	8000b5a <SETTING_MENU_Keypad_Input+0x8a>
			} else if(SETTING_MENU_Data.setting_state == SETTING_MINUTE){
 8000b38:	4ba6      	ldr	r3, [pc, #664]	; (8000dd4 <SETTING_MENU_Keypad_Input+0x304>)
 8000b3a:	7c1b      	ldrb	r3, [r3, #16]
 8000b3c:	2b02      	cmp	r3, #2
 8000b3e:	d104      	bne.n	8000b4a <SETTING_MENU_Keypad_Input+0x7a>
				REALTIME_Set_New_Realtime(&SETTING_MENU_Data.new_realtime);
 8000b40:	4ba5      	ldr	r3, [pc, #660]	; (8000dd8 <SETTING_MENU_Keypad_Input+0x308>)
 8000b42:	0018      	movs	r0, r3
 8000b44:	f000 fad6 	bl	80010f4 <REALTIME_Set_New_Realtime>
 8000b48:	e007      	b.n	8000b5a <SETTING_MENU_Keypad_Input+0x8a>
			} else if(SETTING_MENU_Data.setting_state == SETTING_SENSOR_NORMAL_STATE){
 8000b4a:	4ba2      	ldr	r3, [pc, #648]	; (8000dd4 <SETTING_MENU_Keypad_Input+0x304>)
 8000b4c:	7c1b      	ldrb	r3, [r3, #16]
 8000b4e:	2b04      	cmp	r3, #4
 8000b50:	d103      	bne.n	8000b5a <SETTING_MENU_Keypad_Input+0x8a>
				FLASH_DATA_Update(&SETTING_MENU_Data.new_flash_data);
 8000b52:	4ba0      	ldr	r3, [pc, #640]	; (8000dd4 <SETTING_MENU_Keypad_Input+0x304>)
 8000b54:	0018      	movs	r0, r3
 8000b56:	f7ff fe01 	bl	800075c <FLASH_DATA_Update>
			}
			SETTING_MENU_Set_State();
 8000b5a:	f7ff ff89 	bl	8000a70 <SETTING_MENU_Set_State>
			return;
 8000b5e:	e135      	b.n	8000dcc <SETTING_MENU_Keypad_Input+0x2fc>
		}
	} else if(p_key == '*'){
 8000b60:	1dfb      	adds	r3, r7, #7
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b2a      	cmp	r3, #42	; 0x2a
 8000b66:	d114      	bne.n	8000b92 <SETTING_MENU_Keypad_Input+0xc2>
		if(SETTING_MENU_Data.setting_state == NON_SETTING){
 8000b68:	4b9a      	ldr	r3, [pc, #616]	; (8000dd4 <SETTING_MENU_Keypad_Input+0x304>)
 8000b6a:	7c1b      	ldrb	r3, [r3, #16]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d102      	bne.n	8000b76 <SETTING_MENU_Keypad_Input+0xa6>
			MAIN_MENU_Set_State();
 8000b70:	f7ff fe66 	bl	8000840 <MAIN_MENU_Set_State>
			return;
 8000b74:	e12a      	b.n	8000dcc <SETTING_MENU_Keypad_Input+0x2fc>
		}
		if(SETTING_MENU_Data.setting_state == SETTING_MINUTE){
 8000b76:	4b97      	ldr	r3, [pc, #604]	; (8000dd4 <SETTING_MENU_Keypad_Input+0x304>)
 8000b78:	7c1b      	ldrb	r3, [r3, #16]
 8000b7a:	2b02      	cmp	r3, #2
 8000b7c:	d106      	bne.n	8000b8c <SETTING_MENU_Keypad_Input+0xbc>
			SETTING_MENU_Data.setting_state = SETTING_HOUR;
 8000b7e:	4b95      	ldr	r3, [pc, #596]	; (8000dd4 <SETTING_MENU_Keypad_Input+0x304>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	741a      	strb	r2, [r3, #16]
			SETTING_MENU_Data.pointer_position = 0;
 8000b84:	4b93      	ldr	r3, [pc, #588]	; (8000dd4 <SETTING_MENU_Keypad_Input+0x304>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	73da      	strb	r2, [r3, #15]
 8000b8a:	e11a      	b.n	8000dc2 <SETTING_MENU_Keypad_Input+0x2f2>
		} else{
			SETTING_MENU_Set_State();
 8000b8c:	f7ff ff70 	bl	8000a70 <SETTING_MENU_Set_State>
			return;
 8000b90:	e11c      	b.n	8000dcc <SETTING_MENU_Keypad_Input+0x2fc>
		}
	} else if(p_key >= '0' && p_key <= '9'){
 8000b92:	1dfb      	adds	r3, r7, #7
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b2f      	cmp	r3, #47	; 0x2f
 8000b98:	d800      	bhi.n	8000b9c <SETTING_MENU_Keypad_Input+0xcc>
 8000b9a:	e112      	b.n	8000dc2 <SETTING_MENU_Keypad_Input+0x2f2>
 8000b9c:	1dfb      	adds	r3, r7, #7
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b39      	cmp	r3, #57	; 0x39
 8000ba2:	d900      	bls.n	8000ba6 <SETTING_MENU_Keypad_Input+0xd6>
 8000ba4:	e10d      	b.n	8000dc2 <SETTING_MENU_Keypad_Input+0x2f2>
		if(SETTING_MENU_Data.setting_state == NON_SETTING){
 8000ba6:	4b8b      	ldr	r3, [pc, #556]	; (8000dd4 <SETTING_MENU_Keypad_Input+0x304>)
 8000ba8:	7c1b      	ldrb	r3, [r3, #16]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d118      	bne.n	8000be0 <SETTING_MENU_Keypad_Input+0x110>
			if(p_key == '1'){
 8000bae:	1dfb      	adds	r3, r7, #7
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	2b31      	cmp	r3, #49	; 0x31
 8000bb4:	d103      	bne.n	8000bbe <SETTING_MENU_Keypad_Input+0xee>
				SETTING_MENU_Data.setting_state = SETTING_HOUR;
 8000bb6:	4b87      	ldr	r3, [pc, #540]	; (8000dd4 <SETTING_MENU_Keypad_Input+0x304>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	741a      	strb	r2, [r3, #16]
 8000bbc:	e101      	b.n	8000dc2 <SETTING_MENU_Keypad_Input+0x2f2>
			} else if(p_key == '2'){
 8000bbe:	1dfb      	adds	r3, r7, #7
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	2b32      	cmp	r3, #50	; 0x32
 8000bc4:	d103      	bne.n	8000bce <SETTING_MENU_Keypad_Input+0xfe>
				SETTING_MENU_Data.setting_state = SETTING_WASHING_TIME;
 8000bc6:	4b83      	ldr	r3, [pc, #524]	; (8000dd4 <SETTING_MENU_Keypad_Input+0x304>)
 8000bc8:	2203      	movs	r2, #3
 8000bca:	741a      	strb	r2, [r3, #16]
 8000bcc:	e0f9      	b.n	8000dc2 <SETTING_MENU_Keypad_Input+0x2f2>
			} else if(p_key == '3'){
 8000bce:	1dfb      	adds	r3, r7, #7
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b33      	cmp	r3, #51	; 0x33
 8000bd4:	d000      	beq.n	8000bd8 <SETTING_MENU_Keypad_Input+0x108>
 8000bd6:	e0f4      	b.n	8000dc2 <SETTING_MENU_Keypad_Input+0x2f2>
				SETTING_MENU_Data.setting_state = SETTING_SENSOR_NORMAL_STATE;
 8000bd8:	4b7e      	ldr	r3, [pc, #504]	; (8000dd4 <SETTING_MENU_Keypad_Input+0x304>)
 8000bda:	2204      	movs	r2, #4
 8000bdc:	741a      	strb	r2, [r3, #16]
 8000bde:	e0f0      	b.n	8000dc2 <SETTING_MENU_Keypad_Input+0x2f2>
			}
		} else if(SETTING_MENU_Data.setting_state == SETTING_HOUR ||
 8000be0:	4b7c      	ldr	r3, [pc, #496]	; (8000dd4 <SETTING_MENU_Keypad_Input+0x304>)
 8000be2:	7c1b      	ldrb	r3, [r3, #16]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d003      	beq.n	8000bf0 <SETTING_MENU_Keypad_Input+0x120>
		SETTING_MENU_Data.setting_state == SETTING_MINUTE){
 8000be8:	4b7a      	ldr	r3, [pc, #488]	; (8000dd4 <SETTING_MENU_Keypad_Input+0x304>)
 8000bea:	7c1b      	ldrb	r3, [r3, #16]
		} else if(SETTING_MENU_Data.setting_state == SETTING_HOUR ||
 8000bec:	2b02      	cmp	r3, #2
 8000bee:	d154      	bne.n	8000c9a <SETTING_MENU_Keypad_Input+0x1ca>
			uint8_t *t_data = (uint8_t *)(&SETTING_MENU_Data.new_realtime) + (SETTING_MENU_Data.setting_state - 1);
 8000bf0:	4b78      	ldr	r3, [pc, #480]	; (8000dd4 <SETTING_MENU_Keypad_Input+0x304>)
 8000bf2:	7c1b      	ldrb	r3, [r3, #16]
 8000bf4:	1e5a      	subs	r2, r3, #1
 8000bf6:	4b78      	ldr	r3, [pc, #480]	; (8000dd8 <SETTING_MENU_Keypad_Input+0x308>)
 8000bf8:	18d3      	adds	r3, r2, r3
 8000bfa:	60fb      	str	r3, [r7, #12]
			if(SETTING_MENU_Data.pointer_position == 0){
 8000bfc:	4b75      	ldr	r3, [pc, #468]	; (8000dd4 <SETTING_MENU_Keypad_Input+0x304>)
 8000bfe:	7bdb      	ldrb	r3, [r3, #15]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d118      	bne.n	8000c36 <SETTING_MENU_Keypad_Input+0x166>
				*t_data = ((*t_data) % 10) + (p_key - '0') * 10;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	210a      	movs	r1, #10
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	f7ff fb14 	bl	8000238 <__aeabi_uidivmod>
 8000c10:	000b      	movs	r3, r1
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	1dfb      	adds	r3, r7, #7
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	1c19      	adds	r1, r3, #0
 8000c1a:	0089      	lsls	r1, r1, #2
 8000c1c:	18cb      	adds	r3, r1, r3
 8000c1e:	18db      	adds	r3, r3, r3
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	18d3      	adds	r3, r2, r3
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	3320      	adds	r3, #32
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	701a      	strb	r2, [r3, #0]
				SETTING_MENU_Data.pointer_position = 1;
 8000c2e:	4b69      	ldr	r3, [pc, #420]	; (8000dd4 <SETTING_MENU_Keypad_Input+0x304>)
 8000c30:	2201      	movs	r2, #1
 8000c32:	73da      	strb	r2, [r3, #15]
 8000c34:	e017      	b.n	8000c66 <SETTING_MENU_Keypad_Input+0x196>
			} else{
				*t_data = ((*t_data) / 10 * 10) + (p_key - '0');
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	210a      	movs	r1, #10
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f7ff fa75 	bl	800012c <__udivsi3>
 8000c42:	0003      	movs	r3, r0
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	1c1a      	adds	r2, r3, #0
 8000c48:	0092      	lsls	r2, r2, #2
 8000c4a:	18d3      	adds	r3, r2, r3
 8000c4c:	18db      	adds	r3, r3, r3
 8000c4e:	b2da      	uxtb	r2, r3
 8000c50:	1dfb      	adds	r3, r7, #7
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	18d3      	adds	r3, r2, r3
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	3b30      	subs	r3, #48	; 0x30
 8000c5a:	b2da      	uxtb	r2, r3
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	701a      	strb	r2, [r3, #0]
				SETTING_MENU_Data.pointer_position = 0;
 8000c60:	4b5c      	ldr	r3, [pc, #368]	; (8000dd4 <SETTING_MENU_Keypad_Input+0x304>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	73da      	strb	r2, [r3, #15]
			}
			if(SETTING_MENU_Data.setting_state == SETTING_HOUR && *t_data > 23){
 8000c66:	4b5b      	ldr	r3, [pc, #364]	; (8000dd4 <SETTING_MENU_Keypad_Input+0x304>)
 8000c68:	7c1b      	ldrb	r3, [r3, #16]
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d107      	bne.n	8000c7e <SETTING_MENU_Keypad_Input+0x1ae>
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b17      	cmp	r3, #23
 8000c74:	d903      	bls.n	8000c7e <SETTING_MENU_Keypad_Input+0x1ae>
				*t_data = 23;
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	2217      	movs	r2, #23
 8000c7a:	701a      	strb	r2, [r3, #0]
		SETTING_MENU_Data.setting_state == SETTING_MINUTE){
 8000c7c:	e0a0      	b.n	8000dc0 <SETTING_MENU_Keypad_Input+0x2f0>
			} else if(SETTING_MENU_Data.setting_state == SETTING_MINUTE && *t_data > 59){
 8000c7e:	4b55      	ldr	r3, [pc, #340]	; (8000dd4 <SETTING_MENU_Keypad_Input+0x304>)
 8000c80:	7c1b      	ldrb	r3, [r3, #16]
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	d000      	beq.n	8000c88 <SETTING_MENU_Keypad_Input+0x1b8>
 8000c86:	e09b      	b.n	8000dc0 <SETTING_MENU_Keypad_Input+0x2f0>
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2b3b      	cmp	r3, #59	; 0x3b
 8000c8e:	d800      	bhi.n	8000c92 <SETTING_MENU_Keypad_Input+0x1c2>
 8000c90:	e096      	b.n	8000dc0 <SETTING_MENU_Keypad_Input+0x2f0>
				*t_data = 59;
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	223b      	movs	r2, #59	; 0x3b
 8000c96:	701a      	strb	r2, [r3, #0]
		SETTING_MENU_Data.setting_state == SETTING_MINUTE){
 8000c98:	e092      	b.n	8000dc0 <SETTING_MENU_Keypad_Input+0x2f0>
			}
		} else if(SETTING_MENU_Data.setting_state == SETTING_WASHING_TIME){
 8000c9a:	4b4e      	ldr	r3, [pc, #312]	; (8000dd4 <SETTING_MENU_Keypad_Input+0x304>)
 8000c9c:	7c1b      	ldrb	r3, [r3, #16]
 8000c9e:	2b03      	cmp	r3, #3
 8000ca0:	d000      	beq.n	8000ca4 <SETTING_MENU_Keypad_Input+0x1d4>
 8000ca2:	e07a      	b.n	8000d9a <SETTING_MENU_Keypad_Input+0x2ca>
			uint8_t t_digit[4];
			t_digit[0] = SETTING_MENU_Data.new_flash_data.washing_time / 1000;
 8000ca4:	4b4b      	ldr	r3, [pc, #300]	; (8000dd4 <SETTING_MENU_Keypad_Input+0x304>)
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	22fa      	movs	r2, #250	; 0xfa
 8000caa:	0091      	lsls	r1, r2, #2
 8000cac:	0018      	movs	r0, r3
 8000cae:	f7ff fa3d 	bl	800012c <__udivsi3>
 8000cb2:	0003      	movs	r3, r0
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	2408      	movs	r4, #8
 8000cb8:	193b      	adds	r3, r7, r4
 8000cba:	701a      	strb	r2, [r3, #0]
			t_digit[1] = (SETTING_MENU_Data.new_flash_data.washing_time % 1000) / 100;
 8000cbc:	4b45      	ldr	r3, [pc, #276]	; (8000dd4 <SETTING_MENU_Keypad_Input+0x304>)
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	22fa      	movs	r2, #250	; 0xfa
 8000cc2:	0091      	lsls	r1, r2, #2
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f7ff fab7 	bl	8000238 <__aeabi_uidivmod>
 8000cca:	000b      	movs	r3, r1
 8000ccc:	2164      	movs	r1, #100	; 0x64
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f7ff fa2c 	bl	800012c <__udivsi3>
 8000cd4:	0003      	movs	r3, r0
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	193b      	adds	r3, r7, r4
 8000cda:	705a      	strb	r2, [r3, #1]
			t_digit[2] = (SETTING_MENU_Data.new_flash_data.washing_time % 100) / 10;
 8000cdc:	4b3d      	ldr	r3, [pc, #244]	; (8000dd4 <SETTING_MENU_Keypad_Input+0x304>)
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	2164      	movs	r1, #100	; 0x64
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f7ff faa8 	bl	8000238 <__aeabi_uidivmod>
 8000ce8:	000b      	movs	r3, r1
 8000cea:	210a      	movs	r1, #10
 8000cec:	0018      	movs	r0, r3
 8000cee:	f7ff fa1d 	bl	800012c <__udivsi3>
 8000cf2:	0003      	movs	r3, r0
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	193b      	adds	r3, r7, r4
 8000cf8:	709a      	strb	r2, [r3, #2]
			t_digit[3] = SETTING_MENU_Data.new_flash_data.washing_time % 10;
 8000cfa:	4b36      	ldr	r3, [pc, #216]	; (8000dd4 <SETTING_MENU_Keypad_Input+0x304>)
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	210a      	movs	r1, #10
 8000d00:	0018      	movs	r0, r3
 8000d02:	f7ff fa99 	bl	8000238 <__aeabi_uidivmod>
 8000d06:	000b      	movs	r3, r1
 8000d08:	b2da      	uxtb	r2, r3
 8000d0a:	193b      	adds	r3, r7, r4
 8000d0c:	70da      	strb	r2, [r3, #3]
			t_digit[SETTING_MENU_Data.pointer_position] = p_key - '0';
 8000d0e:	4b31      	ldr	r3, [pc, #196]	; (8000dd4 <SETTING_MENU_Keypad_Input+0x304>)
 8000d10:	7bdb      	ldrb	r3, [r3, #15]
 8000d12:	001a      	movs	r2, r3
 8000d14:	1dfb      	adds	r3, r7, #7
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	3b30      	subs	r3, #48	; 0x30
 8000d1a:	b2d9      	uxtb	r1, r3
 8000d1c:	0020      	movs	r0, r4
 8000d1e:	183b      	adds	r3, r7, r0
 8000d20:	5499      	strb	r1, [r3, r2]
			SETTING_MENU_Data.new_flash_data.washing_time = t_digit[0] * 1000 + t_digit[1] * 100 + t_digit[2] * 10 + t_digit[3];
 8000d22:	183b      	adds	r3, r7, r0
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	001a      	movs	r2, r3
 8000d28:	0013      	movs	r3, r2
 8000d2a:	015b      	lsls	r3, r3, #5
 8000d2c:	1a9b      	subs	r3, r3, r2
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	189b      	adds	r3, r3, r2
 8000d32:	00db      	lsls	r3, r3, #3
 8000d34:	001a      	movs	r2, r3
 8000d36:	183b      	adds	r3, r7, r0
 8000d38:	785b      	ldrb	r3, [r3, #1]
 8000d3a:	0019      	movs	r1, r3
 8000d3c:	2364      	movs	r3, #100	; 0x64
 8000d3e:	434b      	muls	r3, r1
 8000d40:	18d2      	adds	r2, r2, r3
 8000d42:	183b      	adds	r3, r7, r0
 8000d44:	789b      	ldrb	r3, [r3, #2]
 8000d46:	0019      	movs	r1, r3
 8000d48:	000b      	movs	r3, r1
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	185b      	adds	r3, r3, r1
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	18d3      	adds	r3, r2, r3
 8000d52:	183a      	adds	r2, r7, r0
 8000d54:	78d2      	ldrb	r2, [r2, #3]
 8000d56:	189b      	adds	r3, r3, r2
 8000d58:	001a      	movs	r2, r3
 8000d5a:	4b1e      	ldr	r3, [pc, #120]	; (8000dd4 <SETTING_MENU_Keypad_Input+0x304>)
 8000d5c:	605a      	str	r2, [r3, #4]
			if(SETTING_MENU_Data.new_flash_data.washing_time < MIN_WASHING_TIME)
 8000d5e:	4b1d      	ldr	r3, [pc, #116]	; (8000dd4 <SETTING_MENU_Keypad_Input+0x304>)
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	2b09      	cmp	r3, #9
 8000d64:	d802      	bhi.n	8000d6c <SETTING_MENU_Keypad_Input+0x29c>
				SETTING_MENU_Data.new_flash_data.washing_time = MIN_WASHING_TIME;
 8000d66:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <SETTING_MENU_Keypad_Input+0x304>)
 8000d68:	220a      	movs	r2, #10
 8000d6a:	605a      	str	r2, [r3, #4]
			if(SETTING_MENU_Data.new_flash_data.washing_time > MAX_WASHING_TIME)
 8000d6c:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <SETTING_MENU_Keypad_Input+0x304>)
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	4a1a      	ldr	r2, [pc, #104]	; (8000ddc <SETTING_MENU_Keypad_Input+0x30c>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d902      	bls.n	8000d7c <SETTING_MENU_Keypad_Input+0x2ac>
				SETTING_MENU_Data.new_flash_data.washing_time = MAX_WASHING_TIME;
 8000d76:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <SETTING_MENU_Keypad_Input+0x304>)
 8000d78:	4a18      	ldr	r2, [pc, #96]	; (8000ddc <SETTING_MENU_Keypad_Input+0x30c>)
 8000d7a:	605a      	str	r2, [r3, #4]
			if(SETTING_MENU_Data.pointer_position < 3){
 8000d7c:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <SETTING_MENU_Keypad_Input+0x304>)
 8000d7e:	7bdb      	ldrb	r3, [r3, #15]
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d806      	bhi.n	8000d92 <SETTING_MENU_Keypad_Input+0x2c2>
				SETTING_MENU_Data.pointer_position++;
 8000d84:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <SETTING_MENU_Keypad_Input+0x304>)
 8000d86:	7bdb      	ldrb	r3, [r3, #15]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <SETTING_MENU_Keypad_Input+0x304>)
 8000d8e:	73da      	strb	r2, [r3, #15]
 8000d90:	e017      	b.n	8000dc2 <SETTING_MENU_Keypad_Input+0x2f2>
			} else{
				SETTING_MENU_Data.pointer_position = 0;
 8000d92:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <SETTING_MENU_Keypad_Input+0x304>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	73da      	strb	r2, [r3, #15]
 8000d98:	e013      	b.n	8000dc2 <SETTING_MENU_Keypad_Input+0x2f2>
			}
		} else if(SETTING_MENU_Data.setting_state == SETTING_SENSOR_NORMAL_STATE){
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <SETTING_MENU_Keypad_Input+0x304>)
 8000d9c:	7c1b      	ldrb	r3, [r3, #16]
 8000d9e:	2b04      	cmp	r3, #4
 8000da0:	d10f      	bne.n	8000dc2 <SETTING_MENU_Keypad_Input+0x2f2>
			if(p_key == '0' || p_key == '1'){
 8000da2:	1dfb      	adds	r3, r7, #7
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	2b30      	cmp	r3, #48	; 0x30
 8000da8:	d003      	beq.n	8000db2 <SETTING_MENU_Keypad_Input+0x2e2>
 8000daa:	1dfb      	adds	r3, r7, #7
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2b31      	cmp	r3, #49	; 0x31
 8000db0:	d107      	bne.n	8000dc2 <SETTING_MENU_Keypad_Input+0x2f2>
				SETTING_MENU_Data.new_flash_data.sensor_normal_state = p_key - '0';
 8000db2:	1dfb      	adds	r3, r7, #7
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	3b30      	subs	r3, #48	; 0x30
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <SETTING_MENU_Keypad_Input+0x304>)
 8000dbc:	721a      	strb	r2, [r3, #8]
 8000dbe:	e000      	b.n	8000dc2 <SETTING_MENU_Keypad_Input+0x2f2>
		SETTING_MENU_Data.setting_state == SETTING_MINUTE){
 8000dc0:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	MENU_Data.changed = 0;
 8000dc2:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <SETTING_MENU_Keypad_Input+0x310>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	705a      	strb	r2, [r3, #1]
 8000dc8:	e000      	b.n	8000dcc <SETTING_MENU_Keypad_Input+0x2fc>
			return;
 8000dca:	46c0      	nop			; (mov r8, r8)
}
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	b005      	add	sp, #20
 8000dd0:	bd90      	pop	{r4, r7, pc}
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	2000017c 	.word	0x2000017c
 8000dd8:	20000185 	.word	0x20000185
 8000ddc:	0000270f 	.word	0x0000270f
 8000de0:	20000168 	.word	0x20000168

08000de4 <SETTING_MENU_Display>:

void SETTING_MENU_Display(){
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
	if(MENU_Data.is_changing_menu){
 8000de8:	4b4a      	ldr	r3, [pc, #296]	; (8000f14 <SETTING_MENU_Display+0x130>)
 8000dea:	789b      	ldrb	r3, [r3, #2]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d007      	beq.n	8000e00 <SETTING_MENU_Display+0x1c>
		LCD_Clear(MENU_Data.hlcd);
 8000df0:	4b48      	ldr	r3, [pc, #288]	; (8000f14 <SETTING_MENU_Display+0x130>)
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	0018      	movs	r0, r3
 8000df6:	f002 ff62 	bl	8003cbe <LCD_Clear>
		MENU_Data.is_changing_menu = 0;
 8000dfa:	4b46      	ldr	r3, [pc, #280]	; (8000f14 <SETTING_MENU_Display+0x130>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	709a      	strb	r2, [r3, #2]
	}

	LCD_Set_Cursor(MENU_Data.hlcd, 0, 0);
 8000e00:	4b44      	ldr	r3, [pc, #272]	; (8000f14 <SETTING_MENU_Display+0x130>)
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	2200      	movs	r2, #0
 8000e06:	2100      	movs	r1, #0
 8000e08:	0018      	movs	r0, r3
 8000e0a:	f002 ff6f 	bl	8003cec <LCD_Set_Cursor>
	LCD_Write(MENU_Data.hlcd, "1.Real-time:%02d:%02d", SETTING_MENU_Data.new_realtime.system_hour, SETTING_MENU_Data.new_realtime.system_minute);
 8000e0e:	4b41      	ldr	r3, [pc, #260]	; (8000f14 <SETTING_MENU_Display+0x130>)
 8000e10:	6858      	ldr	r0, [r3, #4]
 8000e12:	4b41      	ldr	r3, [pc, #260]	; (8000f18 <SETTING_MENU_Display+0x134>)
 8000e14:	7a5b      	ldrb	r3, [r3, #9]
 8000e16:	001a      	movs	r2, r3
 8000e18:	4b3f      	ldr	r3, [pc, #252]	; (8000f18 <SETTING_MENU_Display+0x134>)
 8000e1a:	7a9b      	ldrb	r3, [r3, #10]
 8000e1c:	493f      	ldr	r1, [pc, #252]	; (8000f1c <SETTING_MENU_Display+0x138>)
 8000e1e:	f002 ff10 	bl	8003c42 <LCD_Write>

	LCD_Set_Cursor(MENU_Data.hlcd, 0, 1);
 8000e22:	4b3c      	ldr	r3, [pc, #240]	; (8000f14 <SETTING_MENU_Display+0x130>)
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	2201      	movs	r2, #1
 8000e28:	2100      	movs	r1, #0
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	f002 ff5e 	bl	8003cec <LCD_Set_Cursor>
	LCD_Write(MENU_Data.hlcd, "2.Washing time:%04ds", SETTING_MENU_Data.new_flash_data.washing_time);
 8000e30:	4b38      	ldr	r3, [pc, #224]	; (8000f14 <SETTING_MENU_Display+0x130>)
 8000e32:	6858      	ldr	r0, [r3, #4]
 8000e34:	4b38      	ldr	r3, [pc, #224]	; (8000f18 <SETTING_MENU_Display+0x134>)
 8000e36:	685a      	ldr	r2, [r3, #4]
 8000e38:	4b39      	ldr	r3, [pc, #228]	; (8000f20 <SETTING_MENU_Display+0x13c>)
 8000e3a:	0019      	movs	r1, r3
 8000e3c:	f002 ff01 	bl	8003c42 <LCD_Write>

	LCD_Set_Cursor(MENU_Data.hlcd, 0, 2);
 8000e40:	4b34      	ldr	r3, [pc, #208]	; (8000f14 <SETTING_MENU_Display+0x130>)
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	2202      	movs	r2, #2
 8000e46:	2100      	movs	r1, #0
 8000e48:	0018      	movs	r0, r3
 8000e4a:	f002 ff4f 	bl	8003cec <LCD_Set_Cursor>
	LCD_Write(MENU_Data.hlcd, "3.WLS normal state:%d", SETTING_MENU_Data.new_flash_data.sensor_normal_state);
 8000e4e:	4b31      	ldr	r3, [pc, #196]	; (8000f14 <SETTING_MENU_Display+0x130>)
 8000e50:	6858      	ldr	r0, [r3, #4]
 8000e52:	4b31      	ldr	r3, [pc, #196]	; (8000f18 <SETTING_MENU_Display+0x134>)
 8000e54:	7a1b      	ldrb	r3, [r3, #8]
 8000e56:	001a      	movs	r2, r3
 8000e58:	4b32      	ldr	r3, [pc, #200]	; (8000f24 <SETTING_MENU_Display+0x140>)
 8000e5a:	0019      	movs	r1, r3
 8000e5c:	f002 fef1 	bl	8003c42 <LCD_Write>

	LCD_Set_Cursor(MENU_Data.hlcd, 0, 3);
 8000e60:	4b2c      	ldr	r3, [pc, #176]	; (8000f14 <SETTING_MENU_Display+0x130>)
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	2203      	movs	r2, #3
 8000e66:	2100      	movs	r1, #0
 8000e68:	0018      	movs	r0, r3
 8000e6a:	f002 ff3f 	bl	8003cec <LCD_Set_Cursor>
	LCD_Write(MENU_Data.hlcd, "[*]Back     [#]Enter", SETTING_MENU_Data.new_flash_data.sensor_normal_state);
 8000e6e:	4b29      	ldr	r3, [pc, #164]	; (8000f14 <SETTING_MENU_Display+0x130>)
 8000e70:	6858      	ldr	r0, [r3, #4]
 8000e72:	4b29      	ldr	r3, [pc, #164]	; (8000f18 <SETTING_MENU_Display+0x134>)
 8000e74:	7a1b      	ldrb	r3, [r3, #8]
 8000e76:	001a      	movs	r2, r3
 8000e78:	4b2b      	ldr	r3, [pc, #172]	; (8000f28 <SETTING_MENU_Display+0x144>)
 8000e7a:	0019      	movs	r1, r3
 8000e7c:	f002 fee1 	bl	8003c42 <LCD_Write>

	if(SETTING_MENU_Data.setting_state != NON_SETTING){
 8000e80:	4b25      	ldr	r3, [pc, #148]	; (8000f18 <SETTING_MENU_Display+0x134>)
 8000e82:	7c1b      	ldrb	r3, [r3, #16]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d03d      	beq.n	8000f04 <SETTING_MENU_Display+0x120>
		if(SETTING_MENU_Data.setting_state == SETTING_HOUR || SETTING_MENU_Data.setting_state == SETTING_MINUTE){
 8000e88:	4b23      	ldr	r3, [pc, #140]	; (8000f18 <SETTING_MENU_Display+0x134>)
 8000e8a:	7c1b      	ldrb	r3, [r3, #16]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d003      	beq.n	8000e98 <SETTING_MENU_Display+0xb4>
 8000e90:	4b21      	ldr	r3, [pc, #132]	; (8000f18 <SETTING_MENU_Display+0x134>)
 8000e92:	7c1b      	ldrb	r3, [r3, #16]
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d115      	bne.n	8000ec4 <SETTING_MENU_Display+0xe0>
			LCD_Set_Cursor(MENU_Data.hlcd, 12 + SETTING_MENU_Data.pointer_position + (SETTING_MENU_Data.setting_state - 1) * 3, 0);
 8000e98:	4b1e      	ldr	r3, [pc, #120]	; (8000f14 <SETTING_MENU_Display+0x130>)
 8000e9a:	6858      	ldr	r0, [r3, #4]
 8000e9c:	4b1e      	ldr	r3, [pc, #120]	; (8000f18 <SETTING_MENU_Display+0x134>)
 8000e9e:	7bda      	ldrb	r2, [r3, #15]
 8000ea0:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <SETTING_MENU_Display+0x134>)
 8000ea2:	7c1b      	ldrb	r3, [r3, #16]
 8000ea4:	3b01      	subs	r3, #1
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	1c19      	adds	r1, r3, #0
 8000eaa:	1c0b      	adds	r3, r1, #0
 8000eac:	18db      	adds	r3, r3, r3
 8000eae:	185b      	adds	r3, r3, r1
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	18d3      	adds	r3, r2, r3
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	330c      	adds	r3, #12
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2200      	movs	r2, #0
 8000ebc:	0019      	movs	r1, r3
 8000ebe:	f002 ff15 	bl	8003cec <LCD_Set_Cursor>
 8000ec2:	e019      	b.n	8000ef8 <SETTING_MENU_Display+0x114>
		} else if(SETTING_MENU_Data.setting_state == SETTING_WASHING_TIME){
 8000ec4:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <SETTING_MENU_Display+0x134>)
 8000ec6:	7c1b      	ldrb	r3, [r3, #16]
 8000ec8:	2b03      	cmp	r3, #3
 8000eca:	d10a      	bne.n	8000ee2 <SETTING_MENU_Display+0xfe>
			LCD_Set_Cursor(MENU_Data.hlcd, 15 + SETTING_MENU_Data.pointer_position, 1);
 8000ecc:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <SETTING_MENU_Display+0x130>)
 8000ece:	6858      	ldr	r0, [r3, #4]
 8000ed0:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <SETTING_MENU_Display+0x134>)
 8000ed2:	7bdb      	ldrb	r3, [r3, #15]
 8000ed4:	330f      	adds	r3, #15
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	2201      	movs	r2, #1
 8000eda:	0019      	movs	r1, r3
 8000edc:	f002 ff06 	bl	8003cec <LCD_Set_Cursor>
 8000ee0:	e00a      	b.n	8000ef8 <SETTING_MENU_Display+0x114>
		} else if(SETTING_MENU_Data.setting_state == SETTING_SENSOR_NORMAL_STATE){
 8000ee2:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <SETTING_MENU_Display+0x134>)
 8000ee4:	7c1b      	ldrb	r3, [r3, #16]
 8000ee6:	2b04      	cmp	r3, #4
 8000ee8:	d106      	bne.n	8000ef8 <SETTING_MENU_Display+0x114>
			LCD_Set_Cursor(MENU_Data.hlcd, 19, 2);
 8000eea:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <SETTING_MENU_Display+0x130>)
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	2202      	movs	r2, #2
 8000ef0:	2113      	movs	r1, #19
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f002 fefa 	bl	8003cec <LCD_Set_Cursor>
		}
		LCD_Cursor_Blink(MENU_Data.hlcd);
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <SETTING_MENU_Display+0x130>)
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	0018      	movs	r0, r3
 8000efe:	f002 ff2b 	bl	8003d58 <LCD_Cursor_Blink>
	} else{
		LCD_Cursor_No_Blink(MENU_Data.hlcd);
	}
}
 8000f02:	e004      	b.n	8000f0e <SETTING_MENU_Display+0x12a>
		LCD_Cursor_No_Blink(MENU_Data.hlcd);
 8000f04:	4b03      	ldr	r3, [pc, #12]	; (8000f14 <SETTING_MENU_Display+0x130>)
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f002 ff3e 	bl	8003d8a <LCD_Cursor_No_Blink>
}
 8000f0e:	46c0      	nop			; (mov r8, r8)
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000168 	.word	0x20000168
 8000f18:	2000017c 	.word	0x2000017c
 8000f1c:	08004bec 	.word	0x08004bec
 8000f20:	08004c04 	.word	0x08004c04
 8000f24:	08004c1c 	.word	0x08004c1c
 8000f28:	08004c34 	.word	0x08004c34

08000f2c <KeypadPressingCallback>:
#include "keypad_driver.h"
#include "Menu.h"

void KeypadPressingCallback(uint8_t p_key){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	0002      	movs	r2, r0
 8000f34:	1dfb      	adds	r3, r7, #7
 8000f36:	701a      	strb	r2, [r3, #0]
	switch(MENU_Data.state){
 8000f38:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <KeypadPressingCallback+0x64>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d002      	beq.n	8000f46 <KeypadPressingCallback+0x1a>
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d007      	beq.n	8000f54 <KeypadPressingCallback+0x28>
			if((p_key >= '0' && p_key <= '9') || p_key == '*' || p_key == '#'){
				SETTING_MENU_Keypad_Input(p_key);
			}
			break;
		default:
			break;
 8000f44:	e01f      	b.n	8000f86 <KeypadPressingCallback+0x5a>
			if(p_key == '#'){
 8000f46:	1dfb      	adds	r3, r7, #7
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b23      	cmp	r3, #35	; 0x23
 8000f4c:	d118      	bne.n	8000f80 <KeypadPressingCallback+0x54>
				SETTING_MENU_Set_State();
 8000f4e:	f7ff fd8f 	bl	8000a70 <SETTING_MENU_Set_State>
			break;
 8000f52:	e015      	b.n	8000f80 <KeypadPressingCallback+0x54>
			if((p_key >= '0' && p_key <= '9') || p_key == '*' || p_key == '#'){
 8000f54:	1dfb      	adds	r3, r7, #7
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b2f      	cmp	r3, #47	; 0x2f
 8000f5a:	d903      	bls.n	8000f64 <KeypadPressingCallback+0x38>
 8000f5c:	1dfb      	adds	r3, r7, #7
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b39      	cmp	r3, #57	; 0x39
 8000f62:	d907      	bls.n	8000f74 <KeypadPressingCallback+0x48>
 8000f64:	1dfb      	adds	r3, r7, #7
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b2a      	cmp	r3, #42	; 0x2a
 8000f6a:	d003      	beq.n	8000f74 <KeypadPressingCallback+0x48>
 8000f6c:	1dfb      	adds	r3, r7, #7
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b23      	cmp	r3, #35	; 0x23
 8000f72:	d107      	bne.n	8000f84 <KeypadPressingCallback+0x58>
				SETTING_MENU_Keypad_Input(p_key);
 8000f74:	1dfb      	adds	r3, r7, #7
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	0018      	movs	r0, r3
 8000f7a:	f7ff fda9 	bl	8000ad0 <SETTING_MENU_Keypad_Input>
			break;
 8000f7e:	e001      	b.n	8000f84 <KeypadPressingCallback+0x58>
			break;
 8000f80:	46c0      	nop			; (mov r8, r8)
 8000f82:	e000      	b.n	8000f86 <KeypadPressingCallback+0x5a>
			break;
 8000f84:	46c0      	nop			; (mov r8, r8)
	}
}
 8000f86:	46c0      	nop			; (mov r8, r8)
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	b002      	add	sp, #8
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	46c0      	nop			; (mov r8, r8)
 8000f90:	20000168 	.word	0x20000168

08000f94 <KEYPAD_DRIVER_Handle>:

void KEYPAD_DRIVER_Handle(){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
	Keypad_Handle();
 8000f98:	f002 fd84 	bl	8003aa4 <Keypad_Handle>
}
 8000f9c:	46c0      	nop			; (mov r8, r8)
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <REALTIME_Init>:
REALTIME_DATA_HandleTypeDef REALTIME_Data;

static uint32_t timer = 0;
static uint8_t is_rtc_connected = RTC_DISCONNECTED;

void REALTIME_Init(){
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
	DS3231_Init(&hds3231, &hi2c2);
 8000fa8:	4a22      	ldr	r2, [pc, #136]	; (8001034 <REALTIME_Init+0x90>)
 8000faa:	4b23      	ldr	r3, [pc, #140]	; (8001038 <REALTIME_Init+0x94>)
 8000fac:	0011      	movs	r1, r2
 8000fae:	0018      	movs	r0, r3
 8000fb0:	f002 fb84 	bl	80036bc <DS3231_Init>
	REALTIME_Data.system_day = 1;
 8000fb4:	4b21      	ldr	r3, [pc, #132]	; (800103c <REALTIME_Init+0x98>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	709a      	strb	r2, [r3, #2]
	REALTIME_Data.system_hour = 0;
 8000fba:	4b20      	ldr	r3, [pc, #128]	; (800103c <REALTIME_Init+0x98>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	701a      	strb	r2, [r3, #0]
	REALTIME_Data.system_minute = 0;
 8000fc0:	4b1e      	ldr	r3, [pc, #120]	; (800103c <REALTIME_Init+0x98>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	705a      	strb	r2, [r3, #1]
	REALTIME_Data.system_date = 1;
 8000fc6:	4b1d      	ldr	r3, [pc, #116]	; (800103c <REALTIME_Init+0x98>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	70da      	strb	r2, [r3, #3]
	REALTIME_Data.system_month = 1;
 8000fcc:	4b1b      	ldr	r3, [pc, #108]	; (800103c <REALTIME_Init+0x98>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	711a      	strb	r2, [r3, #4]
	REALTIME_Data.system_year = 0;
 8000fd2:	4b1a      	ldr	r3, [pc, #104]	; (800103c <REALTIME_Init+0x98>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	715a      	strb	r2, [r3, #5]

//	DS3231_Set_Time(&hds3231, 19, 54, 0, 6);
//	DS3231_Set_Date(&hds3231, 2, 9, 22);

	if(DS3231_Get_Time(&hds3231) == DS3231_FAIL || DS3231_Get_Date(&hds3231) == DS3231_FAIL){
 8000fd8:	4b17      	ldr	r3, [pc, #92]	; (8001038 <REALTIME_Init+0x94>)
 8000fda:	0018      	movs	r0, r3
 8000fdc:	f002 fbc6 	bl	800376c <DS3231_Get_Time>
 8000fe0:	1e03      	subs	r3, r0, #0
 8000fe2:	d005      	beq.n	8000ff0 <REALTIME_Init+0x4c>
 8000fe4:	4b14      	ldr	r3, [pc, #80]	; (8001038 <REALTIME_Init+0x94>)
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	f002 fc3f 	bl	800386a <DS3231_Get_Date>
 8000fec:	1e03      	subs	r3, r0, #0
 8000fee:	d103      	bne.n	8000ff8 <REALTIME_Init+0x54>
		is_rtc_connected = RTC_DISCONNECTED;
 8000ff0:	4b13      	ldr	r3, [pc, #76]	; (8001040 <REALTIME_Init+0x9c>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	701a      	strb	r2, [r3, #0]
		return;
 8000ff6:	e01a      	b.n	800102e <REALTIME_Init+0x8a>
	}

	REALTIME_Data.system_day = hds3231.current_day;
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <REALTIME_Init+0x94>)
 8000ffa:	78da      	ldrb	r2, [r3, #3]
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	; (800103c <REALTIME_Init+0x98>)
 8000ffe:	709a      	strb	r2, [r3, #2]
	REALTIME_Data.system_hour = hds3231.current_hour;
 8001000:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <REALTIME_Init+0x94>)
 8001002:	781a      	ldrb	r2, [r3, #0]
 8001004:	4b0d      	ldr	r3, [pc, #52]	; (800103c <REALTIME_Init+0x98>)
 8001006:	701a      	strb	r2, [r3, #0]
	REALTIME_Data.system_minute = hds3231.current_minute;
 8001008:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <REALTIME_Init+0x94>)
 800100a:	785a      	ldrb	r2, [r3, #1]
 800100c:	4b0b      	ldr	r3, [pc, #44]	; (800103c <REALTIME_Init+0x98>)
 800100e:	705a      	strb	r2, [r3, #1]
	REALTIME_Data.system_date = hds3231.current_date;
 8001010:	4b09      	ldr	r3, [pc, #36]	; (8001038 <REALTIME_Init+0x94>)
 8001012:	791a      	ldrb	r2, [r3, #4]
 8001014:	4b09      	ldr	r3, [pc, #36]	; (800103c <REALTIME_Init+0x98>)
 8001016:	70da      	strb	r2, [r3, #3]
	REALTIME_Data.system_month = hds3231.current_month;
 8001018:	4b07      	ldr	r3, [pc, #28]	; (8001038 <REALTIME_Init+0x94>)
 800101a:	795a      	ldrb	r2, [r3, #5]
 800101c:	4b07      	ldr	r3, [pc, #28]	; (800103c <REALTIME_Init+0x98>)
 800101e:	711a      	strb	r2, [r3, #4]
	REALTIME_Data.system_year = hds3231.current_year;
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <REALTIME_Init+0x94>)
 8001022:	799a      	ldrb	r2, [r3, #6]
 8001024:	4b05      	ldr	r3, [pc, #20]	; (800103c <REALTIME_Init+0x98>)
 8001026:	715a      	strb	r2, [r3, #5]

	is_rtc_connected = RTC_CONNECTED;
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <REALTIME_Init+0x9c>)
 800102a:	2201      	movs	r2, #1
 800102c:	701a      	strb	r2, [r3, #0]
}
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	200001ac 	.word	0x200001ac
 8001038:	20000190 	.word	0x20000190
 800103c:	2000019c 	.word	0x2000019c
 8001040:	200001a8 	.word	0x200001a8

08001044 <REALTIME_Handle>:

void REALTIME_Handle(){
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - timer > CHECKING_REAL_TIME_CYCLE){
 8001048:	f000 fb3a 	bl	80016c0 <HAL_GetTick>
 800104c:	0002      	movs	r2, r0
 800104e:	4b23      	ldr	r3, [pc, #140]	; (80010dc <REALTIME_Handle+0x98>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	4a22      	ldr	r2, [pc, #136]	; (80010e0 <REALTIME_Handle+0x9c>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d93d      	bls.n	80010d6 <REALTIME_Handle+0x92>
		if(DS3231_Get_Time(&hds3231) == DS3231_FAIL || DS3231_Get_Date(&hds3231) == DS3231_FAIL){
 800105a:	4b22      	ldr	r3, [pc, #136]	; (80010e4 <REALTIME_Handle+0xa0>)
 800105c:	0018      	movs	r0, r3
 800105e:	f002 fb85 	bl	800376c <DS3231_Get_Time>
 8001062:	1e03      	subs	r3, r0, #0
 8001064:	d005      	beq.n	8001072 <REALTIME_Handle+0x2e>
 8001066:	4b1f      	ldr	r3, [pc, #124]	; (80010e4 <REALTIME_Handle+0xa0>)
 8001068:	0018      	movs	r0, r3
 800106a:	f002 fbfe 	bl	800386a <DS3231_Get_Date>
 800106e:	1e03      	subs	r3, r0, #0
 8001070:	d103      	bne.n	800107a <REALTIME_Handle+0x36>
			is_rtc_connected = RTC_DISCONNECTED;
 8001072:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <REALTIME_Handle+0xa4>)
 8001074:	2200      	movs	r2, #0
 8001076:	701a      	strb	r2, [r3, #0]
			return;
 8001078:	e02d      	b.n	80010d6 <REALTIME_Handle+0x92>
		}

		if(REALTIME_Data.system_hour != hds3231.current_hour || REALTIME_Data.system_minute != hds3231.current_minute){
 800107a:	4b1c      	ldr	r3, [pc, #112]	; (80010ec <REALTIME_Handle+0xa8>)
 800107c:	781a      	ldrb	r2, [r3, #0]
 800107e:	4b19      	ldr	r3, [pc, #100]	; (80010e4 <REALTIME_Handle+0xa0>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	429a      	cmp	r2, r3
 8001084:	d105      	bne.n	8001092 <REALTIME_Handle+0x4e>
 8001086:	4b19      	ldr	r3, [pc, #100]	; (80010ec <REALTIME_Handle+0xa8>)
 8001088:	785a      	ldrb	r2, [r3, #1]
 800108a:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <REALTIME_Handle+0xa0>)
 800108c:	785b      	ldrb	r3, [r3, #1]
 800108e:	429a      	cmp	r2, r3
 8001090:	d006      	beq.n	80010a0 <REALTIME_Handle+0x5c>
			if(MENU_Data.state == MAIN_MENU){
 8001092:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <REALTIME_Handle+0xac>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d102      	bne.n	80010a0 <REALTIME_Handle+0x5c>
				MENU_Data.changed = 0;
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <REALTIME_Handle+0xac>)
 800109c:	2200      	movs	r2, #0
 800109e:	705a      	strb	r2, [r3, #1]
			}
		}

		REALTIME_Data.system_day = hds3231.current_day;
 80010a0:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <REALTIME_Handle+0xa0>)
 80010a2:	78da      	ldrb	r2, [r3, #3]
 80010a4:	4b11      	ldr	r3, [pc, #68]	; (80010ec <REALTIME_Handle+0xa8>)
 80010a6:	709a      	strb	r2, [r3, #2]
		REALTIME_Data.system_hour = hds3231.current_hour;
 80010a8:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <REALTIME_Handle+0xa0>)
 80010aa:	781a      	ldrb	r2, [r3, #0]
 80010ac:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <REALTIME_Handle+0xa8>)
 80010ae:	701a      	strb	r2, [r3, #0]
		REALTIME_Data.system_minute = hds3231.current_minute;
 80010b0:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <REALTIME_Handle+0xa0>)
 80010b2:	785a      	ldrb	r2, [r3, #1]
 80010b4:	4b0d      	ldr	r3, [pc, #52]	; (80010ec <REALTIME_Handle+0xa8>)
 80010b6:	705a      	strb	r2, [r3, #1]
		REALTIME_Data.system_date = hds3231.current_date;
 80010b8:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <REALTIME_Handle+0xa0>)
 80010ba:	791a      	ldrb	r2, [r3, #4]
 80010bc:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <REALTIME_Handle+0xa8>)
 80010be:	70da      	strb	r2, [r3, #3]
		REALTIME_Data.system_month = hds3231.current_month;
 80010c0:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <REALTIME_Handle+0xa0>)
 80010c2:	795a      	ldrb	r2, [r3, #5]
 80010c4:	4b09      	ldr	r3, [pc, #36]	; (80010ec <REALTIME_Handle+0xa8>)
 80010c6:	711a      	strb	r2, [r3, #4]
		REALTIME_Data.system_year = hds3231.current_year;
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <REALTIME_Handle+0xa0>)
 80010ca:	799a      	ldrb	r2, [r3, #6]
 80010cc:	4b07      	ldr	r3, [pc, #28]	; (80010ec <REALTIME_Handle+0xa8>)
 80010ce:	715a      	strb	r2, [r3, #5]
		is_rtc_connected = RTC_CONNECTED;
 80010d0:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <REALTIME_Handle+0xa4>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	701a      	strb	r2, [r3, #0]
	}
}
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	46c0      	nop			; (mov r8, r8)
 80010dc:	200001a4 	.word	0x200001a4
 80010e0:	00001388 	.word	0x00001388
 80010e4:	20000190 	.word	0x20000190
 80010e8:	200001a8 	.word	0x200001a8
 80010ec:	2000019c 	.word	0x2000019c
 80010f0:	20000168 	.word	0x20000168

080010f4 <REALTIME_Set_New_Realtime>:

void REALTIME_Set_New_Realtime(REALTIME_DATA_HandleTypeDef *p_new_realtime){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af02      	add	r7, sp, #8
 80010fa:	6078      	str	r0, [r7, #4]
	DS3231_Set_Time(&hds3231, p_new_realtime->system_hour, p_new_realtime->system_minute, 0, p_new_realtime->system_day);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	7819      	ldrb	r1, [r3, #0]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	785a      	ldrb	r2, [r3, #1]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	789b      	ldrb	r3, [r3, #2]
 8001108:	4814      	ldr	r0, [pc, #80]	; (800115c <REALTIME_Set_New_Realtime+0x68>)
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	2300      	movs	r3, #0
 800110e:	f002 fae1 	bl	80036d4 <DS3231_Set_Time>
	DS3231_Set_Date(&hds3231, p_new_realtime->system_date, p_new_realtime->system_month, p_new_realtime->system_year);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	78d9      	ldrb	r1, [r3, #3]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	791a      	ldrb	r2, [r3, #4]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	795b      	ldrb	r3, [r3, #5]
 800111e:	480f      	ldr	r0, [pc, #60]	; (800115c <REALTIME_Set_New_Realtime+0x68>)
 8001120:	f002 fb65 	bl	80037ee <DS3231_Set_Date>

	REALTIME_Data.system_day = p_new_realtime->system_day;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	789a      	ldrb	r2, [r3, #2]
 8001128:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <REALTIME_Set_New_Realtime+0x6c>)
 800112a:	709a      	strb	r2, [r3, #2]
	REALTIME_Data.system_hour = p_new_realtime->system_hour;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	781a      	ldrb	r2, [r3, #0]
 8001130:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <REALTIME_Set_New_Realtime+0x6c>)
 8001132:	701a      	strb	r2, [r3, #0]
	REALTIME_Data.system_minute = p_new_realtime->system_minute;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	785a      	ldrb	r2, [r3, #1]
 8001138:	4b09      	ldr	r3, [pc, #36]	; (8001160 <REALTIME_Set_New_Realtime+0x6c>)
 800113a:	705a      	strb	r2, [r3, #1]
	REALTIME_Data.system_date = p_new_realtime->system_date;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	78da      	ldrb	r2, [r3, #3]
 8001140:	4b07      	ldr	r3, [pc, #28]	; (8001160 <REALTIME_Set_New_Realtime+0x6c>)
 8001142:	70da      	strb	r2, [r3, #3]
	REALTIME_Data.system_month = p_new_realtime->system_month;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	791a      	ldrb	r2, [r3, #4]
 8001148:	4b05      	ldr	r3, [pc, #20]	; (8001160 <REALTIME_Set_New_Realtime+0x6c>)
 800114a:	711a      	strb	r2, [r3, #4]
	REALTIME_Data.system_year = p_new_realtime->system_year;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	795a      	ldrb	r2, [r3, #5]
 8001150:	4b03      	ldr	r3, [pc, #12]	; (8001160 <REALTIME_Set_New_Realtime+0x6c>)
 8001152:	715a      	strb	r2, [r3, #5]
}
 8001154:	46c0      	nop			; (mov r8, r8)
 8001156:	46bd      	mov	sp, r7
 8001158:	b002      	add	sp, #8
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000190 	.word	0x20000190
 8001160:	2000019c 	.word	0x2000019c

08001164 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001168:	f000 fa50 	bl	800160c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800116c:	f000 f813 	bl	8001196 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001170:	f000 f89c 	bl	80012ac <MX_GPIO_Init>
  MX_I2C2_Init();
 8001174:	f000 f85a 	bl	800122c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  CONTRL_Init();
 8001178:	f7ff f97c 	bl	8000474 <CONTRL_Init>
  MENU_Init();
 800117c:	f7ff fc36 	bl	80009ec <MENU_Init>
  REALTIME_Init();
 8001180:	f7ff ff10 	bl	8000fa4 <REALTIME_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  CONTROL_Handle();
 8001184:	f7ff f996 	bl	80004b4 <CONTROL_Handle>

	  MENU_Handle();
 8001188:	f7ff fc52 	bl	8000a30 <MENU_Handle>

	  REALTIME_Handle();
 800118c:	f7ff ff5a 	bl	8001044 <REALTIME_Handle>

	  KEYPAD_DRIVER_Handle();
 8001190:	f7ff ff00 	bl	8000f94 <KEYPAD_DRIVER_Handle>
	  CONTROL_Handle();
 8001194:	e7f6      	b.n	8001184 <main+0x20>

08001196 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001196:	b590      	push	{r4, r7, lr}
 8001198:	b091      	sub	sp, #68	; 0x44
 800119a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119c:	2410      	movs	r4, #16
 800119e:	193b      	adds	r3, r7, r4
 80011a0:	0018      	movs	r0, r3
 80011a2:	2330      	movs	r3, #48	; 0x30
 80011a4:	001a      	movs	r2, r3
 80011a6:	2100      	movs	r1, #0
 80011a8:	f003 f875 	bl	8004296 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ac:	003b      	movs	r3, r7
 80011ae:	0018      	movs	r0, r3
 80011b0:	2310      	movs	r3, #16
 80011b2:	001a      	movs	r2, r3
 80011b4:	2100      	movs	r1, #0
 80011b6:	f003 f86e 	bl	8004296 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011ba:	0021      	movs	r1, r4
 80011bc:	187b      	adds	r3, r7, r1
 80011be:	2202      	movs	r2, #2
 80011c0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011c2:	187b      	adds	r3, r7, r1
 80011c4:	2201      	movs	r2, #1
 80011c6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011c8:	187b      	adds	r3, r7, r1
 80011ca:	2210      	movs	r2, #16
 80011cc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ce:	187b      	adds	r3, r7, r1
 80011d0:	2202      	movs	r2, #2
 80011d2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011d4:	187b      	adds	r3, r7, r1
 80011d6:	2200      	movs	r2, #0
 80011d8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80011da:	187b      	adds	r3, r7, r1
 80011dc:	22a0      	movs	r2, #160	; 0xa0
 80011de:	0392      	lsls	r2, r2, #14
 80011e0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80011e2:	187b      	adds	r3, r7, r1
 80011e4:	2200      	movs	r2, #0
 80011e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e8:	187b      	adds	r3, r7, r1
 80011ea:	0018      	movs	r0, r3
 80011ec:	f001 fde0 	bl	8002db0 <HAL_RCC_OscConfig>
 80011f0:	1e03      	subs	r3, r0, #0
 80011f2:	d001      	beq.n	80011f8 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80011f4:	f000 f918 	bl	8001428 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f8:	003b      	movs	r3, r7
 80011fa:	2207      	movs	r2, #7
 80011fc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011fe:	003b      	movs	r3, r7
 8001200:	2202      	movs	r2, #2
 8001202:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001204:	003b      	movs	r3, r7
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800120a:	003b      	movs	r3, r7
 800120c:	2200      	movs	r2, #0
 800120e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001210:	003b      	movs	r3, r7
 8001212:	2101      	movs	r1, #1
 8001214:	0018      	movs	r0, r3
 8001216:	f002 f8e5 	bl	80033e4 <HAL_RCC_ClockConfig>
 800121a:	1e03      	subs	r3, r0, #0
 800121c:	d001      	beq.n	8001222 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800121e:	f000 f903 	bl	8001428 <Error_Handler>
  }
}
 8001222:	46c0      	nop			; (mov r8, r8)
 8001224:	46bd      	mov	sp, r7
 8001226:	b011      	add	sp, #68	; 0x44
 8001228:	bd90      	pop	{r4, r7, pc}
	...

0800122c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001230:	4b1b      	ldr	r3, [pc, #108]	; (80012a0 <MX_I2C2_Init+0x74>)
 8001232:	4a1c      	ldr	r2, [pc, #112]	; (80012a4 <MX_I2C2_Init+0x78>)
 8001234:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001236:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <MX_I2C2_Init+0x74>)
 8001238:	4a1b      	ldr	r2, [pc, #108]	; (80012a8 <MX_I2C2_Init+0x7c>)
 800123a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800123c:	4b18      	ldr	r3, [pc, #96]	; (80012a0 <MX_I2C2_Init+0x74>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001242:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <MX_I2C2_Init+0x74>)
 8001244:	2201      	movs	r2, #1
 8001246:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001248:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <MX_I2C2_Init+0x74>)
 800124a:	2200      	movs	r2, #0
 800124c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800124e:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <MX_I2C2_Init+0x74>)
 8001250:	2200      	movs	r2, #0
 8001252:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001254:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <MX_I2C2_Init+0x74>)
 8001256:	2200      	movs	r2, #0
 8001258:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800125a:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <MX_I2C2_Init+0x74>)
 800125c:	2200      	movs	r2, #0
 800125e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001260:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <MX_I2C2_Init+0x74>)
 8001262:	2200      	movs	r2, #0
 8001264:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001266:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <MX_I2C2_Init+0x74>)
 8001268:	0018      	movs	r0, r3
 800126a:	f000 feb7 	bl	8001fdc <HAL_I2C_Init>
 800126e:	1e03      	subs	r3, r0, #0
 8001270:	d001      	beq.n	8001276 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001272:	f000 f8d9 	bl	8001428 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001276:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <MX_I2C2_Init+0x74>)
 8001278:	2100      	movs	r1, #0
 800127a:	0018      	movs	r0, r3
 800127c:	f001 fd00 	bl	8002c80 <HAL_I2CEx_ConfigAnalogFilter>
 8001280:	1e03      	subs	r3, r0, #0
 8001282:	d001      	beq.n	8001288 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001284:	f000 f8d0 	bl	8001428 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001288:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <MX_I2C2_Init+0x74>)
 800128a:	2100      	movs	r1, #0
 800128c:	0018      	movs	r0, r3
 800128e:	f001 fd43 	bl	8002d18 <HAL_I2CEx_ConfigDigitalFilter>
 8001292:	1e03      	subs	r3, r0, #0
 8001294:	d001      	beq.n	800129a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001296:	f000 f8c7 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800129a:	46c0      	nop			; (mov r8, r8)
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	200001ac 	.word	0x200001ac
 80012a4:	40005800 	.word	0x40005800
 80012a8:	20303e5d 	.word	0x20303e5d

080012ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012ac:	b590      	push	{r4, r7, lr}
 80012ae:	b08b      	sub	sp, #44	; 0x2c
 80012b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b2:	2414      	movs	r4, #20
 80012b4:	193b      	adds	r3, r7, r4
 80012b6:	0018      	movs	r0, r3
 80012b8:	2314      	movs	r3, #20
 80012ba:	001a      	movs	r2, r3
 80012bc:	2100      	movs	r1, #0
 80012be:	f002 ffea 	bl	8004296 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c2:	4b54      	ldr	r3, [pc, #336]	; (8001414 <MX_GPIO_Init+0x168>)
 80012c4:	695a      	ldr	r2, [r3, #20]
 80012c6:	4b53      	ldr	r3, [pc, #332]	; (8001414 <MX_GPIO_Init+0x168>)
 80012c8:	2180      	movs	r1, #128	; 0x80
 80012ca:	0309      	lsls	r1, r1, #12
 80012cc:	430a      	orrs	r2, r1
 80012ce:	615a      	str	r2, [r3, #20]
 80012d0:	4b50      	ldr	r3, [pc, #320]	; (8001414 <MX_GPIO_Init+0x168>)
 80012d2:	695a      	ldr	r2, [r3, #20]
 80012d4:	2380      	movs	r3, #128	; 0x80
 80012d6:	031b      	lsls	r3, r3, #12
 80012d8:	4013      	ands	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012de:	4b4d      	ldr	r3, [pc, #308]	; (8001414 <MX_GPIO_Init+0x168>)
 80012e0:	695a      	ldr	r2, [r3, #20]
 80012e2:	4b4c      	ldr	r3, [pc, #304]	; (8001414 <MX_GPIO_Init+0x168>)
 80012e4:	2180      	movs	r1, #128	; 0x80
 80012e6:	0289      	lsls	r1, r1, #10
 80012e8:	430a      	orrs	r2, r1
 80012ea:	615a      	str	r2, [r3, #20]
 80012ec:	4b49      	ldr	r3, [pc, #292]	; (8001414 <MX_GPIO_Init+0x168>)
 80012ee:	695a      	ldr	r2, [r3, #20]
 80012f0:	2380      	movs	r3, #128	; 0x80
 80012f2:	029b      	lsls	r3, r3, #10
 80012f4:	4013      	ands	r3, r2
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fa:	4b46      	ldr	r3, [pc, #280]	; (8001414 <MX_GPIO_Init+0x168>)
 80012fc:	695a      	ldr	r2, [r3, #20]
 80012fe:	4b45      	ldr	r3, [pc, #276]	; (8001414 <MX_GPIO_Init+0x168>)
 8001300:	2180      	movs	r1, #128	; 0x80
 8001302:	02c9      	lsls	r1, r1, #11
 8001304:	430a      	orrs	r2, r1
 8001306:	615a      	str	r2, [r3, #20]
 8001308:	4b42      	ldr	r3, [pc, #264]	; (8001414 <MX_GPIO_Init+0x168>)
 800130a:	695a      	ldr	r2, [r3, #20]
 800130c:	2380      	movs	r3, #128	; 0x80
 800130e:	02db      	lsls	r3, r3, #11
 8001310:	4013      	ands	r3, r2
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001316:	4b3f      	ldr	r3, [pc, #252]	; (8001414 <MX_GPIO_Init+0x168>)
 8001318:	695a      	ldr	r2, [r3, #20]
 800131a:	4b3e      	ldr	r3, [pc, #248]	; (8001414 <MX_GPIO_Init+0x168>)
 800131c:	2180      	movs	r1, #128	; 0x80
 800131e:	03c9      	lsls	r1, r1, #15
 8001320:	430a      	orrs	r2, r1
 8001322:	615a      	str	r2, [r3, #20]
 8001324:	4b3b      	ldr	r3, [pc, #236]	; (8001414 <MX_GPIO_Init+0x168>)
 8001326:	695a      	ldr	r2, [r3, #20]
 8001328:	2380      	movs	r3, #128	; 0x80
 800132a:	03db      	lsls	r3, r3, #15
 800132c:	4013      	ands	r3, r2
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001332:	2380      	movs	r3, #128	; 0x80
 8001334:	019b      	lsls	r3, r3, #6
 8001336:	4838      	ldr	r0, [pc, #224]	; (8001418 <MX_GPIO_Init+0x16c>)
 8001338:	2200      	movs	r2, #0
 800133a:	0019      	movs	r1, r3
 800133c:	f000 fe31 	bl	8001fa2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9
 8001340:	4936      	ldr	r1, [pc, #216]	; (800141c <MX_GPIO_Init+0x170>)
 8001342:	2390      	movs	r3, #144	; 0x90
 8001344:	05db      	lsls	r3, r3, #23
 8001346:	2200      	movs	r2, #0
 8001348:	0018      	movs	r0, r3
 800134a:	f000 fe2a 	bl	8001fa2 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800134e:	4934      	ldr	r1, [pc, #208]	; (8001420 <MX_GPIO_Init+0x174>)
 8001350:	4b34      	ldr	r3, [pc, #208]	; (8001424 <MX_GPIO_Init+0x178>)
 8001352:	2200      	movs	r2, #0
 8001354:	0018      	movs	r0, r3
 8001356:	f000 fe24 	bl	8001fa2 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800135a:	193b      	adds	r3, r7, r4
 800135c:	2280      	movs	r2, #128	; 0x80
 800135e:	0192      	lsls	r2, r2, #6
 8001360:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001362:	193b      	adds	r3, r7, r4
 8001364:	2201      	movs	r2, #1
 8001366:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	193b      	adds	r3, r7, r4
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136e:	193b      	adds	r3, r7, r4
 8001370:	2200      	movs	r2, #0
 8001372:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001374:	193b      	adds	r3, r7, r4
 8001376:	4a28      	ldr	r2, [pc, #160]	; (8001418 <MX_GPIO_Init+0x16c>)
 8001378:	0019      	movs	r1, r3
 800137a:	0010      	movs	r0, r2
 800137c:	f000 fc84 	bl	8001c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA8 PA9
                           PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9
 8001380:	193b      	adds	r3, r7, r4
 8001382:	4a26      	ldr	r2, [pc, #152]	; (800141c <MX_GPIO_Init+0x170>)
 8001384:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001386:	193b      	adds	r3, r7, r4
 8001388:	2201      	movs	r2, #1
 800138a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	193b      	adds	r3, r7, r4
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	193b      	adds	r3, r7, r4
 8001394:	2200      	movs	r2, #0
 8001396:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001398:	193a      	adds	r2, r7, r4
 800139a:	2390      	movs	r3, #144	; 0x90
 800139c:	05db      	lsls	r3, r3, #23
 800139e:	0011      	movs	r1, r2
 80013a0:	0018      	movs	r0, r3
 80013a2:	f000 fc71 	bl	8001c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5
                           PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80013a6:	193b      	adds	r3, r7, r4
 80013a8:	22fc      	movs	r2, #252	; 0xfc
 80013aa:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ac:	193b      	adds	r3, r7, r4
 80013ae:	2200      	movs	r2, #0
 80013b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	193b      	adds	r3, r7, r4
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b8:	193a      	adds	r2, r7, r4
 80013ba:	2390      	movs	r3, #144	; 0x90
 80013bc:	05db      	lsls	r3, r3, #23
 80013be:	0011      	movs	r1, r2
 80013c0:	0018      	movs	r0, r3
 80013c2:	f000 fc61 	bl	8001c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80013c6:	193b      	adds	r3, r7, r4
 80013c8:	4a15      	ldr	r2, [pc, #84]	; (8001420 <MX_GPIO_Init+0x174>)
 80013ca:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013cc:	193b      	adds	r3, r7, r4
 80013ce:	2201      	movs	r2, #1
 80013d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	193b      	adds	r3, r7, r4
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d8:	193b      	adds	r3, r7, r4
 80013da:	2200      	movs	r2, #0
 80013dc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013de:	193b      	adds	r3, r7, r4
 80013e0:	4a10      	ldr	r2, [pc, #64]	; (8001424 <MX_GPIO_Init+0x178>)
 80013e2:	0019      	movs	r1, r3
 80013e4:	0010      	movs	r0, r2
 80013e6:	f000 fc4f 	bl	8001c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80013ea:	0021      	movs	r1, r4
 80013ec:	187b      	adds	r3, r7, r1
 80013ee:	22f0      	movs	r2, #240	; 0xf0
 80013f0:	0212      	lsls	r2, r2, #8
 80013f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f4:	187b      	adds	r3, r7, r1
 80013f6:	2200      	movs	r2, #0
 80013f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013fa:	187b      	adds	r3, r7, r1
 80013fc:	2201      	movs	r2, #1
 80013fe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001400:	187b      	adds	r3, r7, r1
 8001402:	4a08      	ldr	r2, [pc, #32]	; (8001424 <MX_GPIO_Init+0x178>)
 8001404:	0019      	movs	r1, r3
 8001406:	0010      	movs	r0, r2
 8001408:	f000 fc3e 	bl	8001c88 <HAL_GPIO_Init>

}
 800140c:	46c0      	nop			; (mov r8, r8)
 800140e:	46bd      	mov	sp, r7
 8001410:	b00b      	add	sp, #44	; 0x2c
 8001412:	bd90      	pop	{r4, r7, pc}
 8001414:	40021000 	.word	0x40021000
 8001418:	48000800 	.word	0x48000800
 800141c:	00001f03 	.word	0x00001f03
 8001420:	00000c3f 	.word	0x00000c3f
 8001424:	48000400 	.word	0x48000400

08001428 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800142c:	b672      	cpsid	i
}
 800142e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001430:	e7fe      	b.n	8001430 <Error_Handler+0x8>
	...

08001434 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143a:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <HAL_MspInit+0x44>)
 800143c:	699a      	ldr	r2, [r3, #24]
 800143e:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <HAL_MspInit+0x44>)
 8001440:	2101      	movs	r1, #1
 8001442:	430a      	orrs	r2, r1
 8001444:	619a      	str	r2, [r3, #24]
 8001446:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <HAL_MspInit+0x44>)
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	2201      	movs	r2, #1
 800144c:	4013      	ands	r3, r2
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <HAL_MspInit+0x44>)
 8001454:	69da      	ldr	r2, [r3, #28]
 8001456:	4b08      	ldr	r3, [pc, #32]	; (8001478 <HAL_MspInit+0x44>)
 8001458:	2180      	movs	r1, #128	; 0x80
 800145a:	0549      	lsls	r1, r1, #21
 800145c:	430a      	orrs	r2, r1
 800145e:	61da      	str	r2, [r3, #28]
 8001460:	4b05      	ldr	r3, [pc, #20]	; (8001478 <HAL_MspInit+0x44>)
 8001462:	69da      	ldr	r2, [r3, #28]
 8001464:	2380      	movs	r3, #128	; 0x80
 8001466:	055b      	lsls	r3, r3, #21
 8001468:	4013      	ands	r3, r2
 800146a:	603b      	str	r3, [r7, #0]
 800146c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146e:	46c0      	nop			; (mov r8, r8)
 8001470:	46bd      	mov	sp, r7
 8001472:	b002      	add	sp, #8
 8001474:	bd80      	pop	{r7, pc}
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	40021000 	.word	0x40021000

0800147c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800147c:	b590      	push	{r4, r7, lr}
 800147e:	b08b      	sub	sp, #44	; 0x2c
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	2414      	movs	r4, #20
 8001486:	193b      	adds	r3, r7, r4
 8001488:	0018      	movs	r0, r3
 800148a:	2314      	movs	r3, #20
 800148c:	001a      	movs	r2, r3
 800148e:	2100      	movs	r1, #0
 8001490:	f002 ff01 	bl	8004296 <memset>
  if(hi2c->Instance==I2C2)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a1a      	ldr	r2, [pc, #104]	; (8001504 <HAL_I2C_MspInit+0x88>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d12e      	bne.n	80014fc <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800149e:	4b1a      	ldr	r3, [pc, #104]	; (8001508 <HAL_I2C_MspInit+0x8c>)
 80014a0:	695a      	ldr	r2, [r3, #20]
 80014a2:	4b19      	ldr	r3, [pc, #100]	; (8001508 <HAL_I2C_MspInit+0x8c>)
 80014a4:	2180      	movs	r1, #128	; 0x80
 80014a6:	03c9      	lsls	r1, r1, #15
 80014a8:	430a      	orrs	r2, r1
 80014aa:	615a      	str	r2, [r3, #20]
 80014ac:	4b16      	ldr	r3, [pc, #88]	; (8001508 <HAL_I2C_MspInit+0x8c>)
 80014ae:	695a      	ldr	r2, [r3, #20]
 80014b0:	2380      	movs	r3, #128	; 0x80
 80014b2:	03db      	lsls	r3, r3, #15
 80014b4:	4013      	ands	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF6     ------> I2C2_SCL
    PF7     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014ba:	0021      	movs	r1, r4
 80014bc:	187b      	adds	r3, r7, r1
 80014be:	22c0      	movs	r2, #192	; 0xc0
 80014c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014c2:	187b      	adds	r3, r7, r1
 80014c4:	2212      	movs	r2, #18
 80014c6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	187b      	adds	r3, r7, r1
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014ce:	187b      	adds	r3, r7, r1
 80014d0:	2203      	movs	r2, #3
 80014d2:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014d4:	187b      	adds	r3, r7, r1
 80014d6:	4a0d      	ldr	r2, [pc, #52]	; (800150c <HAL_I2C_MspInit+0x90>)
 80014d8:	0019      	movs	r1, r3
 80014da:	0010      	movs	r0, r2
 80014dc:	f000 fbd4 	bl	8001c88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014e0:	4b09      	ldr	r3, [pc, #36]	; (8001508 <HAL_I2C_MspInit+0x8c>)
 80014e2:	69da      	ldr	r2, [r3, #28]
 80014e4:	4b08      	ldr	r3, [pc, #32]	; (8001508 <HAL_I2C_MspInit+0x8c>)
 80014e6:	2180      	movs	r1, #128	; 0x80
 80014e8:	03c9      	lsls	r1, r1, #15
 80014ea:	430a      	orrs	r2, r1
 80014ec:	61da      	str	r2, [r3, #28]
 80014ee:	4b06      	ldr	r3, [pc, #24]	; (8001508 <HAL_I2C_MspInit+0x8c>)
 80014f0:	69da      	ldr	r2, [r3, #28]
 80014f2:	2380      	movs	r3, #128	; 0x80
 80014f4:	03db      	lsls	r3, r3, #15
 80014f6:	4013      	ands	r3, r2
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80014fc:	46c0      	nop			; (mov r8, r8)
 80014fe:	46bd      	mov	sp, r7
 8001500:	b00b      	add	sp, #44	; 0x2c
 8001502:	bd90      	pop	{r4, r7, pc}
 8001504:	40005800 	.word	0x40005800
 8001508:	40021000 	.word	0x40021000
 800150c:	48001400 	.word	0x48001400

08001510 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001514:	e7fe      	b.n	8001514 <NMI_Handler+0x4>

08001516 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800151a:	e7fe      	b.n	800151a <HardFault_Handler+0x4>

0800151c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001520:	46c0      	nop			; (mov r8, r8)
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800152a:	46c0      	nop			; (mov r8, r8)
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001534:	f000 f8b2 	bl	800169c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001538:	46c0      	nop			; (mov r8, r8)
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001548:	4a14      	ldr	r2, [pc, #80]	; (800159c <_sbrk+0x5c>)
 800154a:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <_sbrk+0x60>)
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001554:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <_sbrk+0x64>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d102      	bne.n	8001562 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800155c:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <_sbrk+0x64>)
 800155e:	4a12      	ldr	r2, [pc, #72]	; (80015a8 <_sbrk+0x68>)
 8001560:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001562:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <_sbrk+0x64>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	18d3      	adds	r3, r2, r3
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	429a      	cmp	r2, r3
 800156e:	d207      	bcs.n	8001580 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001570:	f002 fe5e 	bl	8004230 <__errno>
 8001574:	0003      	movs	r3, r0
 8001576:	220c      	movs	r2, #12
 8001578:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800157a:	2301      	movs	r3, #1
 800157c:	425b      	negs	r3, r3
 800157e:	e009      	b.n	8001594 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001580:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <_sbrk+0x64>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001586:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <_sbrk+0x64>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	18d2      	adds	r2, r2, r3
 800158e:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <_sbrk+0x64>)
 8001590:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001592:	68fb      	ldr	r3, [r7, #12]
}
 8001594:	0018      	movs	r0, r3
 8001596:	46bd      	mov	sp, r7
 8001598:	b006      	add	sp, #24
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20002000 	.word	0x20002000
 80015a0:	00000400 	.word	0x00000400
 80015a4:	200001f8 	.word	0x200001f8
 80015a8:	20000240 	.word	0x20000240

080015ac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80015b0:	46c0      	nop			; (mov r8, r8)
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
	...

080015b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015b8:	480d      	ldr	r0, [pc, #52]	; (80015f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015ba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015bc:	480d      	ldr	r0, [pc, #52]	; (80015f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80015be:	490e      	ldr	r1, [pc, #56]	; (80015f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015c0:	4a0e      	ldr	r2, [pc, #56]	; (80015fc <LoopForever+0xe>)
  movs r3, #0
 80015c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015c4:	e002      	b.n	80015cc <LoopCopyDataInit>

080015c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ca:	3304      	adds	r3, #4

080015cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d0:	d3f9      	bcc.n	80015c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015d2:	4a0b      	ldr	r2, [pc, #44]	; (8001600 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015d4:	4c0b      	ldr	r4, [pc, #44]	; (8001604 <LoopForever+0x16>)
  movs r3, #0
 80015d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015d8:	e001      	b.n	80015de <LoopFillZerobss>

080015da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015dc:	3204      	adds	r2, #4

080015de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e0:	d3fb      	bcc.n	80015da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80015e2:	f7ff ffe3 	bl	80015ac <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80015e6:	f002 fe29 	bl	800423c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015ea:	f7ff fdbb 	bl	8001164 <main>

080015ee <LoopForever>:

LoopForever:
    b LoopForever
 80015ee:	e7fe      	b.n	80015ee <LoopForever>
  ldr   r0, =_estack
 80015f0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80015f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015f8:	20000120 	.word	0x20000120
  ldr r2, =_sidata
 80015fc:	08004cdc 	.word	0x08004cdc
  ldr r2, =_sbss
 8001600:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 8001604:	20000240 	.word	0x20000240

08001608 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001608:	e7fe      	b.n	8001608 <ADC1_IRQHandler>
	...

0800160c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001610:	4b07      	ldr	r3, [pc, #28]	; (8001630 <HAL_Init+0x24>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <HAL_Init+0x24>)
 8001616:	2110      	movs	r1, #16
 8001618:	430a      	orrs	r2, r1
 800161a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800161c:	2003      	movs	r0, #3
 800161e:	f000 f809 	bl	8001634 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001622:	f7ff ff07 	bl	8001434 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001626:	2300      	movs	r3, #0
}
 8001628:	0018      	movs	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	46c0      	nop			; (mov r8, r8)
 8001630:	40022000 	.word	0x40022000

08001634 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001634:	b590      	push	{r4, r7, lr}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800163c:	4b14      	ldr	r3, [pc, #80]	; (8001690 <HAL_InitTick+0x5c>)
 800163e:	681c      	ldr	r4, [r3, #0]
 8001640:	4b14      	ldr	r3, [pc, #80]	; (8001694 <HAL_InitTick+0x60>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	0019      	movs	r1, r3
 8001646:	23fa      	movs	r3, #250	; 0xfa
 8001648:	0098      	lsls	r0, r3, #2
 800164a:	f7fe fd6f 	bl	800012c <__udivsi3>
 800164e:	0003      	movs	r3, r0
 8001650:	0019      	movs	r1, r3
 8001652:	0020      	movs	r0, r4
 8001654:	f7fe fd6a 	bl	800012c <__udivsi3>
 8001658:	0003      	movs	r3, r0
 800165a:	0018      	movs	r0, r3
 800165c:	f000 f905 	bl	800186a <HAL_SYSTICK_Config>
 8001660:	1e03      	subs	r3, r0, #0
 8001662:	d001      	beq.n	8001668 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e00f      	b.n	8001688 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b03      	cmp	r3, #3
 800166c:	d80b      	bhi.n	8001686 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	2301      	movs	r3, #1
 8001672:	425b      	negs	r3, r3
 8001674:	2200      	movs	r2, #0
 8001676:	0018      	movs	r0, r3
 8001678:	f000 f8e2 	bl	8001840 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <HAL_InitTick+0x64>)
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001682:	2300      	movs	r3, #0
 8001684:	e000      	b.n	8001688 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
}
 8001688:	0018      	movs	r0, r3
 800168a:	46bd      	mov	sp, r7
 800168c:	b003      	add	sp, #12
 800168e:	bd90      	pop	{r4, r7, pc}
 8001690:	20000020 	.word	0x20000020
 8001694:	20000028 	.word	0x20000028
 8001698:	20000024 	.word	0x20000024

0800169c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <HAL_IncTick+0x1c>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	001a      	movs	r2, r3
 80016a6:	4b05      	ldr	r3, [pc, #20]	; (80016bc <HAL_IncTick+0x20>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	18d2      	adds	r2, r2, r3
 80016ac:	4b03      	ldr	r3, [pc, #12]	; (80016bc <HAL_IncTick+0x20>)
 80016ae:	601a      	str	r2, [r3, #0]
}
 80016b0:	46c0      	nop			; (mov r8, r8)
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	46c0      	nop			; (mov r8, r8)
 80016b8:	20000028 	.word	0x20000028
 80016bc:	200001fc 	.word	0x200001fc

080016c0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  return uwTick;
 80016c4:	4b02      	ldr	r3, [pc, #8]	; (80016d0 <HAL_GetTick+0x10>)
 80016c6:	681b      	ldr	r3, [r3, #0]
}
 80016c8:	0018      	movs	r0, r3
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	46c0      	nop			; (mov r8, r8)
 80016d0:	200001fc 	.word	0x200001fc

080016d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016dc:	f7ff fff0 	bl	80016c0 <HAL_GetTick>
 80016e0:	0003      	movs	r3, r0
 80016e2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	3301      	adds	r3, #1
 80016ec:	d005      	beq.n	80016fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ee:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <HAL_Delay+0x44>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	001a      	movs	r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	189b      	adds	r3, r3, r2
 80016f8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80016fa:	46c0      	nop			; (mov r8, r8)
 80016fc:	f7ff ffe0 	bl	80016c0 <HAL_GetTick>
 8001700:	0002      	movs	r2, r0
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	429a      	cmp	r2, r3
 800170a:	d8f7      	bhi.n	80016fc <HAL_Delay+0x28>
  {
  }
}
 800170c:	46c0      	nop			; (mov r8, r8)
 800170e:	46c0      	nop			; (mov r8, r8)
 8001710:	46bd      	mov	sp, r7
 8001712:	b004      	add	sp, #16
 8001714:	bd80      	pop	{r7, pc}
 8001716:	46c0      	nop			; (mov r8, r8)
 8001718:	20000028 	.word	0x20000028

0800171c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800171c:	b590      	push	{r4, r7, lr}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	0002      	movs	r2, r0
 8001724:	6039      	str	r1, [r7, #0]
 8001726:	1dfb      	adds	r3, r7, #7
 8001728:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800172a:	1dfb      	adds	r3, r7, #7
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b7f      	cmp	r3, #127	; 0x7f
 8001730:	d828      	bhi.n	8001784 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001732:	4a2f      	ldr	r2, [pc, #188]	; (80017f0 <__NVIC_SetPriority+0xd4>)
 8001734:	1dfb      	adds	r3, r7, #7
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	b25b      	sxtb	r3, r3
 800173a:	089b      	lsrs	r3, r3, #2
 800173c:	33c0      	adds	r3, #192	; 0xc0
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	589b      	ldr	r3, [r3, r2]
 8001742:	1dfa      	adds	r2, r7, #7
 8001744:	7812      	ldrb	r2, [r2, #0]
 8001746:	0011      	movs	r1, r2
 8001748:	2203      	movs	r2, #3
 800174a:	400a      	ands	r2, r1
 800174c:	00d2      	lsls	r2, r2, #3
 800174e:	21ff      	movs	r1, #255	; 0xff
 8001750:	4091      	lsls	r1, r2
 8001752:	000a      	movs	r2, r1
 8001754:	43d2      	mvns	r2, r2
 8001756:	401a      	ands	r2, r3
 8001758:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	019b      	lsls	r3, r3, #6
 800175e:	22ff      	movs	r2, #255	; 0xff
 8001760:	401a      	ands	r2, r3
 8001762:	1dfb      	adds	r3, r7, #7
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	0018      	movs	r0, r3
 8001768:	2303      	movs	r3, #3
 800176a:	4003      	ands	r3, r0
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001770:	481f      	ldr	r0, [pc, #124]	; (80017f0 <__NVIC_SetPriority+0xd4>)
 8001772:	1dfb      	adds	r3, r7, #7
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	b25b      	sxtb	r3, r3
 8001778:	089b      	lsrs	r3, r3, #2
 800177a:	430a      	orrs	r2, r1
 800177c:	33c0      	adds	r3, #192	; 0xc0
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001782:	e031      	b.n	80017e8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001784:	4a1b      	ldr	r2, [pc, #108]	; (80017f4 <__NVIC_SetPriority+0xd8>)
 8001786:	1dfb      	adds	r3, r7, #7
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	0019      	movs	r1, r3
 800178c:	230f      	movs	r3, #15
 800178e:	400b      	ands	r3, r1
 8001790:	3b08      	subs	r3, #8
 8001792:	089b      	lsrs	r3, r3, #2
 8001794:	3306      	adds	r3, #6
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	18d3      	adds	r3, r2, r3
 800179a:	3304      	adds	r3, #4
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	1dfa      	adds	r2, r7, #7
 80017a0:	7812      	ldrb	r2, [r2, #0]
 80017a2:	0011      	movs	r1, r2
 80017a4:	2203      	movs	r2, #3
 80017a6:	400a      	ands	r2, r1
 80017a8:	00d2      	lsls	r2, r2, #3
 80017aa:	21ff      	movs	r1, #255	; 0xff
 80017ac:	4091      	lsls	r1, r2
 80017ae:	000a      	movs	r2, r1
 80017b0:	43d2      	mvns	r2, r2
 80017b2:	401a      	ands	r2, r3
 80017b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	019b      	lsls	r3, r3, #6
 80017ba:	22ff      	movs	r2, #255	; 0xff
 80017bc:	401a      	ands	r2, r3
 80017be:	1dfb      	adds	r3, r7, #7
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	0018      	movs	r0, r3
 80017c4:	2303      	movs	r3, #3
 80017c6:	4003      	ands	r3, r0
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017cc:	4809      	ldr	r0, [pc, #36]	; (80017f4 <__NVIC_SetPriority+0xd8>)
 80017ce:	1dfb      	adds	r3, r7, #7
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	001c      	movs	r4, r3
 80017d4:	230f      	movs	r3, #15
 80017d6:	4023      	ands	r3, r4
 80017d8:	3b08      	subs	r3, #8
 80017da:	089b      	lsrs	r3, r3, #2
 80017dc:	430a      	orrs	r2, r1
 80017de:	3306      	adds	r3, #6
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	18c3      	adds	r3, r0, r3
 80017e4:	3304      	adds	r3, #4
 80017e6:	601a      	str	r2, [r3, #0]
}
 80017e8:	46c0      	nop			; (mov r8, r8)
 80017ea:	46bd      	mov	sp, r7
 80017ec:	b003      	add	sp, #12
 80017ee:	bd90      	pop	{r4, r7, pc}
 80017f0:	e000e100 	.word	0xe000e100
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	1e5a      	subs	r2, r3, #1
 8001804:	2380      	movs	r3, #128	; 0x80
 8001806:	045b      	lsls	r3, r3, #17
 8001808:	429a      	cmp	r2, r3
 800180a:	d301      	bcc.n	8001810 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800180c:	2301      	movs	r3, #1
 800180e:	e010      	b.n	8001832 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001810:	4b0a      	ldr	r3, [pc, #40]	; (800183c <SysTick_Config+0x44>)
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	3a01      	subs	r2, #1
 8001816:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001818:	2301      	movs	r3, #1
 800181a:	425b      	negs	r3, r3
 800181c:	2103      	movs	r1, #3
 800181e:	0018      	movs	r0, r3
 8001820:	f7ff ff7c 	bl	800171c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001824:	4b05      	ldr	r3, [pc, #20]	; (800183c <SysTick_Config+0x44>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800182a:	4b04      	ldr	r3, [pc, #16]	; (800183c <SysTick_Config+0x44>)
 800182c:	2207      	movs	r2, #7
 800182e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001830:	2300      	movs	r3, #0
}
 8001832:	0018      	movs	r0, r3
 8001834:	46bd      	mov	sp, r7
 8001836:	b002      	add	sp, #8
 8001838:	bd80      	pop	{r7, pc}
 800183a:	46c0      	nop			; (mov r8, r8)
 800183c:	e000e010 	.word	0xe000e010

08001840 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	60b9      	str	r1, [r7, #8]
 8001848:	607a      	str	r2, [r7, #4]
 800184a:	210f      	movs	r1, #15
 800184c:	187b      	adds	r3, r7, r1
 800184e:	1c02      	adds	r2, r0, #0
 8001850:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001852:	68ba      	ldr	r2, [r7, #8]
 8001854:	187b      	adds	r3, r7, r1
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	b25b      	sxtb	r3, r3
 800185a:	0011      	movs	r1, r2
 800185c:	0018      	movs	r0, r3
 800185e:	f7ff ff5d 	bl	800171c <__NVIC_SetPriority>
}
 8001862:	46c0      	nop			; (mov r8, r8)
 8001864:	46bd      	mov	sp, r7
 8001866:	b004      	add	sp, #16
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b082      	sub	sp, #8
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	0018      	movs	r0, r3
 8001876:	f7ff ffbf 	bl	80017f8 <SysTick_Config>
 800187a:	0003      	movs	r3, r0
}
 800187c:	0018      	movs	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	b002      	add	sp, #8
 8001882:	bd80      	pop	{r7, pc}

08001884 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001886:	b087      	sub	sp, #28
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	603a      	str	r2, [r7, #0]
 8001890:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001892:	2317      	movs	r3, #23
 8001894:	18fb      	adds	r3, r7, r3
 8001896:	2201      	movs	r2, #1
 8001898:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 800189a:	2316      	movs	r3, #22
 800189c:	18fb      	adds	r3, r7, r3
 800189e:	2200      	movs	r2, #0
 80018a0:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 80018a2:	2315      	movs	r3, #21
 80018a4:	18fb      	adds	r3, r7, r3
 80018a6:	2200      	movs	r2, #0
 80018a8:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80018aa:	4b3e      	ldr	r3, [pc, #248]	; (80019a4 <HAL_FLASH_Program+0x120>)
 80018ac:	7e1b      	ldrb	r3, [r3, #24]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d101      	bne.n	80018b6 <HAL_FLASH_Program+0x32>
 80018b2:	2302      	movs	r3, #2
 80018b4:	e072      	b.n	800199c <HAL_FLASH_Program+0x118>
 80018b6:	4b3b      	ldr	r3, [pc, #236]	; (80019a4 <HAL_FLASH_Program+0x120>)
 80018b8:	2201      	movs	r2, #1
 80018ba:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80018bc:	2317      	movs	r3, #23
 80018be:	18fe      	adds	r6, r7, r3
 80018c0:	4b39      	ldr	r3, [pc, #228]	; (80019a8 <HAL_FLASH_Program+0x124>)
 80018c2:	0018      	movs	r0, r3
 80018c4:	f000 f8c4 	bl	8001a50 <FLASH_WaitForLastOperation>
 80018c8:	0003      	movs	r3, r0
 80018ca:	7033      	strb	r3, [r6, #0]
  
  if(status == HAL_OK)
 80018cc:	2317      	movs	r3, #23
 80018ce:	18fb      	adds	r3, r7, r3
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d15c      	bne.n	8001990 <HAL_FLASH_Program+0x10c>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d104      	bne.n	80018e6 <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80018dc:	2315      	movs	r3, #21
 80018de:	18fb      	adds	r3, r7, r3
 80018e0:	2201      	movs	r2, #1
 80018e2:	701a      	strb	r2, [r3, #0]
 80018e4:	e00b      	b.n	80018fe <HAL_FLASH_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d104      	bne.n	80018f6 <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80018ec:	2315      	movs	r3, #21
 80018ee:	18fb      	adds	r3, r7, r3
 80018f0:	2202      	movs	r2, #2
 80018f2:	701a      	strb	r2, [r3, #0]
 80018f4:	e003      	b.n	80018fe <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80018f6:	2315      	movs	r3, #21
 80018f8:	18fb      	adds	r3, r7, r3
 80018fa:	2204      	movs	r2, #4
 80018fc:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 80018fe:	2316      	movs	r3, #22
 8001900:	18fb      	adds	r3, r7, r3
 8001902:	2200      	movs	r2, #0
 8001904:	701a      	strb	r2, [r3, #0]
 8001906:	e039      	b.n	800197c <HAL_FLASH_Program+0xf8>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001908:	2116      	movs	r1, #22
 800190a:	187b      	adds	r3, r7, r1
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	005a      	lsls	r2, r3, #1
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	18d0      	adds	r0, r2, r3
 8001914:	187b      	adds	r3, r7, r1
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	011b      	lsls	r3, r3, #4
 800191a:	001a      	movs	r2, r3
 800191c:	3a20      	subs	r2, #32
 800191e:	2a00      	cmp	r2, #0
 8001920:	db03      	blt.n	800192a <HAL_FLASH_Program+0xa6>
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	40d1      	lsrs	r1, r2
 8001926:	000c      	movs	r4, r1
 8001928:	e008      	b.n	800193c <HAL_FLASH_Program+0xb8>
 800192a:	2220      	movs	r2, #32
 800192c:	1ad2      	subs	r2, r2, r3
 800192e:	6879      	ldr	r1, [r7, #4]
 8001930:	4091      	lsls	r1, r2
 8001932:	000a      	movs	r2, r1
 8001934:	6839      	ldr	r1, [r7, #0]
 8001936:	40d9      	lsrs	r1, r3
 8001938:	000c      	movs	r4, r1
 800193a:	4314      	orrs	r4, r2
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	40da      	lsrs	r2, r3
 8001940:	0015      	movs	r5, r2
 8001942:	b2a3      	uxth	r3, r4
 8001944:	0019      	movs	r1, r3
 8001946:	f000 f867 	bl	8001a18 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800194a:	2317      	movs	r3, #23
 800194c:	18fe      	adds	r6, r7, r3
 800194e:	4b16      	ldr	r3, [pc, #88]	; (80019a8 <HAL_FLASH_Program+0x124>)
 8001950:	0018      	movs	r0, r3
 8001952:	f000 f87d 	bl	8001a50 <FLASH_WaitForLastOperation>
 8001956:	0003      	movs	r3, r0
 8001958:	7033      	strb	r3, [r6, #0]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800195a:	4b14      	ldr	r3, [pc, #80]	; (80019ac <HAL_FLASH_Program+0x128>)
 800195c:	691a      	ldr	r2, [r3, #16]
 800195e:	4b13      	ldr	r3, [pc, #76]	; (80019ac <HAL_FLASH_Program+0x128>)
 8001960:	2101      	movs	r1, #1
 8001962:	438a      	bics	r2, r1
 8001964:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8001966:	2317      	movs	r3, #23
 8001968:	18fb      	adds	r3, r7, r3
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d10e      	bne.n	800198e <HAL_FLASH_Program+0x10a>
    for (index = 0U; index < nbiterations; index++)
 8001970:	2116      	movs	r1, #22
 8001972:	187b      	adds	r3, r7, r1
 8001974:	781a      	ldrb	r2, [r3, #0]
 8001976:	187b      	adds	r3, r7, r1
 8001978:	3201      	adds	r2, #1
 800197a:	701a      	strb	r2, [r3, #0]
 800197c:	2316      	movs	r3, #22
 800197e:	18fa      	adds	r2, r7, r3
 8001980:	2315      	movs	r3, #21
 8001982:	18fb      	adds	r3, r7, r3
 8001984:	7812      	ldrb	r2, [r2, #0]
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	429a      	cmp	r2, r3
 800198a:	d3bd      	bcc.n	8001908 <HAL_FLASH_Program+0x84>
 800198c:	e000      	b.n	8001990 <HAL_FLASH_Program+0x10c>
      {
        break;
 800198e:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001990:	4b04      	ldr	r3, [pc, #16]	; (80019a4 <HAL_FLASH_Program+0x120>)
 8001992:	2200      	movs	r2, #0
 8001994:	761a      	strb	r2, [r3, #24]

  return status;
 8001996:	2317      	movs	r3, #23
 8001998:	18fb      	adds	r3, r7, r3
 800199a:	781b      	ldrb	r3, [r3, #0]
}
 800199c:	0018      	movs	r0, r3
 800199e:	46bd      	mov	sp, r7
 80019a0:	b007      	add	sp, #28
 80019a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019a4:	20000200 	.word	0x20000200
 80019a8:	0000c350 	.word	0x0000c350
 80019ac:	40022000 	.word	0x40022000

080019b0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80019b6:	1dfb      	adds	r3, r7, #7
 80019b8:	2200      	movs	r2, #0
 80019ba:	701a      	strb	r2, [r3, #0]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80019bc:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <HAL_FLASH_Unlock+0x40>)
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	2280      	movs	r2, #128	; 0x80
 80019c2:	4013      	ands	r3, r2
 80019c4:	d00d      	beq.n	80019e2 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80019c6:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <HAL_FLASH_Unlock+0x40>)
 80019c8:	4a0a      	ldr	r2, [pc, #40]	; (80019f4 <HAL_FLASH_Unlock+0x44>)
 80019ca:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80019cc:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <HAL_FLASH_Unlock+0x40>)
 80019ce:	4a0a      	ldr	r2, [pc, #40]	; (80019f8 <HAL_FLASH_Unlock+0x48>)
 80019d0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80019d2:	4b07      	ldr	r3, [pc, #28]	; (80019f0 <HAL_FLASH_Unlock+0x40>)
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	2280      	movs	r2, #128	; 0x80
 80019d8:	4013      	ands	r3, r2
 80019da:	d002      	beq.n	80019e2 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80019dc:	1dfb      	adds	r3, r7, #7
 80019de:	2201      	movs	r2, #1
 80019e0:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80019e2:	1dfb      	adds	r3, r7, #7
 80019e4:	781b      	ldrb	r3, [r3, #0]
}
 80019e6:	0018      	movs	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	b002      	add	sp, #8
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	46c0      	nop			; (mov r8, r8)
 80019f0:	40022000 	.word	0x40022000
 80019f4:	45670123 	.word	0x45670123
 80019f8:	cdef89ab 	.word	0xcdef89ab

080019fc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001a00:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <HAL_FLASH_Lock+0x18>)
 8001a02:	691a      	ldr	r2, [r3, #16]
 8001a04:	4b03      	ldr	r3, [pc, #12]	; (8001a14 <HAL_FLASH_Lock+0x18>)
 8001a06:	2180      	movs	r1, #128	; 0x80
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	0018      	movs	r0, r3
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40022000 	.word	0x40022000

08001a18 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	000a      	movs	r2, r1
 8001a22:	1cbb      	adds	r3, r7, #2
 8001a24:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001a26:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <FLASH_Program_HalfWord+0x30>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001a2c:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <FLASH_Program_HalfWord+0x34>)
 8001a2e:	691a      	ldr	r2, [r3, #16]
 8001a30:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <FLASH_Program_HalfWord+0x34>)
 8001a32:	2101      	movs	r1, #1
 8001a34:	430a      	orrs	r2, r1
 8001a36:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	1cba      	adds	r2, r7, #2
 8001a3c:	8812      	ldrh	r2, [r2, #0]
 8001a3e:	801a      	strh	r2, [r3, #0]
}
 8001a40:	46c0      	nop			; (mov r8, r8)
 8001a42:	46bd      	mov	sp, r7
 8001a44:	b002      	add	sp, #8
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20000200 	.word	0x20000200
 8001a4c:	40022000 	.word	0x40022000

08001a50 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001a58:	f7ff fe32 	bl	80016c0 <HAL_GetTick>
 8001a5c:	0003      	movs	r3, r0
 8001a5e:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001a60:	e00f      	b.n	8001a82 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	3301      	adds	r3, #1
 8001a66:	d00c      	beq.n	8001a82 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d007      	beq.n	8001a7e <FLASH_WaitForLastOperation+0x2e>
 8001a6e:	f7ff fe27 	bl	80016c0 <HAL_GetTick>
 8001a72:	0002      	movs	r2, r0
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d201      	bcs.n	8001a82 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e01f      	b.n	8001ac2 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001a82:	4b12      	ldr	r3, [pc, #72]	; (8001acc <FLASH_WaitForLastOperation+0x7c>)
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	2201      	movs	r2, #1
 8001a88:	4013      	ands	r3, r2
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d0e9      	beq.n	8001a62 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001a8e:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <FLASH_WaitForLastOperation+0x7c>)
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	2220      	movs	r2, #32
 8001a94:	4013      	ands	r3, r2
 8001a96:	2b20      	cmp	r3, #32
 8001a98:	d102      	bne.n	8001aa0 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001a9a:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <FLASH_WaitForLastOperation+0x7c>)
 8001a9c:	2220      	movs	r2, #32
 8001a9e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001aa0:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <FLASH_WaitForLastOperation+0x7c>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	2210      	movs	r2, #16
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	2b10      	cmp	r3, #16
 8001aaa:	d005      	beq.n	8001ab8 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001aac:	4b07      	ldr	r3, [pc, #28]	; (8001acc <FLASH_WaitForLastOperation+0x7c>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	2204      	movs	r2, #4
 8001ab2:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001ab4:	2b04      	cmp	r3, #4
 8001ab6:	d103      	bne.n	8001ac0 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001ab8:	f000 f80a 	bl	8001ad0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e000      	b.n	8001ac2 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	b004      	add	sp, #16
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	46c0      	nop			; (mov r8, r8)
 8001acc:	40022000 	.word	0x40022000

08001ad0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001ada:	4b13      	ldr	r3, [pc, #76]	; (8001b28 <FLASH_SetErrorCode+0x58>)
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	2210      	movs	r2, #16
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	2b10      	cmp	r3, #16
 8001ae4:	d109      	bne.n	8001afa <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001ae6:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <FLASH_SetErrorCode+0x5c>)
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	2202      	movs	r2, #2
 8001aec:	431a      	orrs	r2, r3
 8001aee:	4b0f      	ldr	r3, [pc, #60]	; (8001b2c <FLASH_SetErrorCode+0x5c>)
 8001af0:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2210      	movs	r2, #16
 8001af6:	4313      	orrs	r3, r2
 8001af8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001afa:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <FLASH_SetErrorCode+0x58>)
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	2204      	movs	r2, #4
 8001b00:	4013      	ands	r3, r2
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	d109      	bne.n	8001b1a <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001b06:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <FLASH_SetErrorCode+0x5c>)
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <FLASH_SetErrorCode+0x5c>)
 8001b10:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2204      	movs	r2, #4
 8001b16:	4313      	orrs	r3, r2
 8001b18:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001b1a:	4b03      	ldr	r3, [pc, #12]	; (8001b28 <FLASH_SetErrorCode+0x58>)
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	60da      	str	r2, [r3, #12]
}  
 8001b20:	46c0      	nop			; (mov r8, r8)
 8001b22:	46bd      	mov	sp, r7
 8001b24:	b002      	add	sp, #8
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40022000 	.word	0x40022000
 8001b2c:	20000200 	.word	0x20000200

08001b30 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001b30:	b5b0      	push	{r4, r5, r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001b3a:	230f      	movs	r3, #15
 8001b3c:	18fb      	adds	r3, r7, r3
 8001b3e:	2201      	movs	r2, #1
 8001b40:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 8001b42:	2300      	movs	r3, #0
 8001b44:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001b46:	4b32      	ldr	r3, [pc, #200]	; (8001c10 <HAL_FLASHEx_Erase+0xe0>)
 8001b48:	7e1b      	ldrb	r3, [r3, #24]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d101      	bne.n	8001b52 <HAL_FLASHEx_Erase+0x22>
 8001b4e:	2302      	movs	r3, #2
 8001b50:	e05a      	b.n	8001c08 <HAL_FLASHEx_Erase+0xd8>
 8001b52:	4b2f      	ldr	r3, [pc, #188]	; (8001c10 <HAL_FLASHEx_Erase+0xe0>)
 8001b54:	2201      	movs	r2, #1
 8001b56:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d116      	bne.n	8001b8e <HAL_FLASHEx_Erase+0x5e>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001b60:	4b2c      	ldr	r3, [pc, #176]	; (8001c14 <HAL_FLASHEx_Erase+0xe4>)
 8001b62:	0018      	movs	r0, r3
 8001b64:	f7ff ff74 	bl	8001a50 <FLASH_WaitForLastOperation>
 8001b68:	1e03      	subs	r3, r0, #0
 8001b6a:	d147      	bne.n	8001bfc <HAL_FLASHEx_Erase+0xcc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8001b6c:	f000 f856 	bl	8001c1c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b70:	230f      	movs	r3, #15
 8001b72:	18fc      	adds	r4, r7, r3
 8001b74:	4b27      	ldr	r3, [pc, #156]	; (8001c14 <HAL_FLASHEx_Erase+0xe4>)
 8001b76:	0018      	movs	r0, r3
 8001b78:	f7ff ff6a 	bl	8001a50 <FLASH_WaitForLastOperation>
 8001b7c:	0003      	movs	r3, r0
 8001b7e:	7023      	strb	r3, [r4, #0]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001b80:	4b25      	ldr	r3, [pc, #148]	; (8001c18 <HAL_FLASHEx_Erase+0xe8>)
 8001b82:	691a      	ldr	r2, [r3, #16]
 8001b84:	4b24      	ldr	r3, [pc, #144]	; (8001c18 <HAL_FLASHEx_Erase+0xe8>)
 8001b86:	2104      	movs	r1, #4
 8001b88:	438a      	bics	r2, r1
 8001b8a:	611a      	str	r2, [r3, #16]
 8001b8c:	e036      	b.n	8001bfc <HAL_FLASHEx_Erase+0xcc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001b8e:	4b21      	ldr	r3, [pc, #132]	; (8001c14 <HAL_FLASHEx_Erase+0xe4>)
 8001b90:	0018      	movs	r0, r3
 8001b92:	f7ff ff5d 	bl	8001a50 <FLASH_WaitForLastOperation>
 8001b96:	1e03      	subs	r3, r0, #0
 8001b98:	d130      	bne.n	8001bfc <HAL_FLASHEx_Erase+0xcc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	4252      	negs	r2, r2
 8001ba0:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	60bb      	str	r3, [r7, #8]
 8001ba8:	e01f      	b.n	8001bea <HAL_FLASHEx_Erase+0xba>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	0018      	movs	r0, r3
 8001bae:	f000 f84d 	bl	8001c4c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001bb2:	250f      	movs	r5, #15
 8001bb4:	197c      	adds	r4, r7, r5
 8001bb6:	4b17      	ldr	r3, [pc, #92]	; (8001c14 <HAL_FLASHEx_Erase+0xe4>)
 8001bb8:	0018      	movs	r0, r3
 8001bba:	f7ff ff49 	bl	8001a50 <FLASH_WaitForLastOperation>
 8001bbe:	0003      	movs	r3, r0
 8001bc0:	7023      	strb	r3, [r4, #0]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001bc2:	4b15      	ldr	r3, [pc, #84]	; (8001c18 <HAL_FLASHEx_Erase+0xe8>)
 8001bc4:	691a      	ldr	r2, [r3, #16]
 8001bc6:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <HAL_FLASHEx_Erase+0xe8>)
 8001bc8:	2102      	movs	r1, #2
 8001bca:	438a      	bics	r2, r1
 8001bcc:	611a      	str	r2, [r3, #16]
          
          if (status != HAL_OK)
 8001bce:	197b      	adds	r3, r7, r5
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_FLASHEx_Erase+0xae>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	68ba      	ldr	r2, [r7, #8]
 8001bda:	601a      	str	r2, [r3, #0]
            break;
 8001bdc:	e00e      	b.n	8001bfc <HAL_FLASHEx_Erase+0xcc>
            address += FLASH_PAGE_SIZE)
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	2280      	movs	r2, #128	; 0x80
 8001be2:	00d2      	lsls	r2, r2, #3
 8001be4:	4694      	mov	ip, r2
 8001be6:	4463      	add	r3, ip
 8001be8:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	029a      	lsls	r2, r3, #10
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	18d3      	adds	r3, r2, r3
        for(address = pEraseInit->PageAddress;
 8001bf6:	68ba      	ldr	r2, [r7, #8]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d3d6      	bcc.n	8001baa <HAL_FLASHEx_Erase+0x7a>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001bfc:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <HAL_FLASHEx_Erase+0xe0>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	761a      	strb	r2, [r3, #24]

  return status;
 8001c02:	230f      	movs	r3, #15
 8001c04:	18fb      	adds	r3, r7, r3
 8001c06:	781b      	ldrb	r3, [r3, #0]
}
 8001c08:	0018      	movs	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	b004      	add	sp, #16
 8001c0e:	bdb0      	pop	{r4, r5, r7, pc}
 8001c10:	20000200 	.word	0x20000200
 8001c14:	0000c350 	.word	0x0000c350
 8001c18:	40022000 	.word	0x40022000

08001c1c <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001c20:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <FLASH_MassErase+0x28>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001c26:	4b08      	ldr	r3, [pc, #32]	; (8001c48 <FLASH_MassErase+0x2c>)
 8001c28:	691a      	ldr	r2, [r3, #16]
 8001c2a:	4b07      	ldr	r3, [pc, #28]	; (8001c48 <FLASH_MassErase+0x2c>)
 8001c2c:	2104      	movs	r1, #4
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001c32:	4b05      	ldr	r3, [pc, #20]	; (8001c48 <FLASH_MassErase+0x2c>)
 8001c34:	691a      	ldr	r2, [r3, #16]
 8001c36:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <FLASH_MassErase+0x2c>)
 8001c38:	2140      	movs	r1, #64	; 0x40
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	611a      	str	r2, [r3, #16]
}
 8001c3e:	46c0      	nop			; (mov r8, r8)
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20000200 	.word	0x20000200
 8001c48:	40022000 	.word	0x40022000

08001c4c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001c54:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <FLASH_PageErase+0x34>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001c5a:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <FLASH_PageErase+0x38>)
 8001c5c:	691a      	ldr	r2, [r3, #16]
 8001c5e:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <FLASH_PageErase+0x38>)
 8001c60:	2102      	movs	r1, #2
 8001c62:	430a      	orrs	r2, r1
 8001c64:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001c66:	4b07      	ldr	r3, [pc, #28]	; (8001c84 <FLASH_PageErase+0x38>)
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001c6c:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <FLASH_PageErase+0x38>)
 8001c6e:	691a      	ldr	r2, [r3, #16]
 8001c70:	4b04      	ldr	r3, [pc, #16]	; (8001c84 <FLASH_PageErase+0x38>)
 8001c72:	2140      	movs	r1, #64	; 0x40
 8001c74:	430a      	orrs	r2, r1
 8001c76:	611a      	str	r2, [r3, #16]
}
 8001c78:	46c0      	nop			; (mov r8, r8)
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	b002      	add	sp, #8
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	20000200 	.word	0x20000200
 8001c84:	40022000 	.word	0x40022000

08001c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c92:	2300      	movs	r3, #0
 8001c94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c96:	e14f      	b.n	8001f38 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	4091      	lsls	r1, r2
 8001ca2:	000a      	movs	r2, r1
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d100      	bne.n	8001cb0 <HAL_GPIO_Init+0x28>
 8001cae:	e140      	b.n	8001f32 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	2203      	movs	r2, #3
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d005      	beq.n	8001cc8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	2203      	movs	r2, #3
 8001cc2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d130      	bne.n	8001d2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	2203      	movs	r2, #3
 8001cd4:	409a      	lsls	r2, r3
 8001cd6:	0013      	movs	r3, r2
 8001cd8:	43da      	mvns	r2, r3
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	68da      	ldr	r2, [r3, #12]
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	409a      	lsls	r2, r3
 8001cea:	0013      	movs	r3, r2
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cfe:	2201      	movs	r2, #1
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	409a      	lsls	r2, r3
 8001d04:	0013      	movs	r3, r2
 8001d06:	43da      	mvns	r2, r3
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	091b      	lsrs	r3, r3, #4
 8001d14:	2201      	movs	r2, #1
 8001d16:	401a      	ands	r2, r3
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	409a      	lsls	r2, r3
 8001d1c:	0013      	movs	r3, r2
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	2203      	movs	r2, #3
 8001d30:	4013      	ands	r3, r2
 8001d32:	2b03      	cmp	r3, #3
 8001d34:	d017      	beq.n	8001d66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	2203      	movs	r2, #3
 8001d42:	409a      	lsls	r2, r3
 8001d44:	0013      	movs	r3, r2
 8001d46:	43da      	mvns	r2, r3
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	689a      	ldr	r2, [r3, #8]
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	409a      	lsls	r2, r3
 8001d58:	0013      	movs	r3, r2
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d123      	bne.n	8001dba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	08da      	lsrs	r2, r3, #3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	3208      	adds	r2, #8
 8001d7a:	0092      	lsls	r2, r2, #2
 8001d7c:	58d3      	ldr	r3, [r2, r3]
 8001d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	2207      	movs	r2, #7
 8001d84:	4013      	ands	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	220f      	movs	r2, #15
 8001d8a:	409a      	lsls	r2, r3
 8001d8c:	0013      	movs	r3, r2
 8001d8e:	43da      	mvns	r2, r3
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	4013      	ands	r3, r2
 8001d94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	691a      	ldr	r2, [r3, #16]
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	2107      	movs	r1, #7
 8001d9e:	400b      	ands	r3, r1
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	409a      	lsls	r2, r3
 8001da4:	0013      	movs	r3, r2
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	08da      	lsrs	r2, r3, #3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3208      	adds	r2, #8
 8001db4:	0092      	lsls	r2, r2, #2
 8001db6:	6939      	ldr	r1, [r7, #16]
 8001db8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	2203      	movs	r2, #3
 8001dc6:	409a      	lsls	r2, r3
 8001dc8:	0013      	movs	r3, r2
 8001dca:	43da      	mvns	r2, r3
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	2203      	movs	r2, #3
 8001dd8:	401a      	ands	r2, r3
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	409a      	lsls	r2, r3
 8001de0:	0013      	movs	r3, r2
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	23c0      	movs	r3, #192	; 0xc0
 8001df4:	029b      	lsls	r3, r3, #10
 8001df6:	4013      	ands	r3, r2
 8001df8:	d100      	bne.n	8001dfc <HAL_GPIO_Init+0x174>
 8001dfa:	e09a      	b.n	8001f32 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfc:	4b54      	ldr	r3, [pc, #336]	; (8001f50 <HAL_GPIO_Init+0x2c8>)
 8001dfe:	699a      	ldr	r2, [r3, #24]
 8001e00:	4b53      	ldr	r3, [pc, #332]	; (8001f50 <HAL_GPIO_Init+0x2c8>)
 8001e02:	2101      	movs	r1, #1
 8001e04:	430a      	orrs	r2, r1
 8001e06:	619a      	str	r2, [r3, #24]
 8001e08:	4b51      	ldr	r3, [pc, #324]	; (8001f50 <HAL_GPIO_Init+0x2c8>)
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	4013      	ands	r3, r2
 8001e10:	60bb      	str	r3, [r7, #8]
 8001e12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e14:	4a4f      	ldr	r2, [pc, #316]	; (8001f54 <HAL_GPIO_Init+0x2cc>)
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	089b      	lsrs	r3, r3, #2
 8001e1a:	3302      	adds	r3, #2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	589b      	ldr	r3, [r3, r2]
 8001e20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	2203      	movs	r2, #3
 8001e26:	4013      	ands	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	220f      	movs	r2, #15
 8001e2c:	409a      	lsls	r2, r3
 8001e2e:	0013      	movs	r3, r2
 8001e30:	43da      	mvns	r2, r3
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	4013      	ands	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	2390      	movs	r3, #144	; 0x90
 8001e3c:	05db      	lsls	r3, r3, #23
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d013      	beq.n	8001e6a <HAL_GPIO_Init+0x1e2>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a44      	ldr	r2, [pc, #272]	; (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d00d      	beq.n	8001e66 <HAL_GPIO_Init+0x1de>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a43      	ldr	r2, [pc, #268]	; (8001f5c <HAL_GPIO_Init+0x2d4>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d007      	beq.n	8001e62 <HAL_GPIO_Init+0x1da>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a42      	ldr	r2, [pc, #264]	; (8001f60 <HAL_GPIO_Init+0x2d8>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d101      	bne.n	8001e5e <HAL_GPIO_Init+0x1d6>
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e006      	b.n	8001e6c <HAL_GPIO_Init+0x1e4>
 8001e5e:	2305      	movs	r3, #5
 8001e60:	e004      	b.n	8001e6c <HAL_GPIO_Init+0x1e4>
 8001e62:	2302      	movs	r3, #2
 8001e64:	e002      	b.n	8001e6c <HAL_GPIO_Init+0x1e4>
 8001e66:	2301      	movs	r3, #1
 8001e68:	e000      	b.n	8001e6c <HAL_GPIO_Init+0x1e4>
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	2103      	movs	r1, #3
 8001e70:	400a      	ands	r2, r1
 8001e72:	0092      	lsls	r2, r2, #2
 8001e74:	4093      	lsls	r3, r2
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e7c:	4935      	ldr	r1, [pc, #212]	; (8001f54 <HAL_GPIO_Init+0x2cc>)
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	089b      	lsrs	r3, r3, #2
 8001e82:	3302      	adds	r3, #2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e8a:	4b36      	ldr	r3, [pc, #216]	; (8001f64 <HAL_GPIO_Init+0x2dc>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	43da      	mvns	r2, r3
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	4013      	ands	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685a      	ldr	r2, [r3, #4]
 8001e9e:	2380      	movs	r3, #128	; 0x80
 8001ea0:	025b      	lsls	r3, r3, #9
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	d003      	beq.n	8001eae <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001eae:	4b2d      	ldr	r3, [pc, #180]	; (8001f64 <HAL_GPIO_Init+0x2dc>)
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001eb4:	4b2b      	ldr	r3, [pc, #172]	; (8001f64 <HAL_GPIO_Init+0x2dc>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	43da      	mvns	r2, r3
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	2380      	movs	r3, #128	; 0x80
 8001eca:	029b      	lsls	r3, r3, #10
 8001ecc:	4013      	ands	r3, r2
 8001ece:	d003      	beq.n	8001ed8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ed8:	4b22      	ldr	r3, [pc, #136]	; (8001f64 <HAL_GPIO_Init+0x2dc>)
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ede:	4b21      	ldr	r3, [pc, #132]	; (8001f64 <HAL_GPIO_Init+0x2dc>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	43da      	mvns	r2, r3
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	4013      	ands	r3, r2
 8001eec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	2380      	movs	r3, #128	; 0x80
 8001ef4:	035b      	lsls	r3, r3, #13
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d003      	beq.n	8001f02 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f02:	4b18      	ldr	r3, [pc, #96]	; (8001f64 <HAL_GPIO_Init+0x2dc>)
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001f08:	4b16      	ldr	r3, [pc, #88]	; (8001f64 <HAL_GPIO_Init+0x2dc>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	43da      	mvns	r2, r3
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	4013      	ands	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	2380      	movs	r3, #128	; 0x80
 8001f1e:	039b      	lsls	r3, r3, #14
 8001f20:	4013      	ands	r3, r2
 8001f22:	d003      	beq.n	8001f2c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f2c:	4b0d      	ldr	r3, [pc, #52]	; (8001f64 <HAL_GPIO_Init+0x2dc>)
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	3301      	adds	r3, #1
 8001f36:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	40da      	lsrs	r2, r3
 8001f40:	1e13      	subs	r3, r2, #0
 8001f42:	d000      	beq.n	8001f46 <HAL_GPIO_Init+0x2be>
 8001f44:	e6a8      	b.n	8001c98 <HAL_GPIO_Init+0x10>
  } 
}
 8001f46:	46c0      	nop			; (mov r8, r8)
 8001f48:	46c0      	nop			; (mov r8, r8)
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	b006      	add	sp, #24
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40021000 	.word	0x40021000
 8001f54:	40010000 	.word	0x40010000
 8001f58:	48000400 	.word	0x48000400
 8001f5c:	48000800 	.word	0x48000800
 8001f60:	48000c00 	.word	0x48000c00
 8001f64:	40010400 	.word	0x40010400

08001f68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	000a      	movs	r2, r1
 8001f72:	1cbb      	adds	r3, r7, #2
 8001f74:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	1cba      	adds	r2, r7, #2
 8001f7c:	8812      	ldrh	r2, [r2, #0]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	d004      	beq.n	8001f8c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001f82:	230f      	movs	r3, #15
 8001f84:	18fb      	adds	r3, r7, r3
 8001f86:	2201      	movs	r2, #1
 8001f88:	701a      	strb	r2, [r3, #0]
 8001f8a:	e003      	b.n	8001f94 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f8c:	230f      	movs	r3, #15
 8001f8e:	18fb      	adds	r3, r7, r3
 8001f90:	2200      	movs	r2, #0
 8001f92:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001f94:	230f      	movs	r3, #15
 8001f96:	18fb      	adds	r3, r7, r3
 8001f98:	781b      	ldrb	r3, [r3, #0]
  }
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	b004      	add	sp, #16
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b082      	sub	sp, #8
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
 8001faa:	0008      	movs	r0, r1
 8001fac:	0011      	movs	r1, r2
 8001fae:	1cbb      	adds	r3, r7, #2
 8001fb0:	1c02      	adds	r2, r0, #0
 8001fb2:	801a      	strh	r2, [r3, #0]
 8001fb4:	1c7b      	adds	r3, r7, #1
 8001fb6:	1c0a      	adds	r2, r1, #0
 8001fb8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fba:	1c7b      	adds	r3, r7, #1
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d004      	beq.n	8001fcc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fc2:	1cbb      	adds	r3, r7, #2
 8001fc4:	881a      	ldrh	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fca:	e003      	b.n	8001fd4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fcc:	1cbb      	adds	r3, r7, #2
 8001fce:	881a      	ldrh	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fd4:	46c0      	nop			; (mov r8, r8)
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	b002      	add	sp, #8
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e082      	b.n	80020f4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2241      	movs	r2, #65	; 0x41
 8001ff2:	5c9b      	ldrb	r3, [r3, r2]
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d107      	bne.n	800200a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2240      	movs	r2, #64	; 0x40
 8001ffe:	2100      	movs	r1, #0
 8002000:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	0018      	movs	r0, r3
 8002006:	f7ff fa39 	bl	800147c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2241      	movs	r2, #65	; 0x41
 800200e:	2124      	movs	r1, #36	; 0x24
 8002010:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2101      	movs	r1, #1
 800201e:	438a      	bics	r2, r1
 8002020:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4934      	ldr	r1, [pc, #208]	; (80020fc <HAL_I2C_Init+0x120>)
 800202c:	400a      	ands	r2, r1
 800202e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689a      	ldr	r2, [r3, #8]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4931      	ldr	r1, [pc, #196]	; (8002100 <HAL_I2C_Init+0x124>)
 800203c:	400a      	ands	r2, r1
 800203e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d108      	bne.n	800205a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2180      	movs	r1, #128	; 0x80
 8002052:	0209      	lsls	r1, r1, #8
 8002054:	430a      	orrs	r2, r1
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	e007      	b.n	800206a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2184      	movs	r1, #132	; 0x84
 8002064:	0209      	lsls	r1, r1, #8
 8002066:	430a      	orrs	r2, r1
 8002068:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	2b02      	cmp	r3, #2
 8002070:	d104      	bne.n	800207c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2280      	movs	r2, #128	; 0x80
 8002078:	0112      	lsls	r2, r2, #4
 800207a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	491f      	ldr	r1, [pc, #124]	; (8002104 <HAL_I2C_Init+0x128>)
 8002088:	430a      	orrs	r2, r1
 800208a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68da      	ldr	r2, [r3, #12]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	491a      	ldr	r1, [pc, #104]	; (8002100 <HAL_I2C_Init+0x124>)
 8002098:	400a      	ands	r2, r1
 800209a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691a      	ldr	r2, [r3, #16]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	431a      	orrs	r2, r3
 80020a6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	430a      	orrs	r2, r1
 80020b4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	69d9      	ldr	r1, [r3, #28]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a1a      	ldr	r2, [r3, #32]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	430a      	orrs	r2, r1
 80020c4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2101      	movs	r1, #1
 80020d2:	430a      	orrs	r2, r1
 80020d4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2241      	movs	r2, #65	; 0x41
 80020e0:	2120      	movs	r1, #32
 80020e2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2242      	movs	r2, #66	; 0x42
 80020ee:	2100      	movs	r1, #0
 80020f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	0018      	movs	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	b002      	add	sp, #8
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	f0ffffff 	.word	0xf0ffffff
 8002100:	ffff7fff 	.word	0xffff7fff
 8002104:	02008000 	.word	0x02008000

08002108 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002108:	b590      	push	{r4, r7, lr}
 800210a:	b089      	sub	sp, #36	; 0x24
 800210c:	af02      	add	r7, sp, #8
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	0008      	movs	r0, r1
 8002112:	607a      	str	r2, [r7, #4]
 8002114:	0019      	movs	r1, r3
 8002116:	230a      	movs	r3, #10
 8002118:	18fb      	adds	r3, r7, r3
 800211a:	1c02      	adds	r2, r0, #0
 800211c:	801a      	strh	r2, [r3, #0]
 800211e:	2308      	movs	r3, #8
 8002120:	18fb      	adds	r3, r7, r3
 8002122:	1c0a      	adds	r2, r1, #0
 8002124:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2241      	movs	r2, #65	; 0x41
 800212a:	5c9b      	ldrb	r3, [r3, r2]
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b20      	cmp	r3, #32
 8002130:	d000      	beq.n	8002134 <HAL_I2C_Master_Transmit+0x2c>
 8002132:	e0e7      	b.n	8002304 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2240      	movs	r2, #64	; 0x40
 8002138:	5c9b      	ldrb	r3, [r3, r2]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d101      	bne.n	8002142 <HAL_I2C_Master_Transmit+0x3a>
 800213e:	2302      	movs	r3, #2
 8002140:	e0e1      	b.n	8002306 <HAL_I2C_Master_Transmit+0x1fe>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2240      	movs	r2, #64	; 0x40
 8002146:	2101      	movs	r1, #1
 8002148:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800214a:	f7ff fab9 	bl	80016c0 <HAL_GetTick>
 800214e:	0003      	movs	r3, r0
 8002150:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002152:	2380      	movs	r3, #128	; 0x80
 8002154:	0219      	lsls	r1, r3, #8
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	2319      	movs	r3, #25
 800215e:	2201      	movs	r2, #1
 8002160:	f000 fc24 	bl	80029ac <I2C_WaitOnFlagUntilTimeout>
 8002164:	1e03      	subs	r3, r0, #0
 8002166:	d001      	beq.n	800216c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e0cc      	b.n	8002306 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2241      	movs	r2, #65	; 0x41
 8002170:	2121      	movs	r1, #33	; 0x21
 8002172:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2242      	movs	r2, #66	; 0x42
 8002178:	2110      	movs	r1, #16
 800217a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2208      	movs	r2, #8
 800218c:	18ba      	adds	r2, r7, r2
 800218e:	8812      	ldrh	r2, [r2, #0]
 8002190:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2200      	movs	r2, #0
 8002196:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800219c:	b29b      	uxth	r3, r3
 800219e:	2bff      	cmp	r3, #255	; 0xff
 80021a0:	d911      	bls.n	80021c6 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	22ff      	movs	r2, #255	; 0xff
 80021a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ac:	b2da      	uxtb	r2, r3
 80021ae:	2380      	movs	r3, #128	; 0x80
 80021b0:	045c      	lsls	r4, r3, #17
 80021b2:	230a      	movs	r3, #10
 80021b4:	18fb      	adds	r3, r7, r3
 80021b6:	8819      	ldrh	r1, [r3, #0]
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	4b55      	ldr	r3, [pc, #340]	; (8002310 <HAL_I2C_Master_Transmit+0x208>)
 80021bc:	9300      	str	r3, [sp, #0]
 80021be:	0023      	movs	r3, r4
 80021c0:	f000 fd28 	bl	8002c14 <I2C_TransferConfig>
 80021c4:	e075      	b.n	80022b2 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	2380      	movs	r3, #128	; 0x80
 80021d8:	049c      	lsls	r4, r3, #18
 80021da:	230a      	movs	r3, #10
 80021dc:	18fb      	adds	r3, r7, r3
 80021de:	8819      	ldrh	r1, [r3, #0]
 80021e0:	68f8      	ldr	r0, [r7, #12]
 80021e2:	4b4b      	ldr	r3, [pc, #300]	; (8002310 <HAL_I2C_Master_Transmit+0x208>)
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	0023      	movs	r3, r4
 80021e8:	f000 fd14 	bl	8002c14 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80021ec:	e061      	b.n	80022b2 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	0018      	movs	r0, r3
 80021f6:	f000 fc18 	bl	8002a2a <I2C_WaitOnTXISFlagUntilTimeout>
 80021fa:	1e03      	subs	r3, r0, #0
 80021fc:	d001      	beq.n	8002202 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e081      	b.n	8002306 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002206:	781a      	ldrb	r2, [r3, #0]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002212:	1c5a      	adds	r2, r3, #1
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800221c:	b29b      	uxth	r3, r3
 800221e:	3b01      	subs	r3, #1
 8002220:	b29a      	uxth	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800222a:	3b01      	subs	r3, #1
 800222c:	b29a      	uxth	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002236:	b29b      	uxth	r3, r3
 8002238:	2b00      	cmp	r3, #0
 800223a:	d03a      	beq.n	80022b2 <HAL_I2C_Master_Transmit+0x1aa>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002240:	2b00      	cmp	r3, #0
 8002242:	d136      	bne.n	80022b2 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002244:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002246:	68f8      	ldr	r0, [r7, #12]
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	0013      	movs	r3, r2
 800224e:	2200      	movs	r2, #0
 8002250:	2180      	movs	r1, #128	; 0x80
 8002252:	f000 fbab 	bl	80029ac <I2C_WaitOnFlagUntilTimeout>
 8002256:	1e03      	subs	r3, r0, #0
 8002258:	d001      	beq.n	800225e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e053      	b.n	8002306 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002262:	b29b      	uxth	r3, r3
 8002264:	2bff      	cmp	r3, #255	; 0xff
 8002266:	d911      	bls.n	800228c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	22ff      	movs	r2, #255	; 0xff
 800226c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002272:	b2da      	uxtb	r2, r3
 8002274:	2380      	movs	r3, #128	; 0x80
 8002276:	045c      	lsls	r4, r3, #17
 8002278:	230a      	movs	r3, #10
 800227a:	18fb      	adds	r3, r7, r3
 800227c:	8819      	ldrh	r1, [r3, #0]
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	2300      	movs	r3, #0
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	0023      	movs	r3, r4
 8002286:	f000 fcc5 	bl	8002c14 <I2C_TransferConfig>
 800228a:	e012      	b.n	80022b2 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002290:	b29a      	uxth	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800229a:	b2da      	uxtb	r2, r3
 800229c:	2380      	movs	r3, #128	; 0x80
 800229e:	049c      	lsls	r4, r3, #18
 80022a0:	230a      	movs	r3, #10
 80022a2:	18fb      	adds	r3, r7, r3
 80022a4:	8819      	ldrh	r1, [r3, #0]
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	2300      	movs	r3, #0
 80022aa:	9300      	str	r3, [sp, #0]
 80022ac:	0023      	movs	r3, r4
 80022ae:	f000 fcb1 	bl	8002c14 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d198      	bne.n	80021ee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022bc:	697a      	ldr	r2, [r7, #20]
 80022be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	0018      	movs	r0, r3
 80022c4:	f000 fbf0 	bl	8002aa8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80022c8:	1e03      	subs	r3, r0, #0
 80022ca:	d001      	beq.n	80022d0 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e01a      	b.n	8002306 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2220      	movs	r2, #32
 80022d6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	685a      	ldr	r2, [r3, #4]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	490c      	ldr	r1, [pc, #48]	; (8002314 <HAL_I2C_Master_Transmit+0x20c>)
 80022e4:	400a      	ands	r2, r1
 80022e6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2241      	movs	r2, #65	; 0x41
 80022ec:	2120      	movs	r1, #32
 80022ee:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2242      	movs	r2, #66	; 0x42
 80022f4:	2100      	movs	r1, #0
 80022f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2240      	movs	r2, #64	; 0x40
 80022fc:	2100      	movs	r1, #0
 80022fe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002300:	2300      	movs	r3, #0
 8002302:	e000      	b.n	8002306 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8002304:	2302      	movs	r3, #2
  }
}
 8002306:	0018      	movs	r0, r3
 8002308:	46bd      	mov	sp, r7
 800230a:	b007      	add	sp, #28
 800230c:	bd90      	pop	{r4, r7, pc}
 800230e:	46c0      	nop			; (mov r8, r8)
 8002310:	80002000 	.word	0x80002000
 8002314:	fe00e800 	.word	0xfe00e800

08002318 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002318:	b590      	push	{r4, r7, lr}
 800231a:	b089      	sub	sp, #36	; 0x24
 800231c:	af02      	add	r7, sp, #8
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	000c      	movs	r4, r1
 8002322:	0010      	movs	r0, r2
 8002324:	0019      	movs	r1, r3
 8002326:	230a      	movs	r3, #10
 8002328:	18fb      	adds	r3, r7, r3
 800232a:	1c22      	adds	r2, r4, #0
 800232c:	801a      	strh	r2, [r3, #0]
 800232e:	2308      	movs	r3, #8
 8002330:	18fb      	adds	r3, r7, r3
 8002332:	1c02      	adds	r2, r0, #0
 8002334:	801a      	strh	r2, [r3, #0]
 8002336:	1dbb      	adds	r3, r7, #6
 8002338:	1c0a      	adds	r2, r1, #0
 800233a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2241      	movs	r2, #65	; 0x41
 8002340:	5c9b      	ldrb	r3, [r3, r2]
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b20      	cmp	r3, #32
 8002346:	d000      	beq.n	800234a <HAL_I2C_Mem_Write+0x32>
 8002348:	e10c      	b.n	8002564 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800234a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800234c:	2b00      	cmp	r3, #0
 800234e:	d004      	beq.n	800235a <HAL_I2C_Mem_Write+0x42>
 8002350:	232c      	movs	r3, #44	; 0x2c
 8002352:	18fb      	adds	r3, r7, r3
 8002354:	881b      	ldrh	r3, [r3, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d105      	bne.n	8002366 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2280      	movs	r2, #128	; 0x80
 800235e:	0092      	lsls	r2, r2, #2
 8002360:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e0ff      	b.n	8002566 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2240      	movs	r2, #64	; 0x40
 800236a:	5c9b      	ldrb	r3, [r3, r2]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d101      	bne.n	8002374 <HAL_I2C_Mem_Write+0x5c>
 8002370:	2302      	movs	r3, #2
 8002372:	e0f8      	b.n	8002566 <HAL_I2C_Mem_Write+0x24e>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2240      	movs	r2, #64	; 0x40
 8002378:	2101      	movs	r1, #1
 800237a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800237c:	f7ff f9a0 	bl	80016c0 <HAL_GetTick>
 8002380:	0003      	movs	r3, r0
 8002382:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002384:	2380      	movs	r3, #128	; 0x80
 8002386:	0219      	lsls	r1, r3, #8
 8002388:	68f8      	ldr	r0, [r7, #12]
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	2319      	movs	r3, #25
 8002390:	2201      	movs	r2, #1
 8002392:	f000 fb0b 	bl	80029ac <I2C_WaitOnFlagUntilTimeout>
 8002396:	1e03      	subs	r3, r0, #0
 8002398:	d001      	beq.n	800239e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e0e3      	b.n	8002566 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2241      	movs	r2, #65	; 0x41
 80023a2:	2121      	movs	r1, #33	; 0x21
 80023a4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2242      	movs	r2, #66	; 0x42
 80023aa:	2140      	movs	r1, #64	; 0x40
 80023ac:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	222c      	movs	r2, #44	; 0x2c
 80023be:	18ba      	adds	r2, r7, r2
 80023c0:	8812      	ldrh	r2, [r2, #0]
 80023c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023ca:	1dbb      	adds	r3, r7, #6
 80023cc:	881c      	ldrh	r4, [r3, #0]
 80023ce:	2308      	movs	r3, #8
 80023d0:	18fb      	adds	r3, r7, r3
 80023d2:	881a      	ldrh	r2, [r3, #0]
 80023d4:	230a      	movs	r3, #10
 80023d6:	18fb      	adds	r3, r7, r3
 80023d8:	8819      	ldrh	r1, [r3, #0]
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	9301      	str	r3, [sp, #4]
 80023e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	0023      	movs	r3, r4
 80023e6:	f000 f9f9 	bl	80027dc <I2C_RequestMemoryWrite>
 80023ea:	1e03      	subs	r3, r0, #0
 80023ec:	d005      	beq.n	80023fa <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2240      	movs	r2, #64	; 0x40
 80023f2:	2100      	movs	r1, #0
 80023f4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e0b5      	b.n	8002566 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fe:	b29b      	uxth	r3, r3
 8002400:	2bff      	cmp	r3, #255	; 0xff
 8002402:	d911      	bls.n	8002428 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	22ff      	movs	r2, #255	; 0xff
 8002408:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800240e:	b2da      	uxtb	r2, r3
 8002410:	2380      	movs	r3, #128	; 0x80
 8002412:	045c      	lsls	r4, r3, #17
 8002414:	230a      	movs	r3, #10
 8002416:	18fb      	adds	r3, r7, r3
 8002418:	8819      	ldrh	r1, [r3, #0]
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	2300      	movs	r3, #0
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	0023      	movs	r3, r4
 8002422:	f000 fbf7 	bl	8002c14 <I2C_TransferConfig>
 8002426:	e012      	b.n	800244e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800242c:	b29a      	uxth	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002436:	b2da      	uxtb	r2, r3
 8002438:	2380      	movs	r3, #128	; 0x80
 800243a:	049c      	lsls	r4, r3, #18
 800243c:	230a      	movs	r3, #10
 800243e:	18fb      	adds	r3, r7, r3
 8002440:	8819      	ldrh	r1, [r3, #0]
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	2300      	movs	r3, #0
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	0023      	movs	r3, r4
 800244a:	f000 fbe3 	bl	8002c14 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	0018      	movs	r0, r3
 8002456:	f000 fae8 	bl	8002a2a <I2C_WaitOnTXISFlagUntilTimeout>
 800245a:	1e03      	subs	r3, r0, #0
 800245c:	d001      	beq.n	8002462 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e081      	b.n	8002566 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002466:	781a      	ldrb	r2, [r3, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002472:	1c5a      	adds	r2, r3, #1
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800247c:	b29b      	uxth	r3, r3
 800247e:	3b01      	subs	r3, #1
 8002480:	b29a      	uxth	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800248a:	3b01      	subs	r3, #1
 800248c:	b29a      	uxth	r2, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002496:	b29b      	uxth	r3, r3
 8002498:	2b00      	cmp	r3, #0
 800249a:	d03a      	beq.n	8002512 <HAL_I2C_Mem_Write+0x1fa>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d136      	bne.n	8002512 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	0013      	movs	r3, r2
 80024ae:	2200      	movs	r2, #0
 80024b0:	2180      	movs	r1, #128	; 0x80
 80024b2:	f000 fa7b 	bl	80029ac <I2C_WaitOnFlagUntilTimeout>
 80024b6:	1e03      	subs	r3, r0, #0
 80024b8:	d001      	beq.n	80024be <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e053      	b.n	8002566 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	2bff      	cmp	r3, #255	; 0xff
 80024c6:	d911      	bls.n	80024ec <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	22ff      	movs	r2, #255	; 0xff
 80024cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d2:	b2da      	uxtb	r2, r3
 80024d4:	2380      	movs	r3, #128	; 0x80
 80024d6:	045c      	lsls	r4, r3, #17
 80024d8:	230a      	movs	r3, #10
 80024da:	18fb      	adds	r3, r7, r3
 80024dc:	8819      	ldrh	r1, [r3, #0]
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	2300      	movs	r3, #0
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	0023      	movs	r3, r4
 80024e6:	f000 fb95 	bl	8002c14 <I2C_TransferConfig>
 80024ea:	e012      	b.n	8002512 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	2380      	movs	r3, #128	; 0x80
 80024fe:	049c      	lsls	r4, r3, #18
 8002500:	230a      	movs	r3, #10
 8002502:	18fb      	adds	r3, r7, r3
 8002504:	8819      	ldrh	r1, [r3, #0]
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	2300      	movs	r3, #0
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	0023      	movs	r3, r4
 800250e:	f000 fb81 	bl	8002c14 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002516:	b29b      	uxth	r3, r3
 8002518:	2b00      	cmp	r3, #0
 800251a:	d198      	bne.n	800244e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	0018      	movs	r0, r3
 8002524:	f000 fac0 	bl	8002aa8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002528:	1e03      	subs	r3, r0, #0
 800252a:	d001      	beq.n	8002530 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e01a      	b.n	8002566 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2220      	movs	r2, #32
 8002536:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	685a      	ldr	r2, [r3, #4]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	490b      	ldr	r1, [pc, #44]	; (8002570 <HAL_I2C_Mem_Write+0x258>)
 8002544:	400a      	ands	r2, r1
 8002546:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2241      	movs	r2, #65	; 0x41
 800254c:	2120      	movs	r1, #32
 800254e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2242      	movs	r2, #66	; 0x42
 8002554:	2100      	movs	r1, #0
 8002556:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2240      	movs	r2, #64	; 0x40
 800255c:	2100      	movs	r1, #0
 800255e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002560:	2300      	movs	r3, #0
 8002562:	e000      	b.n	8002566 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8002564:	2302      	movs	r3, #2
  }
}
 8002566:	0018      	movs	r0, r3
 8002568:	46bd      	mov	sp, r7
 800256a:	b007      	add	sp, #28
 800256c:	bd90      	pop	{r4, r7, pc}
 800256e:	46c0      	nop			; (mov r8, r8)
 8002570:	fe00e800 	.word	0xfe00e800

08002574 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002574:	b590      	push	{r4, r7, lr}
 8002576:	b089      	sub	sp, #36	; 0x24
 8002578:	af02      	add	r7, sp, #8
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	000c      	movs	r4, r1
 800257e:	0010      	movs	r0, r2
 8002580:	0019      	movs	r1, r3
 8002582:	230a      	movs	r3, #10
 8002584:	18fb      	adds	r3, r7, r3
 8002586:	1c22      	adds	r2, r4, #0
 8002588:	801a      	strh	r2, [r3, #0]
 800258a:	2308      	movs	r3, #8
 800258c:	18fb      	adds	r3, r7, r3
 800258e:	1c02      	adds	r2, r0, #0
 8002590:	801a      	strh	r2, [r3, #0]
 8002592:	1dbb      	adds	r3, r7, #6
 8002594:	1c0a      	adds	r2, r1, #0
 8002596:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2241      	movs	r2, #65	; 0x41
 800259c:	5c9b      	ldrb	r3, [r3, r2]
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b20      	cmp	r3, #32
 80025a2:	d000      	beq.n	80025a6 <HAL_I2C_Mem_Read+0x32>
 80025a4:	e110      	b.n	80027c8 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80025a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d004      	beq.n	80025b6 <HAL_I2C_Mem_Read+0x42>
 80025ac:	232c      	movs	r3, #44	; 0x2c
 80025ae:	18fb      	adds	r3, r7, r3
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d105      	bne.n	80025c2 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2280      	movs	r2, #128	; 0x80
 80025ba:	0092      	lsls	r2, r2, #2
 80025bc:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e103      	b.n	80027ca <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2240      	movs	r2, #64	; 0x40
 80025c6:	5c9b      	ldrb	r3, [r3, r2]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d101      	bne.n	80025d0 <HAL_I2C_Mem_Read+0x5c>
 80025cc:	2302      	movs	r3, #2
 80025ce:	e0fc      	b.n	80027ca <HAL_I2C_Mem_Read+0x256>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2240      	movs	r2, #64	; 0x40
 80025d4:	2101      	movs	r1, #1
 80025d6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025d8:	f7ff f872 	bl	80016c0 <HAL_GetTick>
 80025dc:	0003      	movs	r3, r0
 80025de:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025e0:	2380      	movs	r3, #128	; 0x80
 80025e2:	0219      	lsls	r1, r3, #8
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	2319      	movs	r3, #25
 80025ec:	2201      	movs	r2, #1
 80025ee:	f000 f9dd 	bl	80029ac <I2C_WaitOnFlagUntilTimeout>
 80025f2:	1e03      	subs	r3, r0, #0
 80025f4:	d001      	beq.n	80025fa <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e0e7      	b.n	80027ca <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2241      	movs	r2, #65	; 0x41
 80025fe:	2122      	movs	r1, #34	; 0x22
 8002600:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2242      	movs	r2, #66	; 0x42
 8002606:	2140      	movs	r1, #64	; 0x40
 8002608:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002614:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	222c      	movs	r2, #44	; 0x2c
 800261a:	18ba      	adds	r2, r7, r2
 800261c:	8812      	ldrh	r2, [r2, #0]
 800261e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002626:	1dbb      	adds	r3, r7, #6
 8002628:	881c      	ldrh	r4, [r3, #0]
 800262a:	2308      	movs	r3, #8
 800262c:	18fb      	adds	r3, r7, r3
 800262e:	881a      	ldrh	r2, [r3, #0]
 8002630:	230a      	movs	r3, #10
 8002632:	18fb      	adds	r3, r7, r3
 8002634:	8819      	ldrh	r1, [r3, #0]
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	9301      	str	r3, [sp, #4]
 800263c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	0023      	movs	r3, r4
 8002642:	f000 f92f 	bl	80028a4 <I2C_RequestMemoryRead>
 8002646:	1e03      	subs	r3, r0, #0
 8002648:	d005      	beq.n	8002656 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2240      	movs	r2, #64	; 0x40
 800264e:	2100      	movs	r1, #0
 8002650:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e0b9      	b.n	80027ca <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265a:	b29b      	uxth	r3, r3
 800265c:	2bff      	cmp	r3, #255	; 0xff
 800265e:	d911      	bls.n	8002684 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	22ff      	movs	r2, #255	; 0xff
 8002664:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266a:	b2da      	uxtb	r2, r3
 800266c:	2380      	movs	r3, #128	; 0x80
 800266e:	045c      	lsls	r4, r3, #17
 8002670:	230a      	movs	r3, #10
 8002672:	18fb      	adds	r3, r7, r3
 8002674:	8819      	ldrh	r1, [r3, #0]
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	4b56      	ldr	r3, [pc, #344]	; (80027d4 <HAL_I2C_Mem_Read+0x260>)
 800267a:	9300      	str	r3, [sp, #0]
 800267c:	0023      	movs	r3, r4
 800267e:	f000 fac9 	bl	8002c14 <I2C_TransferConfig>
 8002682:	e012      	b.n	80026aa <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002688:	b29a      	uxth	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002692:	b2da      	uxtb	r2, r3
 8002694:	2380      	movs	r3, #128	; 0x80
 8002696:	049c      	lsls	r4, r3, #18
 8002698:	230a      	movs	r3, #10
 800269a:	18fb      	adds	r3, r7, r3
 800269c:	8819      	ldrh	r1, [r3, #0]
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	4b4c      	ldr	r3, [pc, #304]	; (80027d4 <HAL_I2C_Mem_Read+0x260>)
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	0023      	movs	r3, r4
 80026a6:	f000 fab5 	bl	8002c14 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80026aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	0013      	movs	r3, r2
 80026b4:	2200      	movs	r2, #0
 80026b6:	2104      	movs	r1, #4
 80026b8:	f000 f978 	bl	80029ac <I2C_WaitOnFlagUntilTimeout>
 80026bc:	1e03      	subs	r3, r0, #0
 80026be:	d001      	beq.n	80026c4 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e082      	b.n	80027ca <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ce:	b2d2      	uxtb	r2, r2
 80026d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d6:	1c5a      	adds	r2, r3, #1
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e0:	3b01      	subs	r3, #1
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	3b01      	subs	r3, #1
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d03a      	beq.n	8002776 <HAL_I2C_Mem_Read+0x202>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002704:	2b00      	cmp	r3, #0
 8002706:	d136      	bne.n	8002776 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	0013      	movs	r3, r2
 8002712:	2200      	movs	r2, #0
 8002714:	2180      	movs	r1, #128	; 0x80
 8002716:	f000 f949 	bl	80029ac <I2C_WaitOnFlagUntilTimeout>
 800271a:	1e03      	subs	r3, r0, #0
 800271c:	d001      	beq.n	8002722 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e053      	b.n	80027ca <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002726:	b29b      	uxth	r3, r3
 8002728:	2bff      	cmp	r3, #255	; 0xff
 800272a:	d911      	bls.n	8002750 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	22ff      	movs	r2, #255	; 0xff
 8002730:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002736:	b2da      	uxtb	r2, r3
 8002738:	2380      	movs	r3, #128	; 0x80
 800273a:	045c      	lsls	r4, r3, #17
 800273c:	230a      	movs	r3, #10
 800273e:	18fb      	adds	r3, r7, r3
 8002740:	8819      	ldrh	r1, [r3, #0]
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	2300      	movs	r3, #0
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	0023      	movs	r3, r4
 800274a:	f000 fa63 	bl	8002c14 <I2C_TransferConfig>
 800274e:	e012      	b.n	8002776 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002754:	b29a      	uxth	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800275e:	b2da      	uxtb	r2, r3
 8002760:	2380      	movs	r3, #128	; 0x80
 8002762:	049c      	lsls	r4, r3, #18
 8002764:	230a      	movs	r3, #10
 8002766:	18fb      	adds	r3, r7, r3
 8002768:	8819      	ldrh	r1, [r3, #0]
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	2300      	movs	r3, #0
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	0023      	movs	r3, r4
 8002772:	f000 fa4f 	bl	8002c14 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800277a:	b29b      	uxth	r3, r3
 800277c:	2b00      	cmp	r3, #0
 800277e:	d194      	bne.n	80026aa <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002780:	697a      	ldr	r2, [r7, #20]
 8002782:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	0018      	movs	r0, r3
 8002788:	f000 f98e 	bl	8002aa8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800278c:	1e03      	subs	r3, r0, #0
 800278e:	d001      	beq.n	8002794 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e01a      	b.n	80027ca <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2220      	movs	r2, #32
 800279a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	685a      	ldr	r2, [r3, #4]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	490c      	ldr	r1, [pc, #48]	; (80027d8 <HAL_I2C_Mem_Read+0x264>)
 80027a8:	400a      	ands	r2, r1
 80027aa:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2241      	movs	r2, #65	; 0x41
 80027b0:	2120      	movs	r1, #32
 80027b2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2242      	movs	r2, #66	; 0x42
 80027b8:	2100      	movs	r1, #0
 80027ba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2240      	movs	r2, #64	; 0x40
 80027c0:	2100      	movs	r1, #0
 80027c2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80027c4:	2300      	movs	r3, #0
 80027c6:	e000      	b.n	80027ca <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80027c8:	2302      	movs	r3, #2
  }
}
 80027ca:	0018      	movs	r0, r3
 80027cc:	46bd      	mov	sp, r7
 80027ce:	b007      	add	sp, #28
 80027d0:	bd90      	pop	{r4, r7, pc}
 80027d2:	46c0      	nop			; (mov r8, r8)
 80027d4:	80002400 	.word	0x80002400
 80027d8:	fe00e800 	.word	0xfe00e800

080027dc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80027dc:	b5b0      	push	{r4, r5, r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af02      	add	r7, sp, #8
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	000c      	movs	r4, r1
 80027e6:	0010      	movs	r0, r2
 80027e8:	0019      	movs	r1, r3
 80027ea:	250a      	movs	r5, #10
 80027ec:	197b      	adds	r3, r7, r5
 80027ee:	1c22      	adds	r2, r4, #0
 80027f0:	801a      	strh	r2, [r3, #0]
 80027f2:	2308      	movs	r3, #8
 80027f4:	18fb      	adds	r3, r7, r3
 80027f6:	1c02      	adds	r2, r0, #0
 80027f8:	801a      	strh	r2, [r3, #0]
 80027fa:	1dbb      	adds	r3, r7, #6
 80027fc:	1c0a      	adds	r2, r1, #0
 80027fe:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002800:	1dbb      	adds	r3, r7, #6
 8002802:	881b      	ldrh	r3, [r3, #0]
 8002804:	b2da      	uxtb	r2, r3
 8002806:	2380      	movs	r3, #128	; 0x80
 8002808:	045c      	lsls	r4, r3, #17
 800280a:	197b      	adds	r3, r7, r5
 800280c:	8819      	ldrh	r1, [r3, #0]
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	4b23      	ldr	r3, [pc, #140]	; (80028a0 <I2C_RequestMemoryWrite+0xc4>)
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	0023      	movs	r3, r4
 8002816:	f000 f9fd 	bl	8002c14 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800281a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800281c:	6a39      	ldr	r1, [r7, #32]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	0018      	movs	r0, r3
 8002822:	f000 f902 	bl	8002a2a <I2C_WaitOnTXISFlagUntilTimeout>
 8002826:	1e03      	subs	r3, r0, #0
 8002828:	d001      	beq.n	800282e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e033      	b.n	8002896 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800282e:	1dbb      	adds	r3, r7, #6
 8002830:	881b      	ldrh	r3, [r3, #0]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d107      	bne.n	8002846 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002836:	2308      	movs	r3, #8
 8002838:	18fb      	adds	r3, r7, r3
 800283a:	881b      	ldrh	r3, [r3, #0]
 800283c:	b2da      	uxtb	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	629a      	str	r2, [r3, #40]	; 0x28
 8002844:	e019      	b.n	800287a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002846:	2308      	movs	r3, #8
 8002848:	18fb      	adds	r3, r7, r3
 800284a:	881b      	ldrh	r3, [r3, #0]
 800284c:	0a1b      	lsrs	r3, r3, #8
 800284e:	b29b      	uxth	r3, r3
 8002850:	b2da      	uxtb	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800285a:	6a39      	ldr	r1, [r7, #32]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	0018      	movs	r0, r3
 8002860:	f000 f8e3 	bl	8002a2a <I2C_WaitOnTXISFlagUntilTimeout>
 8002864:	1e03      	subs	r3, r0, #0
 8002866:	d001      	beq.n	800286c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e014      	b.n	8002896 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800286c:	2308      	movs	r3, #8
 800286e:	18fb      	adds	r3, r7, r3
 8002870:	881b      	ldrh	r3, [r3, #0]
 8002872:	b2da      	uxtb	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800287a:	6a3a      	ldr	r2, [r7, #32]
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	0013      	movs	r3, r2
 8002884:	2200      	movs	r2, #0
 8002886:	2180      	movs	r1, #128	; 0x80
 8002888:	f000 f890 	bl	80029ac <I2C_WaitOnFlagUntilTimeout>
 800288c:	1e03      	subs	r3, r0, #0
 800288e:	d001      	beq.n	8002894 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e000      	b.n	8002896 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	0018      	movs	r0, r3
 8002898:	46bd      	mov	sp, r7
 800289a:	b004      	add	sp, #16
 800289c:	bdb0      	pop	{r4, r5, r7, pc}
 800289e:	46c0      	nop			; (mov r8, r8)
 80028a0:	80002000 	.word	0x80002000

080028a4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80028a4:	b5b0      	push	{r4, r5, r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af02      	add	r7, sp, #8
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	000c      	movs	r4, r1
 80028ae:	0010      	movs	r0, r2
 80028b0:	0019      	movs	r1, r3
 80028b2:	250a      	movs	r5, #10
 80028b4:	197b      	adds	r3, r7, r5
 80028b6:	1c22      	adds	r2, r4, #0
 80028b8:	801a      	strh	r2, [r3, #0]
 80028ba:	2308      	movs	r3, #8
 80028bc:	18fb      	adds	r3, r7, r3
 80028be:	1c02      	adds	r2, r0, #0
 80028c0:	801a      	strh	r2, [r3, #0]
 80028c2:	1dbb      	adds	r3, r7, #6
 80028c4:	1c0a      	adds	r2, r1, #0
 80028c6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80028c8:	1dbb      	adds	r3, r7, #6
 80028ca:	881b      	ldrh	r3, [r3, #0]
 80028cc:	b2da      	uxtb	r2, r3
 80028ce:	197b      	adds	r3, r7, r5
 80028d0:	8819      	ldrh	r1, [r3, #0]
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	4b23      	ldr	r3, [pc, #140]	; (8002964 <I2C_RequestMemoryRead+0xc0>)
 80028d6:	9300      	str	r3, [sp, #0]
 80028d8:	2300      	movs	r3, #0
 80028da:	f000 f99b 	bl	8002c14 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028e0:	6a39      	ldr	r1, [r7, #32]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	0018      	movs	r0, r3
 80028e6:	f000 f8a0 	bl	8002a2a <I2C_WaitOnTXISFlagUntilTimeout>
 80028ea:	1e03      	subs	r3, r0, #0
 80028ec:	d001      	beq.n	80028f2 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e033      	b.n	800295a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028f2:	1dbb      	adds	r3, r7, #6
 80028f4:	881b      	ldrh	r3, [r3, #0]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d107      	bne.n	800290a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028fa:	2308      	movs	r3, #8
 80028fc:	18fb      	adds	r3, r7, r3
 80028fe:	881b      	ldrh	r3, [r3, #0]
 8002900:	b2da      	uxtb	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	629a      	str	r2, [r3, #40]	; 0x28
 8002908:	e019      	b.n	800293e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800290a:	2308      	movs	r3, #8
 800290c:	18fb      	adds	r3, r7, r3
 800290e:	881b      	ldrh	r3, [r3, #0]
 8002910:	0a1b      	lsrs	r3, r3, #8
 8002912:	b29b      	uxth	r3, r3
 8002914:	b2da      	uxtb	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800291c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800291e:	6a39      	ldr	r1, [r7, #32]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	0018      	movs	r0, r3
 8002924:	f000 f881 	bl	8002a2a <I2C_WaitOnTXISFlagUntilTimeout>
 8002928:	1e03      	subs	r3, r0, #0
 800292a:	d001      	beq.n	8002930 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e014      	b.n	800295a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002930:	2308      	movs	r3, #8
 8002932:	18fb      	adds	r3, r7, r3
 8002934:	881b      	ldrh	r3, [r3, #0]
 8002936:	b2da      	uxtb	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800293e:	6a3a      	ldr	r2, [r7, #32]
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	9300      	str	r3, [sp, #0]
 8002946:	0013      	movs	r3, r2
 8002948:	2200      	movs	r2, #0
 800294a:	2140      	movs	r1, #64	; 0x40
 800294c:	f000 f82e 	bl	80029ac <I2C_WaitOnFlagUntilTimeout>
 8002950:	1e03      	subs	r3, r0, #0
 8002952:	d001      	beq.n	8002958 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e000      	b.n	800295a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	0018      	movs	r0, r3
 800295c:	46bd      	mov	sp, r7
 800295e:	b004      	add	sp, #16
 8002960:	bdb0      	pop	{r4, r5, r7, pc}
 8002962:	46c0      	nop			; (mov r8, r8)
 8002964:	80002000 	.word	0x80002000

08002968 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	2202      	movs	r2, #2
 8002978:	4013      	ands	r3, r2
 800297a:	2b02      	cmp	r3, #2
 800297c:	d103      	bne.n	8002986 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2200      	movs	r2, #0
 8002984:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	2201      	movs	r2, #1
 800298e:	4013      	ands	r3, r2
 8002990:	2b01      	cmp	r3, #1
 8002992:	d007      	beq.n	80029a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	699a      	ldr	r2, [r3, #24]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2101      	movs	r1, #1
 80029a0:	430a      	orrs	r2, r1
 80029a2:	619a      	str	r2, [r3, #24]
  }
}
 80029a4:	46c0      	nop			; (mov r8, r8)
 80029a6:	46bd      	mov	sp, r7
 80029a8:	b002      	add	sp, #8
 80029aa:	bd80      	pop	{r7, pc}

080029ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	603b      	str	r3, [r7, #0]
 80029b8:	1dfb      	adds	r3, r7, #7
 80029ba:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029bc:	e021      	b.n	8002a02 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	3301      	adds	r3, #1
 80029c2:	d01e      	beq.n	8002a02 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029c4:	f7fe fe7c 	bl	80016c0 <HAL_GetTick>
 80029c8:	0002      	movs	r2, r0
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d302      	bcc.n	80029da <I2C_WaitOnFlagUntilTimeout+0x2e>
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d113      	bne.n	8002a02 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029de:	2220      	movs	r2, #32
 80029e0:	431a      	orrs	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2241      	movs	r2, #65	; 0x41
 80029ea:	2120      	movs	r1, #32
 80029ec:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2242      	movs	r2, #66	; 0x42
 80029f2:	2100      	movs	r1, #0
 80029f4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2240      	movs	r2, #64	; 0x40
 80029fa:	2100      	movs	r1, #0
 80029fc:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e00f      	b.n	8002a22 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	68ba      	ldr	r2, [r7, #8]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	68ba      	ldr	r2, [r7, #8]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	425a      	negs	r2, r3
 8002a12:	4153      	adcs	r3, r2
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	001a      	movs	r2, r3
 8002a18:	1dfb      	adds	r3, r7, #7
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d0ce      	beq.n	80029be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	0018      	movs	r0, r3
 8002a24:	46bd      	mov	sp, r7
 8002a26:	b004      	add	sp, #16
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b084      	sub	sp, #16
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	60f8      	str	r0, [r7, #12]
 8002a32:	60b9      	str	r1, [r7, #8]
 8002a34:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a36:	e02b      	b.n	8002a90 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	68b9      	ldr	r1, [r7, #8]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	0018      	movs	r0, r3
 8002a40:	f000 f86e 	bl	8002b20 <I2C_IsAcknowledgeFailed>
 8002a44:	1e03      	subs	r3, r0, #0
 8002a46:	d001      	beq.n	8002a4c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e029      	b.n	8002aa0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	d01e      	beq.n	8002a90 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a52:	f7fe fe35 	bl	80016c0 <HAL_GetTick>
 8002a56:	0002      	movs	r2, r0
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	68ba      	ldr	r2, [r7, #8]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d302      	bcc.n	8002a68 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d113      	bne.n	8002a90 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6c:	2220      	movs	r2, #32
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2241      	movs	r2, #65	; 0x41
 8002a78:	2120      	movs	r1, #32
 8002a7a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2242      	movs	r2, #66	; 0x42
 8002a80:	2100      	movs	r1, #0
 8002a82:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2240      	movs	r2, #64	; 0x40
 8002a88:	2100      	movs	r1, #0
 8002a8a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e007      	b.n	8002aa0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	2202      	movs	r2, #2
 8002a98:	4013      	ands	r3, r2
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d1cc      	bne.n	8002a38 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	b004      	add	sp, #16
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ab4:	e028      	b.n	8002b08 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	68b9      	ldr	r1, [r7, #8]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	0018      	movs	r0, r3
 8002abe:	f000 f82f 	bl	8002b20 <I2C_IsAcknowledgeFailed>
 8002ac2:	1e03      	subs	r3, r0, #0
 8002ac4:	d001      	beq.n	8002aca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e026      	b.n	8002b18 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aca:	f7fe fdf9 	bl	80016c0 <HAL_GetTick>
 8002ace:	0002      	movs	r2, r0
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	68ba      	ldr	r2, [r7, #8]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d302      	bcc.n	8002ae0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d113      	bne.n	8002b08 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae4:	2220      	movs	r2, #32
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2241      	movs	r2, #65	; 0x41
 8002af0:	2120      	movs	r1, #32
 8002af2:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2242      	movs	r2, #66	; 0x42
 8002af8:	2100      	movs	r1, #0
 8002afa:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2240      	movs	r2, #64	; 0x40
 8002b00:	2100      	movs	r1, #0
 8002b02:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e007      	b.n	8002b18 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	2220      	movs	r2, #32
 8002b10:	4013      	ands	r3, r2
 8002b12:	2b20      	cmp	r3, #32
 8002b14:	d1cf      	bne.n	8002ab6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	0018      	movs	r0, r3
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	b004      	add	sp, #16
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	2210      	movs	r2, #16
 8002b34:	4013      	ands	r3, r2
 8002b36:	2b10      	cmp	r3, #16
 8002b38:	d164      	bne.n	8002c04 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	2380      	movs	r3, #128	; 0x80
 8002b42:	049b      	lsls	r3, r3, #18
 8002b44:	401a      	ands	r2, r3
 8002b46:	2380      	movs	r3, #128	; 0x80
 8002b48:	049b      	lsls	r3, r3, #18
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d02b      	beq.n	8002ba6 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	685a      	ldr	r2, [r3, #4]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2180      	movs	r1, #128	; 0x80
 8002b5a:	01c9      	lsls	r1, r1, #7
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b60:	e021      	b.n	8002ba6 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	3301      	adds	r3, #1
 8002b66:	d01e      	beq.n	8002ba6 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b68:	f7fe fdaa 	bl	80016c0 <HAL_GetTick>
 8002b6c:	0002      	movs	r2, r0
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d302      	bcc.n	8002b7e <I2C_IsAcknowledgeFailed+0x5e>
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d113      	bne.n	8002ba6 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b82:	2220      	movs	r2, #32
 8002b84:	431a      	orrs	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2241      	movs	r2, #65	; 0x41
 8002b8e:	2120      	movs	r1, #32
 8002b90:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2242      	movs	r2, #66	; 0x42
 8002b96:	2100      	movs	r1, #0
 8002b98:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2240      	movs	r2, #64	; 0x40
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e02f      	b.n	8002c06 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	2220      	movs	r2, #32
 8002bae:	4013      	ands	r3, r2
 8002bb0:	2b20      	cmp	r3, #32
 8002bb2:	d1d6      	bne.n	8002b62 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2210      	movs	r2, #16
 8002bba:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2220      	movs	r2, #32
 8002bc2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	0018      	movs	r0, r3
 8002bc8:	f7ff fece 	bl	8002968 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	490e      	ldr	r1, [pc, #56]	; (8002c10 <I2C_IsAcknowledgeFailed+0xf0>)
 8002bd8:	400a      	ands	r2, r1
 8002bda:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be0:	2204      	movs	r2, #4
 8002be2:	431a      	orrs	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2241      	movs	r2, #65	; 0x41
 8002bec:	2120      	movs	r1, #32
 8002bee:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2242      	movs	r2, #66	; 0x42
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2240      	movs	r2, #64	; 0x40
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e000      	b.n	8002c06 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	0018      	movs	r0, r3
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	b004      	add	sp, #16
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	46c0      	nop			; (mov r8, r8)
 8002c10:	fe00e800 	.word	0xfe00e800

08002c14 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002c14:	b590      	push	{r4, r7, lr}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	0008      	movs	r0, r1
 8002c1e:	0011      	movs	r1, r2
 8002c20:	607b      	str	r3, [r7, #4]
 8002c22:	240a      	movs	r4, #10
 8002c24:	193b      	adds	r3, r7, r4
 8002c26:	1c02      	adds	r2, r0, #0
 8002c28:	801a      	strh	r2, [r3, #0]
 8002c2a:	2009      	movs	r0, #9
 8002c2c:	183b      	adds	r3, r7, r0
 8002c2e:	1c0a      	adds	r2, r1, #0
 8002c30:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	6a3a      	ldr	r2, [r7, #32]
 8002c3a:	0d51      	lsrs	r1, r2, #21
 8002c3c:	2280      	movs	r2, #128	; 0x80
 8002c3e:	00d2      	lsls	r2, r2, #3
 8002c40:	400a      	ands	r2, r1
 8002c42:	490e      	ldr	r1, [pc, #56]	; (8002c7c <I2C_TransferConfig+0x68>)
 8002c44:	430a      	orrs	r2, r1
 8002c46:	43d2      	mvns	r2, r2
 8002c48:	401a      	ands	r2, r3
 8002c4a:	0011      	movs	r1, r2
 8002c4c:	193b      	adds	r3, r7, r4
 8002c4e:	881b      	ldrh	r3, [r3, #0]
 8002c50:	059b      	lsls	r3, r3, #22
 8002c52:	0d9a      	lsrs	r2, r3, #22
 8002c54:	183b      	adds	r3, r7, r0
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	0418      	lsls	r0, r3, #16
 8002c5a:	23ff      	movs	r3, #255	; 0xff
 8002c5c:	041b      	lsls	r3, r3, #16
 8002c5e:	4003      	ands	r3, r0
 8002c60:	431a      	orrs	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	431a      	orrs	r2, r3
 8002c66:	6a3b      	ldr	r3, [r7, #32]
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8002c72:	46c0      	nop			; (mov r8, r8)
 8002c74:	46bd      	mov	sp, r7
 8002c76:	b005      	add	sp, #20
 8002c78:	bd90      	pop	{r4, r7, pc}
 8002c7a:	46c0      	nop			; (mov r8, r8)
 8002c7c:	03ff63ff 	.word	0x03ff63ff

08002c80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2241      	movs	r2, #65	; 0x41
 8002c8e:	5c9b      	ldrb	r3, [r3, r2]
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b20      	cmp	r3, #32
 8002c94:	d138      	bne.n	8002d08 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2240      	movs	r2, #64	; 0x40
 8002c9a:	5c9b      	ldrb	r3, [r3, r2]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d101      	bne.n	8002ca4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	e032      	b.n	8002d0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2240      	movs	r2, #64	; 0x40
 8002ca8:	2101      	movs	r1, #1
 8002caa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2241      	movs	r2, #65	; 0x41
 8002cb0:	2124      	movs	r1, #36	; 0x24
 8002cb2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	438a      	bics	r2, r1
 8002cc2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4911      	ldr	r1, [pc, #68]	; (8002d14 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002cd0:	400a      	ands	r2, r1
 8002cd2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6819      	ldr	r1, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2101      	movs	r1, #1
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2241      	movs	r2, #65	; 0x41
 8002cf8:	2120      	movs	r1, #32
 8002cfa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2240      	movs	r2, #64	; 0x40
 8002d00:	2100      	movs	r1, #0
 8002d02:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002d04:	2300      	movs	r3, #0
 8002d06:	e000      	b.n	8002d0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d08:	2302      	movs	r3, #2
  }
}
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	b002      	add	sp, #8
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	46c0      	nop			; (mov r8, r8)
 8002d14:	ffffefff 	.word	0xffffefff

08002d18 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2241      	movs	r2, #65	; 0x41
 8002d26:	5c9b      	ldrb	r3, [r3, r2]
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b20      	cmp	r3, #32
 8002d2c:	d139      	bne.n	8002da2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2240      	movs	r2, #64	; 0x40
 8002d32:	5c9b      	ldrb	r3, [r3, r2]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d101      	bne.n	8002d3c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d38:	2302      	movs	r3, #2
 8002d3a:	e033      	b.n	8002da4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2240      	movs	r2, #64	; 0x40
 8002d40:	2101      	movs	r1, #1
 8002d42:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2241      	movs	r2, #65	; 0x41
 8002d48:	2124      	movs	r1, #36	; 0x24
 8002d4a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2101      	movs	r1, #1
 8002d58:	438a      	bics	r2, r1
 8002d5a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	4a11      	ldr	r2, [pc, #68]	; (8002dac <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002d68:	4013      	ands	r3, r2
 8002d6a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	021b      	lsls	r3, r3, #8
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2101      	movs	r1, #1
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2241      	movs	r2, #65	; 0x41
 8002d92:	2120      	movs	r1, #32
 8002d94:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2240      	movs	r2, #64	; 0x40
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	e000      	b.n	8002da4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002da2:	2302      	movs	r3, #2
  }
}
 8002da4:	0018      	movs	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	b004      	add	sp, #16
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	fffff0ff 	.word	0xfffff0ff

08002db0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b088      	sub	sp, #32
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e301      	b.n	80033c6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	4013      	ands	r3, r2
 8002dca:	d100      	bne.n	8002dce <HAL_RCC_OscConfig+0x1e>
 8002dcc:	e08d      	b.n	8002eea <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002dce:	4bc3      	ldr	r3, [pc, #780]	; (80030dc <HAL_RCC_OscConfig+0x32c>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	220c      	movs	r2, #12
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	d00e      	beq.n	8002df8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002dda:	4bc0      	ldr	r3, [pc, #768]	; (80030dc <HAL_RCC_OscConfig+0x32c>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	220c      	movs	r2, #12
 8002de0:	4013      	ands	r3, r2
 8002de2:	2b08      	cmp	r3, #8
 8002de4:	d116      	bne.n	8002e14 <HAL_RCC_OscConfig+0x64>
 8002de6:	4bbd      	ldr	r3, [pc, #756]	; (80030dc <HAL_RCC_OscConfig+0x32c>)
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	2380      	movs	r3, #128	; 0x80
 8002dec:	025b      	lsls	r3, r3, #9
 8002dee:	401a      	ands	r2, r3
 8002df0:	2380      	movs	r3, #128	; 0x80
 8002df2:	025b      	lsls	r3, r3, #9
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d10d      	bne.n	8002e14 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df8:	4bb8      	ldr	r3, [pc, #736]	; (80030dc <HAL_RCC_OscConfig+0x32c>)
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	2380      	movs	r3, #128	; 0x80
 8002dfe:	029b      	lsls	r3, r3, #10
 8002e00:	4013      	ands	r3, r2
 8002e02:	d100      	bne.n	8002e06 <HAL_RCC_OscConfig+0x56>
 8002e04:	e070      	b.n	8002ee8 <HAL_RCC_OscConfig+0x138>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d000      	beq.n	8002e10 <HAL_RCC_OscConfig+0x60>
 8002e0e:	e06b      	b.n	8002ee8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e2d8      	b.n	80033c6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d107      	bne.n	8002e2c <HAL_RCC_OscConfig+0x7c>
 8002e1c:	4baf      	ldr	r3, [pc, #700]	; (80030dc <HAL_RCC_OscConfig+0x32c>)
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	4bae      	ldr	r3, [pc, #696]	; (80030dc <HAL_RCC_OscConfig+0x32c>)
 8002e22:	2180      	movs	r1, #128	; 0x80
 8002e24:	0249      	lsls	r1, r1, #9
 8002e26:	430a      	orrs	r2, r1
 8002e28:	601a      	str	r2, [r3, #0]
 8002e2a:	e02f      	b.n	8002e8c <HAL_RCC_OscConfig+0xdc>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d10c      	bne.n	8002e4e <HAL_RCC_OscConfig+0x9e>
 8002e34:	4ba9      	ldr	r3, [pc, #676]	; (80030dc <HAL_RCC_OscConfig+0x32c>)
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	4ba8      	ldr	r3, [pc, #672]	; (80030dc <HAL_RCC_OscConfig+0x32c>)
 8002e3a:	49a9      	ldr	r1, [pc, #676]	; (80030e0 <HAL_RCC_OscConfig+0x330>)
 8002e3c:	400a      	ands	r2, r1
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	4ba6      	ldr	r3, [pc, #664]	; (80030dc <HAL_RCC_OscConfig+0x32c>)
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	4ba5      	ldr	r3, [pc, #660]	; (80030dc <HAL_RCC_OscConfig+0x32c>)
 8002e46:	49a7      	ldr	r1, [pc, #668]	; (80030e4 <HAL_RCC_OscConfig+0x334>)
 8002e48:	400a      	ands	r2, r1
 8002e4a:	601a      	str	r2, [r3, #0]
 8002e4c:	e01e      	b.n	8002e8c <HAL_RCC_OscConfig+0xdc>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2b05      	cmp	r3, #5
 8002e54:	d10e      	bne.n	8002e74 <HAL_RCC_OscConfig+0xc4>
 8002e56:	4ba1      	ldr	r3, [pc, #644]	; (80030dc <HAL_RCC_OscConfig+0x32c>)
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	4ba0      	ldr	r3, [pc, #640]	; (80030dc <HAL_RCC_OscConfig+0x32c>)
 8002e5c:	2180      	movs	r1, #128	; 0x80
 8002e5e:	02c9      	lsls	r1, r1, #11
 8002e60:	430a      	orrs	r2, r1
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	4b9d      	ldr	r3, [pc, #628]	; (80030dc <HAL_RCC_OscConfig+0x32c>)
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	4b9c      	ldr	r3, [pc, #624]	; (80030dc <HAL_RCC_OscConfig+0x32c>)
 8002e6a:	2180      	movs	r1, #128	; 0x80
 8002e6c:	0249      	lsls	r1, r1, #9
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	e00b      	b.n	8002e8c <HAL_RCC_OscConfig+0xdc>
 8002e74:	4b99      	ldr	r3, [pc, #612]	; (80030dc <HAL_RCC_OscConfig+0x32c>)
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	4b98      	ldr	r3, [pc, #608]	; (80030dc <HAL_RCC_OscConfig+0x32c>)
 8002e7a:	4999      	ldr	r1, [pc, #612]	; (80030e0 <HAL_RCC_OscConfig+0x330>)
 8002e7c:	400a      	ands	r2, r1
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	4b96      	ldr	r3, [pc, #600]	; (80030dc <HAL_RCC_OscConfig+0x32c>)
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	4b95      	ldr	r3, [pc, #596]	; (80030dc <HAL_RCC_OscConfig+0x32c>)
 8002e86:	4997      	ldr	r1, [pc, #604]	; (80030e4 <HAL_RCC_OscConfig+0x334>)
 8002e88:	400a      	ands	r2, r1
 8002e8a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d014      	beq.n	8002ebe <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e94:	f7fe fc14 	bl	80016c0 <HAL_GetTick>
 8002e98:	0003      	movs	r3, r0
 8002e9a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e9e:	f7fe fc0f 	bl	80016c0 <HAL_GetTick>
 8002ea2:	0002      	movs	r2, r0
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b64      	cmp	r3, #100	; 0x64
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e28a      	b.n	80033c6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eb0:	4b8a      	ldr	r3, [pc, #552]	; (80030dc <HAL_RCC_OscConfig+0x32c>)
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	2380      	movs	r3, #128	; 0x80
 8002eb6:	029b      	lsls	r3, r3, #10
 8002eb8:	4013      	ands	r3, r2
 8002eba:	d0f0      	beq.n	8002e9e <HAL_RCC_OscConfig+0xee>
 8002ebc:	e015      	b.n	8002eea <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ebe:	f7fe fbff 	bl	80016c0 <HAL_GetTick>
 8002ec2:	0003      	movs	r3, r0
 8002ec4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ec8:	f7fe fbfa 	bl	80016c0 <HAL_GetTick>
 8002ecc:	0002      	movs	r2, r0
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b64      	cmp	r3, #100	; 0x64
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e275      	b.n	80033c6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eda:	4b80      	ldr	r3, [pc, #512]	; (80030dc <HAL_RCC_OscConfig+0x32c>)
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	2380      	movs	r3, #128	; 0x80
 8002ee0:	029b      	lsls	r3, r3, #10
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	d1f0      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x118>
 8002ee6:	e000      	b.n	8002eea <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ee8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2202      	movs	r2, #2
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	d100      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x146>
 8002ef4:	e069      	b.n	8002fca <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002ef6:	4b79      	ldr	r3, [pc, #484]	; (80030dc <HAL_RCC_OscConfig+0x32c>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	220c      	movs	r2, #12
 8002efc:	4013      	ands	r3, r2
 8002efe:	d00b      	beq.n	8002f18 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002f00:	4b76      	ldr	r3, [pc, #472]	; (80030dc <HAL_RCC_OscConfig+0x32c>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	220c      	movs	r2, #12
 8002f06:	4013      	ands	r3, r2
 8002f08:	2b08      	cmp	r3, #8
 8002f0a:	d11c      	bne.n	8002f46 <HAL_RCC_OscConfig+0x196>
 8002f0c:	4b73      	ldr	r3, [pc, #460]	; (80030dc <HAL_RCC_OscConfig+0x32c>)
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	2380      	movs	r3, #128	; 0x80
 8002f12:	025b      	lsls	r3, r3, #9
 8002f14:	4013      	ands	r3, r2
 8002f16:	d116      	bne.n	8002f46 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f18:	4b70      	ldr	r3, [pc, #448]	; (80030dc <HAL_RCC_OscConfig+0x32c>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2202      	movs	r2, #2
 8002f1e:	4013      	ands	r3, r2
 8002f20:	d005      	beq.n	8002f2e <HAL_RCC_OscConfig+0x17e>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d001      	beq.n	8002f2e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e24b      	b.n	80033c6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f2e:	4b6b      	ldr	r3, [pc, #428]	; (80030dc <HAL_RCC_OscConfig+0x32c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	22f8      	movs	r2, #248	; 0xf8
 8002f34:	4393      	bics	r3, r2
 8002f36:	0019      	movs	r1, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	00da      	lsls	r2, r3, #3
 8002f3e:	4b67      	ldr	r3, [pc, #412]	; (80030dc <HAL_RCC_OscConfig+0x32c>)
 8002f40:	430a      	orrs	r2, r1
 8002f42:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f44:	e041      	b.n	8002fca <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d024      	beq.n	8002f98 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f4e:	4b63      	ldr	r3, [pc, #396]	; (80030dc <HAL_RCC_OscConfig+0x32c>)
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	4b62      	ldr	r3, [pc, #392]	; (80030dc <HAL_RCC_OscConfig+0x32c>)
 8002f54:	2101      	movs	r1, #1
 8002f56:	430a      	orrs	r2, r1
 8002f58:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5a:	f7fe fbb1 	bl	80016c0 <HAL_GetTick>
 8002f5e:	0003      	movs	r3, r0
 8002f60:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f64:	f7fe fbac 	bl	80016c0 <HAL_GetTick>
 8002f68:	0002      	movs	r2, r0
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e227      	b.n	80033c6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f76:	4b59      	ldr	r3, [pc, #356]	; (80030dc <HAL_RCC_OscConfig+0x32c>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	d0f1      	beq.n	8002f64 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f80:	4b56      	ldr	r3, [pc, #344]	; (80030dc <HAL_RCC_OscConfig+0x32c>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	22f8      	movs	r2, #248	; 0xf8
 8002f86:	4393      	bics	r3, r2
 8002f88:	0019      	movs	r1, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	00da      	lsls	r2, r3, #3
 8002f90:	4b52      	ldr	r3, [pc, #328]	; (80030dc <HAL_RCC_OscConfig+0x32c>)
 8002f92:	430a      	orrs	r2, r1
 8002f94:	601a      	str	r2, [r3, #0]
 8002f96:	e018      	b.n	8002fca <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f98:	4b50      	ldr	r3, [pc, #320]	; (80030dc <HAL_RCC_OscConfig+0x32c>)
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	4b4f      	ldr	r3, [pc, #316]	; (80030dc <HAL_RCC_OscConfig+0x32c>)
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	438a      	bics	r2, r1
 8002fa2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa4:	f7fe fb8c 	bl	80016c0 <HAL_GetTick>
 8002fa8:	0003      	movs	r3, r0
 8002faa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fac:	e008      	b.n	8002fc0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fae:	f7fe fb87 	bl	80016c0 <HAL_GetTick>
 8002fb2:	0002      	movs	r2, r0
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d901      	bls.n	8002fc0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e202      	b.n	80033c6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fc0:	4b46      	ldr	r3, [pc, #280]	; (80030dc <HAL_RCC_OscConfig+0x32c>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2202      	movs	r2, #2
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	d1f1      	bne.n	8002fae <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2208      	movs	r2, #8
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	d036      	beq.n	8003042 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	69db      	ldr	r3, [r3, #28]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d019      	beq.n	8003010 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fdc:	4b3f      	ldr	r3, [pc, #252]	; (80030dc <HAL_RCC_OscConfig+0x32c>)
 8002fde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fe0:	4b3e      	ldr	r3, [pc, #248]	; (80030dc <HAL_RCC_OscConfig+0x32c>)
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fe8:	f7fe fb6a 	bl	80016c0 <HAL_GetTick>
 8002fec:	0003      	movs	r3, r0
 8002fee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ff0:	e008      	b.n	8003004 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ff2:	f7fe fb65 	bl	80016c0 <HAL_GetTick>
 8002ff6:	0002      	movs	r2, r0
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e1e0      	b.n	80033c6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003004:	4b35      	ldr	r3, [pc, #212]	; (80030dc <HAL_RCC_OscConfig+0x32c>)
 8003006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003008:	2202      	movs	r2, #2
 800300a:	4013      	ands	r3, r2
 800300c:	d0f1      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x242>
 800300e:	e018      	b.n	8003042 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003010:	4b32      	ldr	r3, [pc, #200]	; (80030dc <HAL_RCC_OscConfig+0x32c>)
 8003012:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003014:	4b31      	ldr	r3, [pc, #196]	; (80030dc <HAL_RCC_OscConfig+0x32c>)
 8003016:	2101      	movs	r1, #1
 8003018:	438a      	bics	r2, r1
 800301a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800301c:	f7fe fb50 	bl	80016c0 <HAL_GetTick>
 8003020:	0003      	movs	r3, r0
 8003022:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003024:	e008      	b.n	8003038 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003026:	f7fe fb4b 	bl	80016c0 <HAL_GetTick>
 800302a:	0002      	movs	r2, r0
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e1c6      	b.n	80033c6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003038:	4b28      	ldr	r3, [pc, #160]	; (80030dc <HAL_RCC_OscConfig+0x32c>)
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	2202      	movs	r2, #2
 800303e:	4013      	ands	r3, r2
 8003040:	d1f1      	bne.n	8003026 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2204      	movs	r2, #4
 8003048:	4013      	ands	r3, r2
 800304a:	d100      	bne.n	800304e <HAL_RCC_OscConfig+0x29e>
 800304c:	e0b4      	b.n	80031b8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800304e:	201f      	movs	r0, #31
 8003050:	183b      	adds	r3, r7, r0
 8003052:	2200      	movs	r2, #0
 8003054:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003056:	4b21      	ldr	r3, [pc, #132]	; (80030dc <HAL_RCC_OscConfig+0x32c>)
 8003058:	69da      	ldr	r2, [r3, #28]
 800305a:	2380      	movs	r3, #128	; 0x80
 800305c:	055b      	lsls	r3, r3, #21
 800305e:	4013      	ands	r3, r2
 8003060:	d110      	bne.n	8003084 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003062:	4b1e      	ldr	r3, [pc, #120]	; (80030dc <HAL_RCC_OscConfig+0x32c>)
 8003064:	69da      	ldr	r2, [r3, #28]
 8003066:	4b1d      	ldr	r3, [pc, #116]	; (80030dc <HAL_RCC_OscConfig+0x32c>)
 8003068:	2180      	movs	r1, #128	; 0x80
 800306a:	0549      	lsls	r1, r1, #21
 800306c:	430a      	orrs	r2, r1
 800306e:	61da      	str	r2, [r3, #28]
 8003070:	4b1a      	ldr	r3, [pc, #104]	; (80030dc <HAL_RCC_OscConfig+0x32c>)
 8003072:	69da      	ldr	r2, [r3, #28]
 8003074:	2380      	movs	r3, #128	; 0x80
 8003076:	055b      	lsls	r3, r3, #21
 8003078:	4013      	ands	r3, r2
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800307e:	183b      	adds	r3, r7, r0
 8003080:	2201      	movs	r2, #1
 8003082:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003084:	4b18      	ldr	r3, [pc, #96]	; (80030e8 <HAL_RCC_OscConfig+0x338>)
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	2380      	movs	r3, #128	; 0x80
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	4013      	ands	r3, r2
 800308e:	d11a      	bne.n	80030c6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003090:	4b15      	ldr	r3, [pc, #84]	; (80030e8 <HAL_RCC_OscConfig+0x338>)
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	4b14      	ldr	r3, [pc, #80]	; (80030e8 <HAL_RCC_OscConfig+0x338>)
 8003096:	2180      	movs	r1, #128	; 0x80
 8003098:	0049      	lsls	r1, r1, #1
 800309a:	430a      	orrs	r2, r1
 800309c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800309e:	f7fe fb0f 	bl	80016c0 <HAL_GetTick>
 80030a2:	0003      	movs	r3, r0
 80030a4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030a8:	f7fe fb0a 	bl	80016c0 <HAL_GetTick>
 80030ac:	0002      	movs	r2, r0
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b64      	cmp	r3, #100	; 0x64
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e185      	b.n	80033c6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ba:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <HAL_RCC_OscConfig+0x338>)
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	2380      	movs	r3, #128	; 0x80
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	4013      	ands	r3, r2
 80030c4:	d0f0      	beq.n	80030a8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d10e      	bne.n	80030ec <HAL_RCC_OscConfig+0x33c>
 80030ce:	4b03      	ldr	r3, [pc, #12]	; (80030dc <HAL_RCC_OscConfig+0x32c>)
 80030d0:	6a1a      	ldr	r2, [r3, #32]
 80030d2:	4b02      	ldr	r3, [pc, #8]	; (80030dc <HAL_RCC_OscConfig+0x32c>)
 80030d4:	2101      	movs	r1, #1
 80030d6:	430a      	orrs	r2, r1
 80030d8:	621a      	str	r2, [r3, #32]
 80030da:	e035      	b.n	8003148 <HAL_RCC_OscConfig+0x398>
 80030dc:	40021000 	.word	0x40021000
 80030e0:	fffeffff 	.word	0xfffeffff
 80030e4:	fffbffff 	.word	0xfffbffff
 80030e8:	40007000 	.word	0x40007000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d10c      	bne.n	800310e <HAL_RCC_OscConfig+0x35e>
 80030f4:	4bb6      	ldr	r3, [pc, #728]	; (80033d0 <HAL_RCC_OscConfig+0x620>)
 80030f6:	6a1a      	ldr	r2, [r3, #32]
 80030f8:	4bb5      	ldr	r3, [pc, #724]	; (80033d0 <HAL_RCC_OscConfig+0x620>)
 80030fa:	2101      	movs	r1, #1
 80030fc:	438a      	bics	r2, r1
 80030fe:	621a      	str	r2, [r3, #32]
 8003100:	4bb3      	ldr	r3, [pc, #716]	; (80033d0 <HAL_RCC_OscConfig+0x620>)
 8003102:	6a1a      	ldr	r2, [r3, #32]
 8003104:	4bb2      	ldr	r3, [pc, #712]	; (80033d0 <HAL_RCC_OscConfig+0x620>)
 8003106:	2104      	movs	r1, #4
 8003108:	438a      	bics	r2, r1
 800310a:	621a      	str	r2, [r3, #32]
 800310c:	e01c      	b.n	8003148 <HAL_RCC_OscConfig+0x398>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	2b05      	cmp	r3, #5
 8003114:	d10c      	bne.n	8003130 <HAL_RCC_OscConfig+0x380>
 8003116:	4bae      	ldr	r3, [pc, #696]	; (80033d0 <HAL_RCC_OscConfig+0x620>)
 8003118:	6a1a      	ldr	r2, [r3, #32]
 800311a:	4bad      	ldr	r3, [pc, #692]	; (80033d0 <HAL_RCC_OscConfig+0x620>)
 800311c:	2104      	movs	r1, #4
 800311e:	430a      	orrs	r2, r1
 8003120:	621a      	str	r2, [r3, #32]
 8003122:	4bab      	ldr	r3, [pc, #684]	; (80033d0 <HAL_RCC_OscConfig+0x620>)
 8003124:	6a1a      	ldr	r2, [r3, #32]
 8003126:	4baa      	ldr	r3, [pc, #680]	; (80033d0 <HAL_RCC_OscConfig+0x620>)
 8003128:	2101      	movs	r1, #1
 800312a:	430a      	orrs	r2, r1
 800312c:	621a      	str	r2, [r3, #32]
 800312e:	e00b      	b.n	8003148 <HAL_RCC_OscConfig+0x398>
 8003130:	4ba7      	ldr	r3, [pc, #668]	; (80033d0 <HAL_RCC_OscConfig+0x620>)
 8003132:	6a1a      	ldr	r2, [r3, #32]
 8003134:	4ba6      	ldr	r3, [pc, #664]	; (80033d0 <HAL_RCC_OscConfig+0x620>)
 8003136:	2101      	movs	r1, #1
 8003138:	438a      	bics	r2, r1
 800313a:	621a      	str	r2, [r3, #32]
 800313c:	4ba4      	ldr	r3, [pc, #656]	; (80033d0 <HAL_RCC_OscConfig+0x620>)
 800313e:	6a1a      	ldr	r2, [r3, #32]
 8003140:	4ba3      	ldr	r3, [pc, #652]	; (80033d0 <HAL_RCC_OscConfig+0x620>)
 8003142:	2104      	movs	r1, #4
 8003144:	438a      	bics	r2, r1
 8003146:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d014      	beq.n	800317a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003150:	f7fe fab6 	bl	80016c0 <HAL_GetTick>
 8003154:	0003      	movs	r3, r0
 8003156:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003158:	e009      	b.n	800316e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800315a:	f7fe fab1 	bl	80016c0 <HAL_GetTick>
 800315e:	0002      	movs	r2, r0
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	4a9b      	ldr	r2, [pc, #620]	; (80033d4 <HAL_RCC_OscConfig+0x624>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e12b      	b.n	80033c6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800316e:	4b98      	ldr	r3, [pc, #608]	; (80033d0 <HAL_RCC_OscConfig+0x620>)
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	2202      	movs	r2, #2
 8003174:	4013      	ands	r3, r2
 8003176:	d0f0      	beq.n	800315a <HAL_RCC_OscConfig+0x3aa>
 8003178:	e013      	b.n	80031a2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800317a:	f7fe faa1 	bl	80016c0 <HAL_GetTick>
 800317e:	0003      	movs	r3, r0
 8003180:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003182:	e009      	b.n	8003198 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003184:	f7fe fa9c 	bl	80016c0 <HAL_GetTick>
 8003188:	0002      	movs	r2, r0
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	4a91      	ldr	r2, [pc, #580]	; (80033d4 <HAL_RCC_OscConfig+0x624>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e116      	b.n	80033c6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003198:	4b8d      	ldr	r3, [pc, #564]	; (80033d0 <HAL_RCC_OscConfig+0x620>)
 800319a:	6a1b      	ldr	r3, [r3, #32]
 800319c:	2202      	movs	r2, #2
 800319e:	4013      	ands	r3, r2
 80031a0:	d1f0      	bne.n	8003184 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031a2:	231f      	movs	r3, #31
 80031a4:	18fb      	adds	r3, r7, r3
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d105      	bne.n	80031b8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ac:	4b88      	ldr	r3, [pc, #544]	; (80033d0 <HAL_RCC_OscConfig+0x620>)
 80031ae:	69da      	ldr	r2, [r3, #28]
 80031b0:	4b87      	ldr	r3, [pc, #540]	; (80033d0 <HAL_RCC_OscConfig+0x620>)
 80031b2:	4989      	ldr	r1, [pc, #548]	; (80033d8 <HAL_RCC_OscConfig+0x628>)
 80031b4:	400a      	ands	r2, r1
 80031b6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2210      	movs	r2, #16
 80031be:	4013      	ands	r3, r2
 80031c0:	d063      	beq.n	800328a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d12a      	bne.n	8003220 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80031ca:	4b81      	ldr	r3, [pc, #516]	; (80033d0 <HAL_RCC_OscConfig+0x620>)
 80031cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031ce:	4b80      	ldr	r3, [pc, #512]	; (80033d0 <HAL_RCC_OscConfig+0x620>)
 80031d0:	2104      	movs	r1, #4
 80031d2:	430a      	orrs	r2, r1
 80031d4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80031d6:	4b7e      	ldr	r3, [pc, #504]	; (80033d0 <HAL_RCC_OscConfig+0x620>)
 80031d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031da:	4b7d      	ldr	r3, [pc, #500]	; (80033d0 <HAL_RCC_OscConfig+0x620>)
 80031dc:	2101      	movs	r1, #1
 80031de:	430a      	orrs	r2, r1
 80031e0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031e2:	f7fe fa6d 	bl	80016c0 <HAL_GetTick>
 80031e6:	0003      	movs	r3, r0
 80031e8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80031ec:	f7fe fa68 	bl	80016c0 <HAL_GetTick>
 80031f0:	0002      	movs	r2, r0
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e0e3      	b.n	80033c6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80031fe:	4b74      	ldr	r3, [pc, #464]	; (80033d0 <HAL_RCC_OscConfig+0x620>)
 8003200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003202:	2202      	movs	r2, #2
 8003204:	4013      	ands	r3, r2
 8003206:	d0f1      	beq.n	80031ec <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003208:	4b71      	ldr	r3, [pc, #452]	; (80033d0 <HAL_RCC_OscConfig+0x620>)
 800320a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800320c:	22f8      	movs	r2, #248	; 0xf8
 800320e:	4393      	bics	r3, r2
 8003210:	0019      	movs	r1, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	00da      	lsls	r2, r3, #3
 8003218:	4b6d      	ldr	r3, [pc, #436]	; (80033d0 <HAL_RCC_OscConfig+0x620>)
 800321a:	430a      	orrs	r2, r1
 800321c:	635a      	str	r2, [r3, #52]	; 0x34
 800321e:	e034      	b.n	800328a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	3305      	adds	r3, #5
 8003226:	d111      	bne.n	800324c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003228:	4b69      	ldr	r3, [pc, #420]	; (80033d0 <HAL_RCC_OscConfig+0x620>)
 800322a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800322c:	4b68      	ldr	r3, [pc, #416]	; (80033d0 <HAL_RCC_OscConfig+0x620>)
 800322e:	2104      	movs	r1, #4
 8003230:	438a      	bics	r2, r1
 8003232:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003234:	4b66      	ldr	r3, [pc, #408]	; (80033d0 <HAL_RCC_OscConfig+0x620>)
 8003236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003238:	22f8      	movs	r2, #248	; 0xf8
 800323a:	4393      	bics	r3, r2
 800323c:	0019      	movs	r1, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	00da      	lsls	r2, r3, #3
 8003244:	4b62      	ldr	r3, [pc, #392]	; (80033d0 <HAL_RCC_OscConfig+0x620>)
 8003246:	430a      	orrs	r2, r1
 8003248:	635a      	str	r2, [r3, #52]	; 0x34
 800324a:	e01e      	b.n	800328a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800324c:	4b60      	ldr	r3, [pc, #384]	; (80033d0 <HAL_RCC_OscConfig+0x620>)
 800324e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003250:	4b5f      	ldr	r3, [pc, #380]	; (80033d0 <HAL_RCC_OscConfig+0x620>)
 8003252:	2104      	movs	r1, #4
 8003254:	430a      	orrs	r2, r1
 8003256:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003258:	4b5d      	ldr	r3, [pc, #372]	; (80033d0 <HAL_RCC_OscConfig+0x620>)
 800325a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800325c:	4b5c      	ldr	r3, [pc, #368]	; (80033d0 <HAL_RCC_OscConfig+0x620>)
 800325e:	2101      	movs	r1, #1
 8003260:	438a      	bics	r2, r1
 8003262:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003264:	f7fe fa2c 	bl	80016c0 <HAL_GetTick>
 8003268:	0003      	movs	r3, r0
 800326a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800326c:	e008      	b.n	8003280 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800326e:	f7fe fa27 	bl	80016c0 <HAL_GetTick>
 8003272:	0002      	movs	r2, r0
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e0a2      	b.n	80033c6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003280:	4b53      	ldr	r3, [pc, #332]	; (80033d0 <HAL_RCC_OscConfig+0x620>)
 8003282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003284:	2202      	movs	r2, #2
 8003286:	4013      	ands	r3, r2
 8003288:	d1f1      	bne.n	800326e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d100      	bne.n	8003294 <HAL_RCC_OscConfig+0x4e4>
 8003292:	e097      	b.n	80033c4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003294:	4b4e      	ldr	r3, [pc, #312]	; (80033d0 <HAL_RCC_OscConfig+0x620>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	220c      	movs	r2, #12
 800329a:	4013      	ands	r3, r2
 800329c:	2b08      	cmp	r3, #8
 800329e:	d100      	bne.n	80032a2 <HAL_RCC_OscConfig+0x4f2>
 80032a0:	e06b      	b.n	800337a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d14c      	bne.n	8003344 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032aa:	4b49      	ldr	r3, [pc, #292]	; (80033d0 <HAL_RCC_OscConfig+0x620>)
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	4b48      	ldr	r3, [pc, #288]	; (80033d0 <HAL_RCC_OscConfig+0x620>)
 80032b0:	494a      	ldr	r1, [pc, #296]	; (80033dc <HAL_RCC_OscConfig+0x62c>)
 80032b2:	400a      	ands	r2, r1
 80032b4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b6:	f7fe fa03 	bl	80016c0 <HAL_GetTick>
 80032ba:	0003      	movs	r3, r0
 80032bc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032c0:	f7fe f9fe 	bl	80016c0 <HAL_GetTick>
 80032c4:	0002      	movs	r2, r0
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e079      	b.n	80033c6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032d2:	4b3f      	ldr	r3, [pc, #252]	; (80033d0 <HAL_RCC_OscConfig+0x620>)
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	2380      	movs	r3, #128	; 0x80
 80032d8:	049b      	lsls	r3, r3, #18
 80032da:	4013      	ands	r3, r2
 80032dc:	d1f0      	bne.n	80032c0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032de:	4b3c      	ldr	r3, [pc, #240]	; (80033d0 <HAL_RCC_OscConfig+0x620>)
 80032e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e2:	220f      	movs	r2, #15
 80032e4:	4393      	bics	r3, r2
 80032e6:	0019      	movs	r1, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ec:	4b38      	ldr	r3, [pc, #224]	; (80033d0 <HAL_RCC_OscConfig+0x620>)
 80032ee:	430a      	orrs	r2, r1
 80032f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80032f2:	4b37      	ldr	r3, [pc, #220]	; (80033d0 <HAL_RCC_OscConfig+0x620>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	4a3a      	ldr	r2, [pc, #232]	; (80033e0 <HAL_RCC_OscConfig+0x630>)
 80032f8:	4013      	ands	r3, r2
 80032fa:	0019      	movs	r1, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003304:	431a      	orrs	r2, r3
 8003306:	4b32      	ldr	r3, [pc, #200]	; (80033d0 <HAL_RCC_OscConfig+0x620>)
 8003308:	430a      	orrs	r2, r1
 800330a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800330c:	4b30      	ldr	r3, [pc, #192]	; (80033d0 <HAL_RCC_OscConfig+0x620>)
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	4b2f      	ldr	r3, [pc, #188]	; (80033d0 <HAL_RCC_OscConfig+0x620>)
 8003312:	2180      	movs	r1, #128	; 0x80
 8003314:	0449      	lsls	r1, r1, #17
 8003316:	430a      	orrs	r2, r1
 8003318:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800331a:	f7fe f9d1 	bl	80016c0 <HAL_GetTick>
 800331e:	0003      	movs	r3, r0
 8003320:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003324:	f7fe f9cc 	bl	80016c0 <HAL_GetTick>
 8003328:	0002      	movs	r2, r0
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e047      	b.n	80033c6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003336:	4b26      	ldr	r3, [pc, #152]	; (80033d0 <HAL_RCC_OscConfig+0x620>)
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	2380      	movs	r3, #128	; 0x80
 800333c:	049b      	lsls	r3, r3, #18
 800333e:	4013      	ands	r3, r2
 8003340:	d0f0      	beq.n	8003324 <HAL_RCC_OscConfig+0x574>
 8003342:	e03f      	b.n	80033c4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003344:	4b22      	ldr	r3, [pc, #136]	; (80033d0 <HAL_RCC_OscConfig+0x620>)
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	4b21      	ldr	r3, [pc, #132]	; (80033d0 <HAL_RCC_OscConfig+0x620>)
 800334a:	4924      	ldr	r1, [pc, #144]	; (80033dc <HAL_RCC_OscConfig+0x62c>)
 800334c:	400a      	ands	r2, r1
 800334e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003350:	f7fe f9b6 	bl	80016c0 <HAL_GetTick>
 8003354:	0003      	movs	r3, r0
 8003356:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003358:	e008      	b.n	800336c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800335a:	f7fe f9b1 	bl	80016c0 <HAL_GetTick>
 800335e:	0002      	movs	r2, r0
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e02c      	b.n	80033c6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800336c:	4b18      	ldr	r3, [pc, #96]	; (80033d0 <HAL_RCC_OscConfig+0x620>)
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	2380      	movs	r3, #128	; 0x80
 8003372:	049b      	lsls	r3, r3, #18
 8003374:	4013      	ands	r3, r2
 8003376:	d1f0      	bne.n	800335a <HAL_RCC_OscConfig+0x5aa>
 8003378:	e024      	b.n	80033c4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d101      	bne.n	8003386 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e01f      	b.n	80033c6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003386:	4b12      	ldr	r3, [pc, #72]	; (80033d0 <HAL_RCC_OscConfig+0x620>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800338c:	4b10      	ldr	r3, [pc, #64]	; (80033d0 <HAL_RCC_OscConfig+0x620>)
 800338e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003390:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	2380      	movs	r3, #128	; 0x80
 8003396:	025b      	lsls	r3, r3, #9
 8003398:	401a      	ands	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	429a      	cmp	r2, r3
 80033a0:	d10e      	bne.n	80033c0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	220f      	movs	r2, #15
 80033a6:	401a      	ands	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d107      	bne.n	80033c0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	23f0      	movs	r3, #240	; 0xf0
 80033b4:	039b      	lsls	r3, r3, #14
 80033b6:	401a      	ands	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80033bc:	429a      	cmp	r2, r3
 80033be:	d001      	beq.n	80033c4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e000      	b.n	80033c6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	0018      	movs	r0, r3
 80033c8:	46bd      	mov	sp, r7
 80033ca:	b008      	add	sp, #32
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	46c0      	nop			; (mov r8, r8)
 80033d0:	40021000 	.word	0x40021000
 80033d4:	00001388 	.word	0x00001388
 80033d8:	efffffff 	.word	0xefffffff
 80033dc:	feffffff 	.word	0xfeffffff
 80033e0:	ffc2ffff 	.word	0xffc2ffff

080033e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d101      	bne.n	80033f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e0b3      	b.n	8003560 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033f8:	4b5b      	ldr	r3, [pc, #364]	; (8003568 <HAL_RCC_ClockConfig+0x184>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2201      	movs	r2, #1
 80033fe:	4013      	ands	r3, r2
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	429a      	cmp	r2, r3
 8003404:	d911      	bls.n	800342a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003406:	4b58      	ldr	r3, [pc, #352]	; (8003568 <HAL_RCC_ClockConfig+0x184>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2201      	movs	r2, #1
 800340c:	4393      	bics	r3, r2
 800340e:	0019      	movs	r1, r3
 8003410:	4b55      	ldr	r3, [pc, #340]	; (8003568 <HAL_RCC_ClockConfig+0x184>)
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003418:	4b53      	ldr	r3, [pc, #332]	; (8003568 <HAL_RCC_ClockConfig+0x184>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2201      	movs	r2, #1
 800341e:	4013      	ands	r3, r2
 8003420:	683a      	ldr	r2, [r7, #0]
 8003422:	429a      	cmp	r2, r3
 8003424:	d001      	beq.n	800342a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e09a      	b.n	8003560 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2202      	movs	r2, #2
 8003430:	4013      	ands	r3, r2
 8003432:	d015      	beq.n	8003460 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2204      	movs	r2, #4
 800343a:	4013      	ands	r3, r2
 800343c:	d006      	beq.n	800344c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800343e:	4b4b      	ldr	r3, [pc, #300]	; (800356c <HAL_RCC_ClockConfig+0x188>)
 8003440:	685a      	ldr	r2, [r3, #4]
 8003442:	4b4a      	ldr	r3, [pc, #296]	; (800356c <HAL_RCC_ClockConfig+0x188>)
 8003444:	21e0      	movs	r1, #224	; 0xe0
 8003446:	00c9      	lsls	r1, r1, #3
 8003448:	430a      	orrs	r2, r1
 800344a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800344c:	4b47      	ldr	r3, [pc, #284]	; (800356c <HAL_RCC_ClockConfig+0x188>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	22f0      	movs	r2, #240	; 0xf0
 8003452:	4393      	bics	r3, r2
 8003454:	0019      	movs	r1, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	689a      	ldr	r2, [r3, #8]
 800345a:	4b44      	ldr	r3, [pc, #272]	; (800356c <HAL_RCC_ClockConfig+0x188>)
 800345c:	430a      	orrs	r2, r1
 800345e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2201      	movs	r2, #1
 8003466:	4013      	ands	r3, r2
 8003468:	d040      	beq.n	80034ec <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d107      	bne.n	8003482 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003472:	4b3e      	ldr	r3, [pc, #248]	; (800356c <HAL_RCC_ClockConfig+0x188>)
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	2380      	movs	r3, #128	; 0x80
 8003478:	029b      	lsls	r3, r3, #10
 800347a:	4013      	ands	r3, r2
 800347c:	d114      	bne.n	80034a8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e06e      	b.n	8003560 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2b02      	cmp	r3, #2
 8003488:	d107      	bne.n	800349a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800348a:	4b38      	ldr	r3, [pc, #224]	; (800356c <HAL_RCC_ClockConfig+0x188>)
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	2380      	movs	r3, #128	; 0x80
 8003490:	049b      	lsls	r3, r3, #18
 8003492:	4013      	ands	r3, r2
 8003494:	d108      	bne.n	80034a8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e062      	b.n	8003560 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800349a:	4b34      	ldr	r3, [pc, #208]	; (800356c <HAL_RCC_ClockConfig+0x188>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2202      	movs	r2, #2
 80034a0:	4013      	ands	r3, r2
 80034a2:	d101      	bne.n	80034a8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e05b      	b.n	8003560 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034a8:	4b30      	ldr	r3, [pc, #192]	; (800356c <HAL_RCC_ClockConfig+0x188>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	2203      	movs	r2, #3
 80034ae:	4393      	bics	r3, r2
 80034b0:	0019      	movs	r1, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	4b2d      	ldr	r3, [pc, #180]	; (800356c <HAL_RCC_ClockConfig+0x188>)
 80034b8:	430a      	orrs	r2, r1
 80034ba:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034bc:	f7fe f900 	bl	80016c0 <HAL_GetTick>
 80034c0:	0003      	movs	r3, r0
 80034c2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034c4:	e009      	b.n	80034da <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034c6:	f7fe f8fb 	bl	80016c0 <HAL_GetTick>
 80034ca:	0002      	movs	r2, r0
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	4a27      	ldr	r2, [pc, #156]	; (8003570 <HAL_RCC_ClockConfig+0x18c>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e042      	b.n	8003560 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034da:	4b24      	ldr	r3, [pc, #144]	; (800356c <HAL_RCC_ClockConfig+0x188>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	220c      	movs	r2, #12
 80034e0:	401a      	ands	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d1ec      	bne.n	80034c6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034ec:	4b1e      	ldr	r3, [pc, #120]	; (8003568 <HAL_RCC_ClockConfig+0x184>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2201      	movs	r2, #1
 80034f2:	4013      	ands	r3, r2
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d211      	bcs.n	800351e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034fa:	4b1b      	ldr	r3, [pc, #108]	; (8003568 <HAL_RCC_ClockConfig+0x184>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2201      	movs	r2, #1
 8003500:	4393      	bics	r3, r2
 8003502:	0019      	movs	r1, r3
 8003504:	4b18      	ldr	r3, [pc, #96]	; (8003568 <HAL_RCC_ClockConfig+0x184>)
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800350c:	4b16      	ldr	r3, [pc, #88]	; (8003568 <HAL_RCC_ClockConfig+0x184>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2201      	movs	r2, #1
 8003512:	4013      	ands	r3, r2
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	429a      	cmp	r2, r3
 8003518:	d001      	beq.n	800351e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e020      	b.n	8003560 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2204      	movs	r2, #4
 8003524:	4013      	ands	r3, r2
 8003526:	d009      	beq.n	800353c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003528:	4b10      	ldr	r3, [pc, #64]	; (800356c <HAL_RCC_ClockConfig+0x188>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	4a11      	ldr	r2, [pc, #68]	; (8003574 <HAL_RCC_ClockConfig+0x190>)
 800352e:	4013      	ands	r3, r2
 8003530:	0019      	movs	r1, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68da      	ldr	r2, [r3, #12]
 8003536:	4b0d      	ldr	r3, [pc, #52]	; (800356c <HAL_RCC_ClockConfig+0x188>)
 8003538:	430a      	orrs	r2, r1
 800353a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800353c:	f000 f820 	bl	8003580 <HAL_RCC_GetSysClockFreq>
 8003540:	0001      	movs	r1, r0
 8003542:	4b0a      	ldr	r3, [pc, #40]	; (800356c <HAL_RCC_ClockConfig+0x188>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	091b      	lsrs	r3, r3, #4
 8003548:	220f      	movs	r2, #15
 800354a:	4013      	ands	r3, r2
 800354c:	4a0a      	ldr	r2, [pc, #40]	; (8003578 <HAL_RCC_ClockConfig+0x194>)
 800354e:	5cd3      	ldrb	r3, [r2, r3]
 8003550:	000a      	movs	r2, r1
 8003552:	40da      	lsrs	r2, r3
 8003554:	4b09      	ldr	r3, [pc, #36]	; (800357c <HAL_RCC_ClockConfig+0x198>)
 8003556:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003558:	2003      	movs	r0, #3
 800355a:	f7fe f86b 	bl	8001634 <HAL_InitTick>
  
  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	0018      	movs	r0, r3
 8003562:	46bd      	mov	sp, r7
 8003564:	b004      	add	sp, #16
 8003566:	bd80      	pop	{r7, pc}
 8003568:	40022000 	.word	0x40022000
 800356c:	40021000 	.word	0x40021000
 8003570:	00001388 	.word	0x00001388
 8003574:	fffff8ff 	.word	0xfffff8ff
 8003578:	08004c80 	.word	0x08004c80
 800357c:	20000020 	.word	0x20000020

08003580 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003580:	b590      	push	{r4, r7, lr}
 8003582:	b08f      	sub	sp, #60	; 0x3c
 8003584:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003586:	2314      	movs	r3, #20
 8003588:	18fb      	adds	r3, r7, r3
 800358a:	4a2b      	ldr	r2, [pc, #172]	; (8003638 <HAL_RCC_GetSysClockFreq+0xb8>)
 800358c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800358e:	c313      	stmia	r3!, {r0, r1, r4}
 8003590:	6812      	ldr	r2, [r2, #0]
 8003592:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003594:	1d3b      	adds	r3, r7, #4
 8003596:	4a29      	ldr	r2, [pc, #164]	; (800363c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003598:	ca13      	ldmia	r2!, {r0, r1, r4}
 800359a:	c313      	stmia	r3!, {r0, r1, r4}
 800359c:	6812      	ldr	r2, [r2, #0]
 800359e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035a0:	2300      	movs	r3, #0
 80035a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035a4:	2300      	movs	r3, #0
 80035a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80035a8:	2300      	movs	r3, #0
 80035aa:	637b      	str	r3, [r7, #52]	; 0x34
 80035ac:	2300      	movs	r3, #0
 80035ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80035b0:	2300      	movs	r3, #0
 80035b2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80035b4:	4b22      	ldr	r3, [pc, #136]	; (8003640 <HAL_RCC_GetSysClockFreq+0xc0>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035bc:	220c      	movs	r2, #12
 80035be:	4013      	ands	r3, r2
 80035c0:	2b04      	cmp	r3, #4
 80035c2:	d002      	beq.n	80035ca <HAL_RCC_GetSysClockFreq+0x4a>
 80035c4:	2b08      	cmp	r3, #8
 80035c6:	d003      	beq.n	80035d0 <HAL_RCC_GetSysClockFreq+0x50>
 80035c8:	e02d      	b.n	8003626 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035ca:	4b1e      	ldr	r3, [pc, #120]	; (8003644 <HAL_RCC_GetSysClockFreq+0xc4>)
 80035cc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80035ce:	e02d      	b.n	800362c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80035d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d2:	0c9b      	lsrs	r3, r3, #18
 80035d4:	220f      	movs	r2, #15
 80035d6:	4013      	ands	r3, r2
 80035d8:	2214      	movs	r2, #20
 80035da:	18ba      	adds	r2, r7, r2
 80035dc:	5cd3      	ldrb	r3, [r2, r3]
 80035de:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80035e0:	4b17      	ldr	r3, [pc, #92]	; (8003640 <HAL_RCC_GetSysClockFreq+0xc0>)
 80035e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e4:	220f      	movs	r2, #15
 80035e6:	4013      	ands	r3, r2
 80035e8:	1d3a      	adds	r2, r7, #4
 80035ea:	5cd3      	ldrb	r3, [r2, r3]
 80035ec:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80035ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035f0:	2380      	movs	r3, #128	; 0x80
 80035f2:	025b      	lsls	r3, r3, #9
 80035f4:	4013      	ands	r3, r2
 80035f6:	d009      	beq.n	800360c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80035f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035fa:	4812      	ldr	r0, [pc, #72]	; (8003644 <HAL_RCC_GetSysClockFreq+0xc4>)
 80035fc:	f7fc fd96 	bl	800012c <__udivsi3>
 8003600:	0003      	movs	r3, r0
 8003602:	001a      	movs	r2, r3
 8003604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003606:	4353      	muls	r3, r2
 8003608:	637b      	str	r3, [r7, #52]	; 0x34
 800360a:	e009      	b.n	8003620 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800360c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800360e:	000a      	movs	r2, r1
 8003610:	0152      	lsls	r2, r2, #5
 8003612:	1a52      	subs	r2, r2, r1
 8003614:	0193      	lsls	r3, r2, #6
 8003616:	1a9b      	subs	r3, r3, r2
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	185b      	adds	r3, r3, r1
 800361c:	021b      	lsls	r3, r3, #8
 800361e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8003620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003622:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003624:	e002      	b.n	800362c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003626:	4b07      	ldr	r3, [pc, #28]	; (8003644 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003628:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800362a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800362c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800362e:	0018      	movs	r0, r3
 8003630:	46bd      	mov	sp, r7
 8003632:	b00f      	add	sp, #60	; 0x3c
 8003634:	bd90      	pop	{r4, r7, pc}
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	08004c4c 	.word	0x08004c4c
 800363c:	08004c5c 	.word	0x08004c5c
 8003640:	40021000 	.word	0x40021000
 8003644:	007a1200 	.word	0x007a1200

08003648 <BCD_To_DEC>:

#define DS3231_ADDRESS			(0x68 << 1)
#define SECOND_VALUE_ADDRESS	(0x00)
#define DATE_VALUE_ADDRESS		(0x03)

static uint8_t BCD_To_DEC(uint8_t p_BCD_value){
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	0002      	movs	r2, r0
 8003650:	1dfb      	adds	r3, r7, #7
 8003652:	701a      	strb	r2, [r3, #0]
	return ((p_BCD_value >> 4) * 10) + (p_BCD_value & 0x0F);
 8003654:	1dfb      	adds	r3, r7, #7
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	091b      	lsrs	r3, r3, #4
 800365a:	b2db      	uxtb	r3, r3
 800365c:	1c1a      	adds	r2, r3, #0
 800365e:	0092      	lsls	r2, r2, #2
 8003660:	18d3      	adds	r3, r2, r3
 8003662:	18db      	adds	r3, r3, r3
 8003664:	b2da      	uxtb	r2, r3
 8003666:	1dfb      	adds	r3, r7, #7
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	210f      	movs	r1, #15
 800366c:	400b      	ands	r3, r1
 800366e:	b2db      	uxtb	r3, r3
 8003670:	18d3      	adds	r3, r2, r3
 8003672:	b2db      	uxtb	r3, r3
}
 8003674:	0018      	movs	r0, r3
 8003676:	46bd      	mov	sp, r7
 8003678:	b002      	add	sp, #8
 800367a:	bd80      	pop	{r7, pc}

0800367c <DEC_To_BCD>:

static uint8_t DEC_To_BCD(uint8_t p_DEC_value){
 800367c:	b590      	push	{r4, r7, lr}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	0002      	movs	r2, r0
 8003684:	1dfb      	adds	r3, r7, #7
 8003686:	701a      	strb	r2, [r3, #0]
	return ((p_DEC_value / 10) << 4) | (p_DEC_value % 10);
 8003688:	1dfb      	adds	r3, r7, #7
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	210a      	movs	r1, #10
 800368e:	0018      	movs	r0, r3
 8003690:	f7fc fd4c 	bl	800012c <__udivsi3>
 8003694:	0003      	movs	r3, r0
 8003696:	b2db      	uxtb	r3, r3
 8003698:	011b      	lsls	r3, r3, #4
 800369a:	b25c      	sxtb	r4, r3
 800369c:	1dfb      	adds	r3, r7, #7
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	210a      	movs	r1, #10
 80036a2:	0018      	movs	r0, r3
 80036a4:	f7fc fdc8 	bl	8000238 <__aeabi_uidivmod>
 80036a8:	000b      	movs	r3, r1
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	b25b      	sxtb	r3, r3
 80036ae:	4323      	orrs	r3, r4
 80036b0:	b25b      	sxtb	r3, r3
 80036b2:	b2db      	uxtb	r3, r3
}
 80036b4:	0018      	movs	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b003      	add	sp, #12
 80036ba:	bd90      	pop	{r4, r7, pc}

080036bc <DS3231_Init>:

void DS3231_Init(DS3231_HandleTypeDef *p_ds3231, I2C_HandleTypeDef *p_hi2c){
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
	p_ds3231->hi2c = p_hi2c;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	609a      	str	r2, [r3, #8]
}
 80036cc:	46c0      	nop			; (mov r8, r8)
 80036ce:	46bd      	mov	sp, r7
 80036d0:	b002      	add	sp, #8
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <DS3231_Set_Time>:

void DS3231_Set_Time(DS3231_HandleTypeDef *p_ds3231, uint8_t p_hour, uint8_t p_minute, uint8_t p_second, uint8_t p_day){
 80036d4:	b590      	push	{r4, r7, lr}
 80036d6:	b089      	sub	sp, #36	; 0x24
 80036d8:	af04      	add	r7, sp, #16
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	000c      	movs	r4, r1
 80036de:	0010      	movs	r0, r2
 80036e0:	0019      	movs	r1, r3
 80036e2:	1cfb      	adds	r3, r7, #3
 80036e4:	1c22      	adds	r2, r4, #0
 80036e6:	701a      	strb	r2, [r3, #0]
 80036e8:	1cbb      	adds	r3, r7, #2
 80036ea:	1c02      	adds	r2, r0, #0
 80036ec:	701a      	strb	r2, [r3, #0]
 80036ee:	1c7b      	adds	r3, r7, #1
 80036f0:	1c0a      	adds	r2, r1, #0
 80036f2:	701a      	strb	r2, [r3, #0]
	uint8_t t_i2c_buffer[4];
	t_i2c_buffer[0] = DEC_To_BCD(p_second);
 80036f4:	1c7b      	adds	r3, r7, #1
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	0018      	movs	r0, r3
 80036fa:	f7ff ffbf 	bl	800367c <DEC_To_BCD>
 80036fe:	0003      	movs	r3, r0
 8003700:	001a      	movs	r2, r3
 8003702:	240c      	movs	r4, #12
 8003704:	193b      	adds	r3, r7, r4
 8003706:	701a      	strb	r2, [r3, #0]
	t_i2c_buffer[1] = DEC_To_BCD(p_minute);
 8003708:	1cbb      	adds	r3, r7, #2
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	0018      	movs	r0, r3
 800370e:	f7ff ffb5 	bl	800367c <DEC_To_BCD>
 8003712:	0003      	movs	r3, r0
 8003714:	001a      	movs	r2, r3
 8003716:	193b      	adds	r3, r7, r4
 8003718:	705a      	strb	r2, [r3, #1]
	t_i2c_buffer[2] = DEC_To_BCD(p_hour) & (~USING_12_HOURS_TIME);
 800371a:	1cfb      	adds	r3, r7, #3
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	0018      	movs	r0, r3
 8003720:	f7ff ffac 	bl	800367c <DEC_To_BCD>
 8003724:	0003      	movs	r3, r0
 8003726:	001a      	movs	r2, r3
 8003728:	2340      	movs	r3, #64	; 0x40
 800372a:	439a      	bics	r2, r3
 800372c:	0013      	movs	r3, r2
 800372e:	b2da      	uxtb	r2, r3
 8003730:	193b      	adds	r3, r7, r4
 8003732:	709a      	strb	r2, [r3, #2]
	t_i2c_buffer[3] = DEC_To_BCD(p_day);
 8003734:	2320      	movs	r3, #32
 8003736:	18fb      	adds	r3, r7, r3
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	0018      	movs	r0, r3
 800373c:	f7ff ff9e 	bl	800367c <DEC_To_BCD>
 8003740:	0003      	movs	r3, r0
 8003742:	001a      	movs	r2, r3
 8003744:	193b      	adds	r3, r7, r4
 8003746:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Mem_Write(p_ds3231->hi2c, DS3231_ADDRESS, SECOND_VALUE_ADDRESS, I2C_MEMADD_SIZE_8BIT, t_i2c_buffer, 4, 1000);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6898      	ldr	r0, [r3, #8]
 800374c:	23fa      	movs	r3, #250	; 0xfa
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	9302      	str	r3, [sp, #8]
 8003752:	2304      	movs	r3, #4
 8003754:	9301      	str	r3, [sp, #4]
 8003756:	193b      	adds	r3, r7, r4
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	2301      	movs	r3, #1
 800375c:	2200      	movs	r2, #0
 800375e:	21d0      	movs	r1, #208	; 0xd0
 8003760:	f7fe fdda 	bl	8002318 <HAL_I2C_Mem_Write>
}
 8003764:	46c0      	nop			; (mov r8, r8)
 8003766:	46bd      	mov	sp, r7
 8003768:	b005      	add	sp, #20
 800376a:	bd90      	pop	{r4, r7, pc}

0800376c <DS3231_Get_Time>:

uint8_t DS3231_Get_Time(DS3231_HandleTypeDef *p_ds3231){
 800376c:	b590      	push	{r4, r7, lr}
 800376e:	b089      	sub	sp, #36	; 0x24
 8003770:	af04      	add	r7, sp, #16
 8003772:	6078      	str	r0, [r7, #4]
	uint8_t t_i2c_buffer[4];
	if(HAL_I2C_Mem_Read(p_ds3231->hi2c, DS3231_ADDRESS, SECOND_VALUE_ADDRESS, I2C_MEMADD_SIZE_8BIT, t_i2c_buffer, 4, 1000) != HAL_OK){
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6898      	ldr	r0, [r3, #8]
 8003778:	23fa      	movs	r3, #250	; 0xfa
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	9302      	str	r3, [sp, #8]
 800377e:	2304      	movs	r3, #4
 8003780:	9301      	str	r3, [sp, #4]
 8003782:	230c      	movs	r3, #12
 8003784:	18fb      	adds	r3, r7, r3
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	2301      	movs	r3, #1
 800378a:	2200      	movs	r2, #0
 800378c:	21d0      	movs	r1, #208	; 0xd0
 800378e:	f7fe fef1 	bl	8002574 <HAL_I2C_Mem_Read>
 8003792:	1e03      	subs	r3, r0, #0
 8003794:	d001      	beq.n	800379a <DS3231_Get_Time+0x2e>
		return DS3231_FAIL;
 8003796:	2300      	movs	r3, #0
 8003798:	e025      	b.n	80037e6 <DS3231_Get_Time+0x7a>
	}
	p_ds3231->current_second = BCD_To_DEC(t_i2c_buffer[0]);
 800379a:	240c      	movs	r4, #12
 800379c:	193b      	adds	r3, r7, r4
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	0018      	movs	r0, r3
 80037a2:	f7ff ff51 	bl	8003648 <BCD_To_DEC>
 80037a6:	0003      	movs	r3, r0
 80037a8:	001a      	movs	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	709a      	strb	r2, [r3, #2]
	p_ds3231->current_minute = BCD_To_DEC(t_i2c_buffer[1]);
 80037ae:	193b      	adds	r3, r7, r4
 80037b0:	785b      	ldrb	r3, [r3, #1]
 80037b2:	0018      	movs	r0, r3
 80037b4:	f7ff ff48 	bl	8003648 <BCD_To_DEC>
 80037b8:	0003      	movs	r3, r0
 80037ba:	001a      	movs	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	705a      	strb	r2, [r3, #1]
	p_ds3231->current_hour = BCD_To_DEC(t_i2c_buffer[2]);
 80037c0:	193b      	adds	r3, r7, r4
 80037c2:	789b      	ldrb	r3, [r3, #2]
 80037c4:	0018      	movs	r0, r3
 80037c6:	f7ff ff3f 	bl	8003648 <BCD_To_DEC>
 80037ca:	0003      	movs	r3, r0
 80037cc:	001a      	movs	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	701a      	strb	r2, [r3, #0]
	p_ds3231->current_day = BCD_To_DEC(t_i2c_buffer[3]);
 80037d2:	193b      	adds	r3, r7, r4
 80037d4:	78db      	ldrb	r3, [r3, #3]
 80037d6:	0018      	movs	r0, r3
 80037d8:	f7ff ff36 	bl	8003648 <BCD_To_DEC>
 80037dc:	0003      	movs	r3, r0
 80037de:	001a      	movs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	70da      	strb	r2, [r3, #3]
	return DS3231_OK;
 80037e4:	2301      	movs	r3, #1
}
 80037e6:	0018      	movs	r0, r3
 80037e8:	46bd      	mov	sp, r7
 80037ea:	b005      	add	sp, #20
 80037ec:	bd90      	pop	{r4, r7, pc}

080037ee <DS3231_Set_Date>:

void DS3231_Set_Date(DS3231_HandleTypeDef *p_ds3231, uint8_t p_date, uint8_t p_month, uint8_t p_year){
 80037ee:	b590      	push	{r4, r7, lr}
 80037f0:	b089      	sub	sp, #36	; 0x24
 80037f2:	af04      	add	r7, sp, #16
 80037f4:	6078      	str	r0, [r7, #4]
 80037f6:	000c      	movs	r4, r1
 80037f8:	0010      	movs	r0, r2
 80037fa:	0019      	movs	r1, r3
 80037fc:	1cfb      	adds	r3, r7, #3
 80037fe:	1c22      	adds	r2, r4, #0
 8003800:	701a      	strb	r2, [r3, #0]
 8003802:	1cbb      	adds	r3, r7, #2
 8003804:	1c02      	adds	r2, r0, #0
 8003806:	701a      	strb	r2, [r3, #0]
 8003808:	1c7b      	adds	r3, r7, #1
 800380a:	1c0a      	adds	r2, r1, #0
 800380c:	701a      	strb	r2, [r3, #0]
	uint8_t t_i2c_buffer[3];
	t_i2c_buffer[0] = DEC_To_BCD(p_date);
 800380e:	1cfb      	adds	r3, r7, #3
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	0018      	movs	r0, r3
 8003814:	f7ff ff32 	bl	800367c <DEC_To_BCD>
 8003818:	0003      	movs	r3, r0
 800381a:	001a      	movs	r2, r3
 800381c:	240c      	movs	r4, #12
 800381e:	193b      	adds	r3, r7, r4
 8003820:	701a      	strb	r2, [r3, #0]
	t_i2c_buffer[1] = DEC_To_BCD(p_month);
 8003822:	1cbb      	adds	r3, r7, #2
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	0018      	movs	r0, r3
 8003828:	f7ff ff28 	bl	800367c <DEC_To_BCD>
 800382c:	0003      	movs	r3, r0
 800382e:	001a      	movs	r2, r3
 8003830:	193b      	adds	r3, r7, r4
 8003832:	705a      	strb	r2, [r3, #1]
	t_i2c_buffer[2] = DEC_To_BCD(p_year);
 8003834:	1c7b      	adds	r3, r7, #1
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	0018      	movs	r0, r3
 800383a:	f7ff ff1f 	bl	800367c <DEC_To_BCD>
 800383e:	0003      	movs	r3, r0
 8003840:	001a      	movs	r2, r3
 8003842:	193b      	adds	r3, r7, r4
 8003844:	709a      	strb	r2, [r3, #2]
	HAL_I2C_Mem_Write(p_ds3231->hi2c, DS3231_ADDRESS, DATE_VALUE_ADDRESS, I2C_MEMADD_SIZE_8BIT, t_i2c_buffer, 3, 1000);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6898      	ldr	r0, [r3, #8]
 800384a:	23fa      	movs	r3, #250	; 0xfa
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	9302      	str	r3, [sp, #8]
 8003850:	2303      	movs	r3, #3
 8003852:	9301      	str	r3, [sp, #4]
 8003854:	193b      	adds	r3, r7, r4
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	2301      	movs	r3, #1
 800385a:	2203      	movs	r2, #3
 800385c:	21d0      	movs	r1, #208	; 0xd0
 800385e:	f7fe fd5b 	bl	8002318 <HAL_I2C_Mem_Write>
}
 8003862:	46c0      	nop			; (mov r8, r8)
 8003864:	46bd      	mov	sp, r7
 8003866:	b005      	add	sp, #20
 8003868:	bd90      	pop	{r4, r7, pc}

0800386a <DS3231_Get_Date>:

uint8_t DS3231_Get_Date(DS3231_HandleTypeDef *p_ds3231){
 800386a:	b590      	push	{r4, r7, lr}
 800386c:	b089      	sub	sp, #36	; 0x24
 800386e:	af04      	add	r7, sp, #16
 8003870:	6078      	str	r0, [r7, #4]
	uint8_t t_i2c_buffer[3];
	if(HAL_I2C_Mem_Read(p_ds3231->hi2c, DS3231_ADDRESS, DATE_VALUE_ADDRESS, I2C_MEMADD_SIZE_8BIT, t_i2c_buffer, 3, 1000) != HAL_OK){
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6898      	ldr	r0, [r3, #8]
 8003876:	23fa      	movs	r3, #250	; 0xfa
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	9302      	str	r3, [sp, #8]
 800387c:	2303      	movs	r3, #3
 800387e:	9301      	str	r3, [sp, #4]
 8003880:	230c      	movs	r3, #12
 8003882:	18fb      	adds	r3, r7, r3
 8003884:	9300      	str	r3, [sp, #0]
 8003886:	2301      	movs	r3, #1
 8003888:	2203      	movs	r2, #3
 800388a:	21d0      	movs	r1, #208	; 0xd0
 800388c:	f7fe fe72 	bl	8002574 <HAL_I2C_Mem_Read>
 8003890:	1e03      	subs	r3, r0, #0
 8003892:	d001      	beq.n	8003898 <DS3231_Get_Date+0x2e>
		return DS3231_FAIL;
 8003894:	2300      	movs	r3, #0
 8003896:	e01c      	b.n	80038d2 <DS3231_Get_Date+0x68>
	}
	p_ds3231->current_date = BCD_To_DEC(t_i2c_buffer[0]);
 8003898:	240c      	movs	r4, #12
 800389a:	193b      	adds	r3, r7, r4
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	0018      	movs	r0, r3
 80038a0:	f7ff fed2 	bl	8003648 <BCD_To_DEC>
 80038a4:	0003      	movs	r3, r0
 80038a6:	001a      	movs	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	711a      	strb	r2, [r3, #4]
	p_ds3231->current_month = BCD_To_DEC(t_i2c_buffer[1]);
 80038ac:	193b      	adds	r3, r7, r4
 80038ae:	785b      	ldrb	r3, [r3, #1]
 80038b0:	0018      	movs	r0, r3
 80038b2:	f7ff fec9 	bl	8003648 <BCD_To_DEC>
 80038b6:	0003      	movs	r3, r0
 80038b8:	001a      	movs	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	715a      	strb	r2, [r3, #5]
	p_ds3231->current_year = BCD_To_DEC(t_i2c_buffer[2]);
 80038be:	193b      	adds	r3, r7, r4
 80038c0:	789b      	ldrb	r3, [r3, #2]
 80038c2:	0018      	movs	r0, r3
 80038c4:	f7ff fec0 	bl	8003648 <BCD_To_DEC>
 80038c8:	0003      	movs	r3, r0
 80038ca:	001a      	movs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	719a      	strb	r2, [r3, #6]
	return DS3231_OK;
 80038d0:	2301      	movs	r3, #1
}
 80038d2:	0018      	movs	r0, r3
 80038d4:	46bd      	mov	sp, r7
 80038d6:	b005      	add	sp, #20
 80038d8:	bd90      	pop	{r4, r7, pc}

080038da <KeypadPressedShortCallback>:
__weak void KeypadPressingCallback(uint8_t p_key)
{

}
__weak void KeypadPressedShortCallback(uint8_t p_key)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b082      	sub	sp, #8
 80038de:	af00      	add	r7, sp, #0
 80038e0:	0002      	movs	r2, r0
 80038e2:	1dfb      	adds	r3, r7, #7
 80038e4:	701a      	strb	r2, [r3, #0]

}
 80038e6:	46c0      	nop			; (mov r8, r8)
 80038e8:	46bd      	mov	sp, r7
 80038ea:	b002      	add	sp, #8
 80038ec:	bd80      	pop	{r7, pc}

080038ee <KeypadReleaseCallback>:
__weak void KeypadReleaseCallback(uint8_t p_key)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b082      	sub	sp, #8
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	0002      	movs	r2, r0
 80038f6:	1dfb      	adds	r3, r7, #7
 80038f8:	701a      	strb	r2, [r3, #0]

}
 80038fa:	46c0      	nop			; (mov r8, r8)
 80038fc:	46bd      	mov	sp, r7
 80038fe:	b002      	add	sp, #8
 8003900:	bd80      	pop	{r7, pc}

08003902 <KeypadPressingTimeoutCallback>:

__weak void KeypadPressingTimeoutCallback(uint8_t p_key)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b082      	sub	sp, #8
 8003906:	af00      	add	r7, sp, #0
 8003908:	0002      	movs	r2, r0
 800390a:	1dfb      	adds	r3, r7, #7
 800390c:	701a      	strb	r2, [r3, #0]

}
 800390e:	46c0      	nop			; (mov r8, r8)
 8003910:	46bd      	mov	sp, r7
 8003912:	b002      	add	sp, #8
 8003914:	bd80      	pop	{r7, pc}
	...

08003918 <KeyPad_Select_Row>:

void KeyPad_Select_Row(uint8_t p_row)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	0002      	movs	r2, r0
 8003920:	1dfb      	adds	r3, r7, #7
 8003922:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(Keypad_RowPort[p_row],Keypad_RowPin[p_row], GPIO_PIN_RESET);
 8003924:	1dfb      	adds	r3, r7, #7
 8003926:	781a      	ldrb	r2, [r3, #0]
 8003928:	4b07      	ldr	r3, [pc, #28]	; (8003948 <KeyPad_Select_Row+0x30>)
 800392a:	0092      	lsls	r2, r2, #2
 800392c:	58d0      	ldr	r0, [r2, r3]
 800392e:	1dfb      	adds	r3, r7, #7
 8003930:	781a      	ldrb	r2, [r3, #0]
 8003932:	4b06      	ldr	r3, [pc, #24]	; (800394c <KeyPad_Select_Row+0x34>)
 8003934:	0052      	lsls	r2, r2, #1
 8003936:	5ad3      	ldrh	r3, [r2, r3]
 8003938:	2200      	movs	r2, #0
 800393a:	0019      	movs	r1, r3
 800393c:	f7fe fb31 	bl	8001fa2 <HAL_GPIO_WritePin>
}
 8003940:	46c0      	nop			; (mov r8, r8)
 8003942:	46bd      	mov	sp, r7
 8003944:	b002      	add	sp, #8
 8003946:	bd80      	pop	{r7, pc}
 8003948:	2000002c 	.word	0x2000002c
 800394c:	2000003c 	.word	0x2000003c

08003950 <KeyPad_UnSelect_Row>:
void KeyPad_UnSelect_Row()
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
	for(uint8_t t_row = 0; t_row < KEYPAD_ROW; t_row++)
 8003956:	1dfb      	adds	r3, r7, #7
 8003958:	2200      	movs	r2, #0
 800395a:	701a      	strb	r2, [r3, #0]
 800395c:	e012      	b.n	8003984 <KeyPad_UnSelect_Row+0x34>
	{
		HAL_GPIO_WritePin(Keypad_RowPort[t_row],Keypad_RowPin[t_row], GPIO_PIN_SET);
 800395e:	1dfb      	adds	r3, r7, #7
 8003960:	781a      	ldrb	r2, [r3, #0]
 8003962:	4b0d      	ldr	r3, [pc, #52]	; (8003998 <KeyPad_UnSelect_Row+0x48>)
 8003964:	0092      	lsls	r2, r2, #2
 8003966:	58d0      	ldr	r0, [r2, r3]
 8003968:	1dfb      	adds	r3, r7, #7
 800396a:	781a      	ldrb	r2, [r3, #0]
 800396c:	4b0b      	ldr	r3, [pc, #44]	; (800399c <KeyPad_UnSelect_Row+0x4c>)
 800396e:	0052      	lsls	r2, r2, #1
 8003970:	5ad3      	ldrh	r3, [r2, r3]
 8003972:	2201      	movs	r2, #1
 8003974:	0019      	movs	r1, r3
 8003976:	f7fe fb14 	bl	8001fa2 <HAL_GPIO_WritePin>
	for(uint8_t t_row = 0; t_row < KEYPAD_ROW; t_row++)
 800397a:	1dfb      	adds	r3, r7, #7
 800397c:	781a      	ldrb	r2, [r3, #0]
 800397e:	1dfb      	adds	r3, r7, #7
 8003980:	3201      	adds	r2, #1
 8003982:	701a      	strb	r2, [r3, #0]
 8003984:	1dfb      	adds	r3, r7, #7
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	2b03      	cmp	r3, #3
 800398a:	d9e8      	bls.n	800395e <KeyPad_UnSelect_Row+0xe>
	}
}
 800398c:	46c0      	nop			; (mov r8, r8)
 800398e:	46c0      	nop			; (mov r8, r8)
 8003990:	46bd      	mov	sp, r7
 8003992:	b002      	add	sp, #8
 8003994:	bd80      	pop	{r7, pc}
 8003996:	46c0      	nop			; (mov r8, r8)
 8003998:	2000002c 	.word	0x2000002c
 800399c:	2000003c 	.word	0x2000003c

080039a0 <KeyPad_GetKey>:

static uint8_t KeyPad_GetKey()
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
	for(uint8_t t_row = 0; t_row < KEYPAD_ROW; t_row++)
 80039a6:	1dfb      	adds	r3, r7, #7
 80039a8:	2200      	movs	r2, #0
 80039aa:	701a      	strb	r2, [r3, #0]
 80039ac:	e030      	b.n	8003a10 <KeyPad_GetKey+0x70>
	{
		KeyPad_UnSelect_Row();
 80039ae:	f7ff ffcf 	bl	8003950 <KeyPad_UnSelect_Row>
		KeyPad_Select_Row(t_row);
 80039b2:	1dfb      	adds	r3, r7, #7
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	0018      	movs	r0, r3
 80039b8:	f7ff ffae 	bl	8003918 <KeyPad_Select_Row>
		for(uint8_t t_col = 0; t_col < KEYPAD_COL; t_col++)
 80039bc:	1dbb      	adds	r3, r7, #6
 80039be:	2200      	movs	r2, #0
 80039c0:	701a      	strb	r2, [r3, #0]
 80039c2:	e01c      	b.n	80039fe <KeyPad_GetKey+0x5e>
		{
			if(HAL_GPIO_ReadPin(Keypad_ColPort[t_col],Keypad_ColPin[t_col]) == 0)
 80039c4:	1dbb      	adds	r3, r7, #6
 80039c6:	781a      	ldrb	r2, [r3, #0]
 80039c8:	4b16      	ldr	r3, [pc, #88]	; (8003a24 <KeyPad_GetKey+0x84>)
 80039ca:	0092      	lsls	r2, r2, #2
 80039cc:	58d0      	ldr	r0, [r2, r3]
 80039ce:	1dbb      	adds	r3, r7, #6
 80039d0:	781a      	ldrb	r2, [r3, #0]
 80039d2:	4b15      	ldr	r3, [pc, #84]	; (8003a28 <KeyPad_GetKey+0x88>)
 80039d4:	0052      	lsls	r2, r2, #1
 80039d6:	5ad3      	ldrh	r3, [r2, r3]
 80039d8:	0019      	movs	r1, r3
 80039da:	f7fe fac5 	bl	8001f68 <HAL_GPIO_ReadPin>
 80039de:	1e03      	subs	r3, r0, #0
 80039e0:	d108      	bne.n	80039f4 <KeyPad_GetKey+0x54>
			{
				return key_code[t_row][t_col];
 80039e2:	1dfb      	adds	r3, r7, #7
 80039e4:	781a      	ldrb	r2, [r3, #0]
 80039e6:	1dbb      	adds	r3, r7, #6
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	4910      	ldr	r1, [pc, #64]	; (8003a2c <KeyPad_GetKey+0x8c>)
 80039ec:	0092      	lsls	r2, r2, #2
 80039ee:	188a      	adds	r2, r1, r2
 80039f0:	5cd3      	ldrb	r3, [r2, r3]
 80039f2:	e012      	b.n	8003a1a <KeyPad_GetKey+0x7a>
		for(uint8_t t_col = 0; t_col < KEYPAD_COL; t_col++)
 80039f4:	1dbb      	adds	r3, r7, #6
 80039f6:	781a      	ldrb	r2, [r3, #0]
 80039f8:	1dbb      	adds	r3, r7, #6
 80039fa:	3201      	adds	r2, #1
 80039fc:	701a      	strb	r2, [r3, #0]
 80039fe:	1dbb      	adds	r3, r7, #6
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	2b03      	cmp	r3, #3
 8003a04:	d9de      	bls.n	80039c4 <KeyPad_GetKey+0x24>
	for(uint8_t t_row = 0; t_row < KEYPAD_ROW; t_row++)
 8003a06:	1dfb      	adds	r3, r7, #7
 8003a08:	781a      	ldrb	r2, [r3, #0]
 8003a0a:	1dfb      	adds	r3, r7, #7
 8003a0c:	3201      	adds	r2, #1
 8003a0e:	701a      	strb	r2, [r3, #0]
 8003a10:	1dfb      	adds	r3, r7, #7
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	2b03      	cmp	r3, #3
 8003a16:	d9ca      	bls.n	80039ae <KeyPad_GetKey+0xe>
			}
		}
	}
	return 0;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	0018      	movs	r0, r3
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	b002      	add	sp, #8
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	46c0      	nop			; (mov r8, r8)
 8003a24:	20000044 	.word	0x20000044
 8003a28:	20000054 	.word	0x20000054
 8003a2c:	08004c90 	.word	0x08004c90

08003a30 <Keypad_Filter>:

static void Keypad_Filter()
{
 8003a30:	b590      	push	{r4, r7, lr}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
	uint8_t t_key = KeyPad_GetKey();
 8003a36:	1dfc      	adds	r4, r7, #7
 8003a38:	f7ff ffb2 	bl	80039a0 <KeyPad_GetKey>
 8003a3c:	0003      	movs	r3, r0
 8003a3e:	7023      	strb	r3, [r4, #0]
	//khi van dang nhieu
	if(t_key != key_debounce)
 8003a40:	4b14      	ldr	r3, [pc, #80]	; (8003a94 <Keypad_Filter+0x64>)
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	1dfa      	adds	r2, r7, #7
 8003a46:	7812      	ldrb	r2, [r2, #0]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d00b      	beq.n	8003a64 <Keypad_Filter+0x34>
	{
		debouncing = 1;
 8003a4c:	4b12      	ldr	r3, [pc, #72]	; (8003a98 <Keypad_Filter+0x68>)
 8003a4e:	2201      	movs	r2, #1
 8003a50:	701a      	strb	r2, [r3, #0]
		time_debounce = HAL_GetTick();
 8003a52:	f7fd fe35 	bl	80016c0 <HAL_GetTick>
 8003a56:	0002      	movs	r2, r0
 8003a58:	4b10      	ldr	r3, [pc, #64]	; (8003a9c <Keypad_Filter+0x6c>)
 8003a5a:	601a      	str	r2, [r3, #0]
		key_debounce = t_key;
 8003a5c:	4b0d      	ldr	r3, [pc, #52]	; (8003a94 <Keypad_Filter+0x64>)
 8003a5e:	1dfa      	adds	r2, r7, #7
 8003a60:	7812      	ldrb	r2, [r2, #0]
 8003a62:	701a      	strb	r2, [r3, #0]
	}
	//trang thai da xac lap
	if(debouncing && (HAL_GetTick() - time_debounce >= 15))
 8003a64:	4b0c      	ldr	r3, [pc, #48]	; (8003a98 <Keypad_Filter+0x68>)
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00e      	beq.n	8003a8a <Keypad_Filter+0x5a>
 8003a6c:	f7fd fe28 	bl	80016c0 <HAL_GetTick>
 8003a70:	0002      	movs	r2, r0
 8003a72:	4b0a      	ldr	r3, [pc, #40]	; (8003a9c <Keypad_Filter+0x6c>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	2b0e      	cmp	r3, #14
 8003a7a:	d906      	bls.n	8003a8a <Keypad_Filter+0x5a>
	{
		key_current = key_debounce;
 8003a7c:	4b05      	ldr	r3, [pc, #20]	; (8003a94 <Keypad_Filter+0x64>)
 8003a7e:	781a      	ldrb	r2, [r3, #0]
 8003a80:	4b07      	ldr	r3, [pc, #28]	; (8003aa0 <Keypad_Filter+0x70>)
 8003a82:	701a      	strb	r2, [r3, #0]
		debouncing = 0;
 8003a84:	4b04      	ldr	r3, [pc, #16]	; (8003a98 <Keypad_Filter+0x68>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	701a      	strb	r2, [r3, #0]
	}
}
 8003a8a:	46c0      	nop			; (mov r8, r8)
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	b003      	add	sp, #12
 8003a90:	bd90      	pop	{r4, r7, pc}
 8003a92:	46c0      	nop			; (mov r8, r8)
 8003a94:	20000222 	.word	0x20000222
 8003a98:	20000223 	.word	0x20000223
 8003a9c:	20000224 	.word	0x20000224
 8003aa0:	20000220 	.word	0x20000220

08003aa4 <Keypad_Handle>:

void Keypad_Handle()
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	af00      	add	r7, sp, #0
	Keypad_Filter();
 8003aa8:	f7ff ffc2 	bl	8003a30 <Keypad_Filter>
	
	if(key_current != key_last)
 8003aac:	4b25      	ldr	r3, [pc, #148]	; (8003b44 <Keypad_Handle+0xa0>)
 8003aae:	781a      	ldrb	r2, [r3, #0]
 8003ab0:	4b25      	ldr	r3, [pc, #148]	; (8003b48 <Keypad_Handle+0xa4>)
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d02c      	beq.n	8003b12 <Keypad_Handle+0x6e>
	{
		
		if(key_current != 0)
 8003ab8:	4b22      	ldr	r3, [pc, #136]	; (8003b44 <Keypad_Handle+0xa0>)
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00d      	beq.n	8003adc <Keypad_Handle+0x38>
		{
			is_press = 1;
 8003ac0:	4b22      	ldr	r3, [pc, #136]	; (8003b4c <Keypad_Handle+0xa8>)
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	701a      	strb	r2, [r3, #0]
			time_start_press = HAL_GetTick();
 8003ac6:	f7fd fdfb 	bl	80016c0 <HAL_GetTick>
 8003aca:	0002      	movs	r2, r0
 8003acc:	4b20      	ldr	r3, [pc, #128]	; (8003b50 <Keypad_Handle+0xac>)
 8003ace:	601a      	str	r2, [r3, #0]
			KeypadPressingCallback(key_current);
 8003ad0:	4b1c      	ldr	r3, [pc, #112]	; (8003b44 <Keypad_Handle+0xa0>)
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	f7fd fa29 	bl	8000f2c <KeypadPressingCallback>
 8003ada:	e016      	b.n	8003b0a <Keypad_Handle+0x66>
		}
		else
		{
			is_press = 0;
 8003adc:	4b1b      	ldr	r3, [pc, #108]	; (8003b4c <Keypad_Handle+0xa8>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	701a      	strb	r2, [r3, #0]
			if(HAL_GetTick() - time_start_press <=1000) //nhan nha nhanh
 8003ae2:	f7fd fded 	bl	80016c0 <HAL_GetTick>
 8003ae6:	0002      	movs	r2, r0
 8003ae8:	4b19      	ldr	r3, [pc, #100]	; (8003b50 <Keypad_Handle+0xac>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	1ad2      	subs	r2, r2, r3
 8003aee:	23fa      	movs	r3, #250	; 0xfa
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d804      	bhi.n	8003b00 <Keypad_Handle+0x5c>
			{
				KeypadPressedShortCallback(key_last);
 8003af6:	4b14      	ldr	r3, [pc, #80]	; (8003b48 <Keypad_Handle+0xa4>)
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	0018      	movs	r0, r3
 8003afc:	f7ff feed 	bl	80038da <KeypadPressedShortCallback>
			}
			KeypadReleaseCallback(key_last);
 8003b00:	4b11      	ldr	r3, [pc, #68]	; (8003b48 <Keypad_Handle+0xa4>)
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	0018      	movs	r0, r3
 8003b06:	f7ff fef2 	bl	80038ee <KeypadReleaseCallback>
		}
		key_last = key_current;
 8003b0a:	4b0e      	ldr	r3, [pc, #56]	; (8003b44 <Keypad_Handle+0xa0>)
 8003b0c:	781a      	ldrb	r2, [r3, #0]
 8003b0e:	4b0e      	ldr	r3, [pc, #56]	; (8003b48 <Keypad_Handle+0xa4>)
 8003b10:	701a      	strb	r2, [r3, #0]
	}
	
	if(is_press && (HAL_GetTick() - time_start_press >= 3000)) //nhan giu phim
 8003b12:	4b0e      	ldr	r3, [pc, #56]	; (8003b4c <Keypad_Handle+0xa8>)
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d010      	beq.n	8003b3c <Keypad_Handle+0x98>
 8003b1a:	f7fd fdd1 	bl	80016c0 <HAL_GetTick>
 8003b1e:	0002      	movs	r2, r0
 8003b20:	4b0b      	ldr	r3, [pc, #44]	; (8003b50 <Keypad_Handle+0xac>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	4a0b      	ldr	r2, [pc, #44]	; (8003b54 <Keypad_Handle+0xb0>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d907      	bls.n	8003b3c <Keypad_Handle+0x98>
	{
		KeypadPressingTimeoutCallback(key_current);
 8003b2c:	4b05      	ldr	r3, [pc, #20]	; (8003b44 <Keypad_Handle+0xa0>)
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	0018      	movs	r0, r3
 8003b32:	f7ff fee6 	bl	8003902 <KeypadPressingTimeoutCallback>
		is_press = 0;
 8003b36:	4b05      	ldr	r3, [pc, #20]	; (8003b4c <Keypad_Handle+0xa8>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	701a      	strb	r2, [r3, #0]
	}
}
 8003b3c:	46c0      	nop			; (mov r8, r8)
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	46c0      	nop			; (mov r8, r8)
 8003b44:	20000220 	.word	0x20000220
 8003b48:	20000221 	.word	0x20000221
 8003b4c:	2000022c 	.word	0x2000022c
 8003b50:	20000228 	.word	0x20000228
 8003b54:	00000bb7 	.word	0x00000bb7

08003b58 <LCD_Init>:
#include "LCD_I2C.h"

void LCD_Init(LCD_I2C_HandleTypeDef *p_lcd, I2C_HandleTypeDef *p_hi2c, uint8_t p_cols, uint8_t p_rows, uint8_t p_SLAVE_ADDRESS){
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	0019      	movs	r1, r3
 8003b64:	1dfb      	adds	r3, r7, #7
 8003b66:	701a      	strb	r2, [r3, #0]
 8003b68:	1dbb      	adds	r3, r7, #6
 8003b6a:	1c0a      	adds	r2, r1, #0
 8003b6c:	701a      	strb	r2, [r3, #0]
	p_lcd->SLAVE_ADDRESS = p_SLAVE_ADDRESS;
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	2318      	movs	r3, #24
 8003b72:	18fb      	adds	r3, r7, r3
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	7093      	strb	r3, [r2, #2]
	p_lcd->LCD_Backlight_Value = LCD_BACKLIGHT;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2208      	movs	r2, #8
 8003b7c:	70da      	strb	r2, [r3, #3]
	p_lcd->LCD_Columns = p_cols;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	1dfa      	adds	r2, r7, #7
 8003b82:	7812      	ldrb	r2, [r2, #0]
 8003b84:	701a      	strb	r2, [r3, #0]
	p_lcd->LCD_Rows = p_rows;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	1dba      	adds	r2, r7, #6
 8003b8a:	7812      	ldrb	r2, [r2, #0]
 8003b8c:	705a      	strb	r2, [r3, #1]
	p_lcd->hi2c = p_hi2c;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	68ba      	ldr	r2, [r7, #8]
 8003b92:	609a      	str	r2, [r3, #8]
	p_lcd->LCD_Display_Option = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2204      	movs	r2, #4
 8003b98:	711a      	strb	r2, [r3, #4]

	// 4 bit initialization
	HAL_Delay(50);  // wait for >40ms
 8003b9a:	2032      	movs	r0, #50	; 0x32
 8003b9c:	f7fd fd9a 	bl	80016d4 <HAL_Delay>
	LCD_Send_Command(p_lcd, 0x30);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2130      	movs	r1, #48	; 0x30
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	f000 f909 	bl	8003dbc <LCD_Send_Command>
	HAL_Delay(5);  // wait for >4.1ms
 8003baa:	2005      	movs	r0, #5
 8003bac:	f7fd fd92 	bl	80016d4 <HAL_Delay>
	LCD_Send_Command(p_lcd, 0x30);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2130      	movs	r1, #48	; 0x30
 8003bb4:	0018      	movs	r0, r3
 8003bb6:	f000 f901 	bl	8003dbc <LCD_Send_Command>
	HAL_Delay(1);  // wait for >100us
 8003bba:	2001      	movs	r0, #1
 8003bbc:	f7fd fd8a 	bl	80016d4 <HAL_Delay>
	LCD_Send_Command(p_lcd, 0x30);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2130      	movs	r1, #48	; 0x30
 8003bc4:	0018      	movs	r0, r3
 8003bc6:	f000 f8f9 	bl	8003dbc <LCD_Send_Command>
	HAL_Delay(10);
 8003bca:	200a      	movs	r0, #10
 8003bcc:	f7fd fd82 	bl	80016d4 <HAL_Delay>
	LCD_Send_Command(p_lcd, 0x20);  // 4bit mode
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2120      	movs	r1, #32
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	f000 f8f1 	bl	8003dbc <LCD_Send_Command>
	HAL_Delay(10);
 8003bda:	200a      	movs	r0, #10
 8003bdc:	f7fd fd7a 	bl	80016d4 <HAL_Delay>

	// Display initialization
	LCD_Send_Command(p_lcd, 0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2128      	movs	r1, #40	; 0x28
 8003be4:	0018      	movs	r0, r3
 8003be6:	f000 f8e9 	bl	8003dbc <LCD_Send_Command>
	HAL_Delay(1);
 8003bea:	2001      	movs	r0, #1
 8003bec:	f7fd fd72 	bl	80016d4 <HAL_Delay>
	LCD_Send_Command(p_lcd, 0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2108      	movs	r1, #8
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	f000 f8e1 	bl	8003dbc <LCD_Send_Command>
	HAL_Delay(1);
 8003bfa:	2001      	movs	r0, #1
 8003bfc:	f7fd fd6a 	bl	80016d4 <HAL_Delay>
	LCD_Send_Command(p_lcd, 0x01);  // clear display
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2101      	movs	r1, #1
 8003c04:	0018      	movs	r0, r3
 8003c06:	f000 f8d9 	bl	8003dbc <LCD_Send_Command>
	HAL_Delay(1);
 8003c0a:	2001      	movs	r0, #1
 8003c0c:	f7fd fd62 	bl	80016d4 <HAL_Delay>
	HAL_Delay(1);
 8003c10:	2001      	movs	r0, #1
 8003c12:	f7fd fd5f 	bl	80016d4 <HAL_Delay>
	LCD_Send_Command(p_lcd, 0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2106      	movs	r1, #6
 8003c1a:	0018      	movs	r0, r3
 8003c1c:	f000 f8ce 	bl	8003dbc <LCD_Send_Command>
	HAL_Delay(1);
 8003c20:	2001      	movs	r0, #1
 8003c22:	f7fd fd57 	bl	80016d4 <HAL_Delay>
	LCD_Send_Command(p_lcd, LCD_DISPLAYCONTROL | p_lcd->LCD_Display_Option); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	791b      	ldrb	r3, [r3, #4]
 8003c2a:	2208      	movs	r2, #8
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	b2da      	uxtb	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	0011      	movs	r1, r2
 8003c34:	0018      	movs	r0, r3
 8003c36:	f000 f8c1 	bl	8003dbc <LCD_Send_Command>
}
 8003c3a:	46c0      	nop			; (mov r8, r8)
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	b004      	add	sp, #16
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <LCD_Write>:

void LCD_Write(LCD_I2C_HandleTypeDef *p_lcd, const char *p_str, ...){
 8003c42:	b40e      	push	{r1, r2, r3}
 8003c44:	b590      	push	{r4, r7, lr}
 8003c46:	b08a      	sub	sp, #40	; 0x28
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
	char t_stringArray[20] = {};
 8003c4c:	2410      	movs	r4, #16
 8003c4e:	193b      	adds	r3, r7, r4
 8003c50:	2200      	movs	r2, #0
 8003c52:	601a      	str	r2, [r3, #0]
 8003c54:	3304      	adds	r3, #4
 8003c56:	2210      	movs	r2, #16
 8003c58:	2100      	movs	r1, #0
 8003c5a:	0018      	movs	r0, r3
 8003c5c:	f000 fb1b 	bl	8004296 <memset>

	va_list t_args;
	va_start(t_args, p_str);
 8003c60:	2338      	movs	r3, #56	; 0x38
 8003c62:	18fb      	adds	r3, r7, r3
 8003c64:	60fb      	str	r3, [r7, #12]
	vsprintf(t_stringArray, p_str, t_args);
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003c6a:	193b      	adds	r3, r7, r4
 8003c6c:	0018      	movs	r0, r3
 8003c6e:	f000 fb31 	bl	80042d4 <vsiprintf>
	va_end(t_args);

	for(int i = 0; i < strlen(t_stringArray) && i < p_lcd->LCD_Columns; i++){
 8003c72:	2300      	movs	r3, #0
 8003c74:	627b      	str	r3, [r7, #36]	; 0x24
 8003c76:	e00c      	b.n	8003c92 <LCD_Write+0x50>
		LCD_Send_Data(p_lcd, t_stringArray[i]);
 8003c78:	2310      	movs	r3, #16
 8003c7a:	18fa      	adds	r2, r7, r3
 8003c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7e:	18d3      	adds	r3, r2, r3
 8003c80:	781a      	ldrb	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	0011      	movs	r1, r2
 8003c86:	0018      	movs	r0, r3
 8003c88:	f000 f8e3 	bl	8003e52 <LCD_Send_Data>
	for(int i = 0; i < strlen(t_stringArray) && i < p_lcd->LCD_Columns; i++){
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8e:	3301      	adds	r3, #1
 8003c90:	627b      	str	r3, [r7, #36]	; 0x24
 8003c92:	2310      	movs	r3, #16
 8003c94:	18fb      	adds	r3, r7, r3
 8003c96:	0018      	movs	r0, r3
 8003c98:	f7fc fa36 	bl	8000108 <strlen>
 8003c9c:	0002      	movs	r2, r0
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d905      	bls.n	8003cb0 <LCD_Write+0x6e>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	001a      	movs	r2, r3
 8003caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cac:	4293      	cmp	r3, r2
 8003cae:	dbe3      	blt.n	8003c78 <LCD_Write+0x36>
	}
}
 8003cb0:	46c0      	nop			; (mov r8, r8)
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	b00a      	add	sp, #40	; 0x28
 8003cb6:	bc90      	pop	{r4, r7}
 8003cb8:	bc08      	pop	{r3}
 8003cba:	b003      	add	sp, #12
 8003cbc:	4718      	bx	r3

08003cbe <LCD_Clear>:

void LCD_Write_Custom_Char(LCD_I2C_HandleTypeDef *p_lcd, char p_location){
	LCD_Send_Data(p_lcd, p_location);
}

void LCD_Clear(LCD_I2C_HandleTypeDef *p_lcd){
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b082      	sub	sp, #8
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
	LCD_Send_Command(p_lcd, LCD_CLEARDISPLAY);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2101      	movs	r1, #1
 8003cca:	0018      	movs	r0, r3
 8003ccc:	f000 f876 	bl	8003dbc <LCD_Send_Command>
	HAL_Delay(2);
 8003cd0:	2002      	movs	r0, #2
 8003cd2:	f7fd fcff 	bl	80016d4 <HAL_Delay>
	LCD_Set_Cursor(p_lcd, 0, 0);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	2100      	movs	r1, #0
 8003cdc:	0018      	movs	r0, r3
 8003cde:	f000 f805 	bl	8003cec <LCD_Set_Cursor>
}
 8003ce2:	46c0      	nop			; (mov r8, r8)
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	b002      	add	sp, #8
 8003ce8:	bd80      	pop	{r7, pc}
	...

08003cec <LCD_Set_Cursor>:

void LCD_Set_Cursor(LCD_I2C_HandleTypeDef *p_lcd, uint8_t p_col, uint8_t p_row){
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	0008      	movs	r0, r1
 8003cf6:	0011      	movs	r1, r2
 8003cf8:	1cfb      	adds	r3, r7, #3
 8003cfa:	1c02      	adds	r2, r0, #0
 8003cfc:	701a      	strb	r2, [r3, #0]
 8003cfe:	1cbb      	adds	r3, r7, #2
 8003d00:	1c0a      	adds	r2, r1, #0
 8003d02:	701a      	strb	r2, [r3, #0]
	uint8_t t_row_Offets[] = {0x00, 0x40, 0x14, 0x54};
 8003d04:	230c      	movs	r3, #12
 8003d06:	18fb      	adds	r3, r7, r3
 8003d08:	4a12      	ldr	r2, [pc, #72]	; (8003d54 <LCD_Set_Cursor+0x68>)
 8003d0a:	601a      	str	r2, [r3, #0]
	if(p_row > p_lcd->LCD_Rows) p_row = p_lcd->LCD_Rows - 1;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	785b      	ldrb	r3, [r3, #1]
 8003d10:	1cba      	adds	r2, r7, #2
 8003d12:	7812      	ldrb	r2, [r2, #0]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d904      	bls.n	8003d22 <LCD_Set_Cursor+0x36>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	785a      	ldrb	r2, [r3, #1]
 8003d1c:	1cbb      	adds	r3, r7, #2
 8003d1e:	3a01      	subs	r2, #1
 8003d20:	701a      	strb	r2, [r3, #0]
	LCD_Send_Command(p_lcd, LCD_SETDDRAMADDR | (p_col + t_row_Offets[p_row]));
 8003d22:	1cbb      	adds	r3, r7, #2
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	220c      	movs	r2, #12
 8003d28:	18ba      	adds	r2, r7, r2
 8003d2a:	5cd2      	ldrb	r2, [r2, r3]
 8003d2c:	1cfb      	adds	r3, r7, #3
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	18d3      	adds	r3, r2, r3
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	b25b      	sxtb	r3, r3
 8003d36:	2280      	movs	r2, #128	; 0x80
 8003d38:	4252      	negs	r2, r2
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	b25b      	sxtb	r3, r3
 8003d3e:	b2da      	uxtb	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	0011      	movs	r1, r2
 8003d44:	0018      	movs	r0, r3
 8003d46:	f000 f839 	bl	8003dbc <LCD_Send_Command>
}
 8003d4a:	46c0      	nop			; (mov r8, r8)
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	b004      	add	sp, #16
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	46c0      	nop			; (mov r8, r8)
 8003d54:	54144000 	.word	0x54144000

08003d58 <LCD_Cursor_Blink>:
void LCD_No_Backlight(LCD_I2C_HandleTypeDef *p_lcd){
	p_lcd->LCD_Backlight_Value = LCD_NOBACKLIGHT;
	LCD_Send_Command(p_lcd, 0);
}

void LCD_Cursor_Blink(LCD_I2C_HandleTypeDef *p_lcd){
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
	p_lcd->LCD_Display_Option |= LCD_BLINKON;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	791b      	ldrb	r3, [r3, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	4313      	orrs	r3, r2
 8003d68:	b2da      	uxtb	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	711a      	strb	r2, [r3, #4]
	LCD_Send_Command(p_lcd, LCD_DISPLAYCONTROL | p_lcd->LCD_Display_Option);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	791b      	ldrb	r3, [r3, #4]
 8003d72:	2208      	movs	r2, #8
 8003d74:	4313      	orrs	r3, r2
 8003d76:	b2da      	uxtb	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	0011      	movs	r1, r2
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	f000 f81d 	bl	8003dbc <LCD_Send_Command>
}
 8003d82:	46c0      	nop			; (mov r8, r8)
 8003d84:	46bd      	mov	sp, r7
 8003d86:	b002      	add	sp, #8
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <LCD_Cursor_No_Blink>:

void LCD_Cursor_No_Blink(LCD_I2C_HandleTypeDef *p_lcd){
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b082      	sub	sp, #8
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
	p_lcd->LCD_Display_Option &= ~LCD_BLINKON;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	791b      	ldrb	r3, [r3, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	4393      	bics	r3, r2
 8003d9a:	b2da      	uxtb	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	711a      	strb	r2, [r3, #4]
	LCD_Send_Command(p_lcd, LCD_DISPLAYCONTROL | p_lcd->LCD_Display_Option);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	791b      	ldrb	r3, [r3, #4]
 8003da4:	2208      	movs	r2, #8
 8003da6:	4313      	orrs	r3, r2
 8003da8:	b2da      	uxtb	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	0011      	movs	r1, r2
 8003dae:	0018      	movs	r0, r3
 8003db0:	f000 f804 	bl	8003dbc <LCD_Send_Command>
}
 8003db4:	46c0      	nop			; (mov r8, r8)
 8003db6:	46bd      	mov	sp, r7
 8003db8:	b002      	add	sp, #8
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <LCD_Send_Command>:
void LCD_Display_Off(LCD_I2C_HandleTypeDef *p_lcd){
	p_lcd->LCD_Display_Option &= ~LCD_DISPLAYON;
	LCD_Send_Command(p_lcd, LCD_DISPLAYCONTROL | p_lcd->LCD_Display_Option);
}

void LCD_Send_Command(LCD_I2C_HandleTypeDef *p_lcd, char cmd){
 8003dbc:	b590      	push	{r4, r7, lr}
 8003dbe:	b087      	sub	sp, #28
 8003dc0:	af02      	add	r7, sp, #8
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	000a      	movs	r2, r1
 8003dc6:	1cfb      	adds	r3, r7, #3
 8003dc8:	701a      	strb	r2, [r3, #0]
	char p_data_H, p_data_L;
	uint8_t p_I2C_Bufer[4];
	p_data_H = cmd & 0xF0;
 8003dca:	200f      	movs	r0, #15
 8003dcc:	183b      	adds	r3, r7, r0
 8003dce:	1cfa      	adds	r2, r7, #3
 8003dd0:	7812      	ldrb	r2, [r2, #0]
 8003dd2:	210f      	movs	r1, #15
 8003dd4:	438a      	bics	r2, r1
 8003dd6:	701a      	strb	r2, [r3, #0]
	p_data_L = (cmd << 4) & 0xF0;
 8003dd8:	1cfb      	adds	r3, r7, #3
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	011a      	lsls	r2, r3, #4
 8003dde:	240e      	movs	r4, #14
 8003de0:	193b      	adds	r3, r7, r4
 8003de2:	701a      	strb	r2, [r3, #0]

	p_I2C_Bufer[0] = p_data_H | p_lcd->LCD_Backlight_Value | En;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	78da      	ldrb	r2, [r3, #3]
 8003de8:	183b      	adds	r3, r7, r0
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2204      	movs	r2, #4
 8003df2:	4313      	orrs	r3, r2
 8003df4:	b2da      	uxtb	r2, r3
 8003df6:	2108      	movs	r1, #8
 8003df8:	187b      	adds	r3, r7, r1
 8003dfa:	701a      	strb	r2, [r3, #0]
	p_I2C_Bufer[1] = p_data_H | p_lcd->LCD_Backlight_Value;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	78da      	ldrb	r2, [r3, #3]
 8003e00:	183b      	adds	r3, r7, r0
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	b2da      	uxtb	r2, r3
 8003e08:	187b      	adds	r3, r7, r1
 8003e0a:	705a      	strb	r2, [r3, #1]
	p_I2C_Bufer[2] = p_data_L | p_lcd->LCD_Backlight_Value | En;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	78da      	ldrb	r2, [r3, #3]
 8003e10:	193b      	adds	r3, r7, r4
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2204      	movs	r2, #4
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	b2da      	uxtb	r2, r3
 8003e1e:	187b      	adds	r3, r7, r1
 8003e20:	709a      	strb	r2, [r3, #2]
	p_I2C_Bufer[3] = p_data_L | p_lcd->LCD_Backlight_Value;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	78da      	ldrb	r2, [r3, #3]
 8003e26:	193b      	adds	r3, r7, r4
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	b2da      	uxtb	r2, r3
 8003e2e:	000c      	movs	r4, r1
 8003e30:	187b      	adds	r3, r7, r1
 8003e32:	70da      	strb	r2, [r3, #3]

	HAL_I2C_Master_Transmit(p_lcd->hi2c, p_lcd->SLAVE_ADDRESS, p_I2C_Bufer, 4, 100);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6898      	ldr	r0, [r3, #8]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	789b      	ldrb	r3, [r3, #2]
 8003e3c:	b299      	uxth	r1, r3
 8003e3e:	193a      	adds	r2, r7, r4
 8003e40:	2364      	movs	r3, #100	; 0x64
 8003e42:	9300      	str	r3, [sp, #0]
 8003e44:	2304      	movs	r3, #4
 8003e46:	f7fe f95f 	bl	8002108 <HAL_I2C_Master_Transmit>
}
 8003e4a:	46c0      	nop			; (mov r8, r8)
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	b005      	add	sp, #20
 8003e50:	bd90      	pop	{r4, r7, pc}

08003e52 <LCD_Send_Data>:

void LCD_Send_Data(LCD_I2C_HandleTypeDef *p_lcd, char data){
 8003e52:	b590      	push	{r4, r7, lr}
 8003e54:	b087      	sub	sp, #28
 8003e56:	af02      	add	r7, sp, #8
 8003e58:	6078      	str	r0, [r7, #4]
 8003e5a:	000a      	movs	r2, r1
 8003e5c:	1cfb      	adds	r3, r7, #3
 8003e5e:	701a      	strb	r2, [r3, #0]
	char p_data_H, p_data_L;
	uint8_t p_I2C_Bufer[4];
	p_data_H = data & 0xF0;
 8003e60:	200f      	movs	r0, #15
 8003e62:	183b      	adds	r3, r7, r0
 8003e64:	1cfa      	adds	r2, r7, #3
 8003e66:	7812      	ldrb	r2, [r2, #0]
 8003e68:	210f      	movs	r1, #15
 8003e6a:	438a      	bics	r2, r1
 8003e6c:	701a      	strb	r2, [r3, #0]
	p_data_L = (data << 4) & 0xF0;
 8003e6e:	1cfb      	adds	r3, r7, #3
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	011a      	lsls	r2, r3, #4
 8003e74:	240e      	movs	r4, #14
 8003e76:	193b      	adds	r3, r7, r4
 8003e78:	701a      	strb	r2, [r3, #0]

	p_I2C_Bufer[0] = p_data_H | p_lcd->LCD_Backlight_Value | En | Rs;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	78da      	ldrb	r2, [r3, #3]
 8003e7e:	183b      	adds	r3, r7, r0
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2205      	movs	r2, #5
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	b2da      	uxtb	r2, r3
 8003e8c:	2108      	movs	r1, #8
 8003e8e:	187b      	adds	r3, r7, r1
 8003e90:	701a      	strb	r2, [r3, #0]
	p_I2C_Bufer[1] = p_data_H | p_lcd->LCD_Backlight_Value | Rs;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	78da      	ldrb	r2, [r3, #3]
 8003e96:	183b      	adds	r3, r7, r0
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	b2da      	uxtb	r2, r3
 8003ea4:	187b      	adds	r3, r7, r1
 8003ea6:	705a      	strb	r2, [r3, #1]
	p_I2C_Bufer[2] = p_data_L | p_lcd->LCD_Backlight_Value | En | Rs;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	78da      	ldrb	r2, [r3, #3]
 8003eac:	193b      	adds	r3, r7, r4
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2205      	movs	r2, #5
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	b2da      	uxtb	r2, r3
 8003eba:	187b      	adds	r3, r7, r1
 8003ebc:	709a      	strb	r2, [r3, #2]
	p_I2C_Bufer[3] = p_data_L | p_lcd->LCD_Backlight_Value | Rs;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	78da      	ldrb	r2, [r3, #3]
 8003ec2:	193b      	adds	r3, r7, r4
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2201      	movs	r2, #1
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	b2da      	uxtb	r2, r3
 8003ed0:	000c      	movs	r4, r1
 8003ed2:	187b      	adds	r3, r7, r1
 8003ed4:	70da      	strb	r2, [r3, #3]

	HAL_I2C_Master_Transmit(p_lcd->hi2c, p_lcd->SLAVE_ADDRESS, p_I2C_Bufer, 4, 100);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6898      	ldr	r0, [r3, #8]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	789b      	ldrb	r3, [r3, #2]
 8003ede:	b299      	uxth	r1, r3
 8003ee0:	193a      	adds	r2, r7, r4
 8003ee2:	2364      	movs	r3, #100	; 0x64
 8003ee4:	9300      	str	r3, [sp, #0]
 8003ee6:	2304      	movs	r3, #4
 8003ee8:	f7fe f90e 	bl	8002108 <HAL_I2C_Master_Transmit>
}
 8003eec:	46c0      	nop			; (mov r8, r8)
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	b005      	add	sp, #20
 8003ef2:	bd90      	pop	{r4, r7, pc}

08003ef4 <WLS_Handle>:
		{0, 0, 0, 0, 0, GPIOA, GPIO_PIN_6},
		{0, 0, 0, 0, 0, GPIOA, GPIO_PIN_7},
};
static uint8_t __sensor_value_mask;

void WLS_Handle(){
 8003ef4:	b5b0      	push	{r4, r5, r7, lr}
 8003ef6:	b088      	sub	sp, #32
 8003ef8:	af00      	add	r7, sp, #0
	if(__sensor_normal_state != FLASH_DATA_Get_Current_Data().sensor_normal_state){
 8003efa:	003b      	movs	r3, r7
 8003efc:	0018      	movs	r0, r3
 8003efe:	f7fc fc87 	bl	8000810 <FLASH_DATA_Get_Current_Data>
 8003f02:	003b      	movs	r3, r7
 8003f04:	7a1a      	ldrb	r2, [r3, #8]
 8003f06:	4b6a      	ldr	r3, [pc, #424]	; (80040b0 <WLS_Handle+0x1bc>)
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d029      	beq.n	8003f62 <WLS_Handle+0x6e>
		__sensor_normal_state = FLASH_DATA_Get_Current_Data().sensor_normal_state;
 8003f0e:	240c      	movs	r4, #12
 8003f10:	193b      	adds	r3, r7, r4
 8003f12:	0018      	movs	r0, r3
 8003f14:	f7fc fc7c 	bl	8000810 <FLASH_DATA_Get_Current_Data>
 8003f18:	193b      	adds	r3, r7, r4
 8003f1a:	7a1a      	ldrb	r2, [r3, #8]
 8003f1c:	4b64      	ldr	r3, [pc, #400]	; (80040b0 <WLS_Handle+0x1bc>)
 8003f1e:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < NUMBER_OF_SENSOR; i++){
 8003f20:	2300      	movs	r3, #0
 8003f22:	61fb      	str	r3, [r7, #28]
 8003f24:	e01a      	b.n	8003f5c <WLS_Handle+0x68>
			__wls_sensor[i].Sensor_Current_State = __sensor_normal_state;
 8003f26:	4b62      	ldr	r3, [pc, #392]	; (80040b0 <WLS_Handle+0x1bc>)
 8003f28:	7819      	ldrb	r1, [r3, #0]
 8003f2a:	4b62      	ldr	r3, [pc, #392]	; (80040b4 <WLS_Handle+0x1c0>)
 8003f2c:	69fa      	ldr	r2, [r7, #28]
 8003f2e:	0112      	lsls	r2, r2, #4
 8003f30:	54d1      	strb	r1, [r2, r3]
			__wls_sensor[i].Sensor_Last_State = __sensor_normal_state;
 8003f32:	4b5f      	ldr	r3, [pc, #380]	; (80040b0 <WLS_Handle+0x1bc>)
 8003f34:	7819      	ldrb	r1, [r3, #0]
 8003f36:	4a5f      	ldr	r2, [pc, #380]	; (80040b4 <WLS_Handle+0x1c0>)
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	011b      	lsls	r3, r3, #4
 8003f3c:	18d3      	adds	r3, r2, r3
 8003f3e:	3301      	adds	r3, #1
 8003f40:	1c0a      	adds	r2, r1, #0
 8003f42:	701a      	strb	r2, [r3, #0]
			__wls_sensor[i].Sensor_Filter_State = __sensor_normal_state;
 8003f44:	4b5a      	ldr	r3, [pc, #360]	; (80040b0 <WLS_Handle+0x1bc>)
 8003f46:	7819      	ldrb	r1, [r3, #0]
 8003f48:	4a5a      	ldr	r2, [pc, #360]	; (80040b4 <WLS_Handle+0x1c0>)
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	011b      	lsls	r3, r3, #4
 8003f4e:	18d3      	adds	r3, r2, r3
 8003f50:	3302      	adds	r3, #2
 8003f52:	1c0a      	adds	r2, r1, #0
 8003f54:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < NUMBER_OF_SENSOR; i++){
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	3301      	adds	r3, #1
 8003f5a:	61fb      	str	r3, [r7, #28]
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	2b05      	cmp	r3, #5
 8003f60:	dde1      	ble.n	8003f26 <WLS_Handle+0x32>
		}
	}
	for(int i = 0; i < 6; i++){
 8003f62:	2300      	movs	r3, #0
 8003f64:	61bb      	str	r3, [r7, #24]
 8003f66:	e09a      	b.n	800409e <WLS_Handle+0x1aa>
		// Read current logic level
		uint8_t state = HAL_GPIO_ReadPin(__wls_sensor[i].Sensor_Port, __wls_sensor[i].Sensor_Pin);
 8003f68:	4a52      	ldr	r2, [pc, #328]	; (80040b4 <WLS_Handle+0x1c0>)
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	011b      	lsls	r3, r3, #4
 8003f6e:	18d3      	adds	r3, r2, r3
 8003f70:	3308      	adds	r3, #8
 8003f72:	6818      	ldr	r0, [r3, #0]
 8003f74:	4a4f      	ldr	r2, [pc, #316]	; (80040b4 <WLS_Handle+0x1c0>)
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	011b      	lsls	r3, r3, #4
 8003f7a:	18d3      	adds	r3, r2, r3
 8003f7c:	330c      	adds	r3, #12
 8003f7e:	881b      	ldrh	r3, [r3, #0]
 8003f80:	2517      	movs	r5, #23
 8003f82:	197c      	adds	r4, r7, r5
 8003f84:	0019      	movs	r1, r3
 8003f86:	f7fd ffef 	bl	8001f68 <HAL_GPIO_ReadPin>
 8003f8a:	0003      	movs	r3, r0
 8003f8c:	7023      	strb	r3, [r4, #0]
		if(state != __wls_sensor[i].Sensor_Filter_State){
 8003f8e:	4a49      	ldr	r2, [pc, #292]	; (80040b4 <WLS_Handle+0x1c0>)
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	011b      	lsls	r3, r3, #4
 8003f94:	18d3      	adds	r3, r2, r3
 8003f96:	3302      	adds	r3, #2
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	197a      	adds	r2, r7, r5
 8003f9c:	7812      	ldrb	r2, [r2, #0]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d017      	beq.n	8003fd2 <WLS_Handle+0xde>
			__wls_sensor[i].Sensor_Filter_State = state;
 8003fa2:	4a44      	ldr	r2, [pc, #272]	; (80040b4 <WLS_Handle+0x1c0>)
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	011b      	lsls	r3, r3, #4
 8003fa8:	18d3      	adds	r3, r2, r3
 8003faa:	3302      	adds	r3, #2
 8003fac:	197a      	adds	r2, r7, r5
 8003fae:	7812      	ldrb	r2, [r2, #0]
 8003fb0:	701a      	strb	r2, [r3, #0]
			__wls_sensor[i].is_debouncing = 1;
 8003fb2:	4a40      	ldr	r2, [pc, #256]	; (80040b4 <WLS_Handle+0x1c0>)
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	011b      	lsls	r3, r3, #4
 8003fb8:	18d3      	adds	r3, r2, r3
 8003fba:	3303      	adds	r3, #3
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	701a      	strb	r2, [r3, #0]
			__wls_sensor[i].time_debounce = HAL_GetTick();
 8003fc0:	f7fd fb7e 	bl	80016c0 <HAL_GetTick>
 8003fc4:	0001      	movs	r1, r0
 8003fc6:	4a3b      	ldr	r2, [pc, #236]	; (80040b4 <WLS_Handle+0x1c0>)
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	011b      	lsls	r3, r3, #4
 8003fcc:	18d3      	adds	r3, r2, r3
 8003fce:	3304      	adds	r3, #4
 8003fd0:	6019      	str	r1, [r3, #0]
		}

		if(__wls_sensor[i].is_debouncing && (HAL_GetTick() - __wls_sensor[i].time_debounce >= DEBOUNCING_TIME)){
 8003fd2:	4a38      	ldr	r2, [pc, #224]	; (80040b4 <WLS_Handle+0x1c0>)
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	011b      	lsls	r3, r3, #4
 8003fd8:	18d3      	adds	r3, r2, r3
 8003fda:	3303      	adds	r3, #3
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d01e      	beq.n	8004020 <WLS_Handle+0x12c>
 8003fe2:	f7fd fb6d 	bl	80016c0 <HAL_GetTick>
 8003fe6:	0001      	movs	r1, r0
 8003fe8:	4a32      	ldr	r2, [pc, #200]	; (80040b4 <WLS_Handle+0x1c0>)
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	011b      	lsls	r3, r3, #4
 8003fee:	18d3      	adds	r3, r2, r3
 8003ff0:	3304      	adds	r3, #4
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	1aca      	subs	r2, r1, r3
 8003ff6:	23fa      	movs	r3, #250	; 0xfa
 8003ff8:	00db      	lsls	r3, r3, #3
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d310      	bcc.n	8004020 <WLS_Handle+0x12c>
			__wls_sensor[i].Sensor_Current_State = __wls_sensor[i].Sensor_Filter_State;
 8003ffe:	4a2d      	ldr	r2, [pc, #180]	; (80040b4 <WLS_Handle+0x1c0>)
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	011b      	lsls	r3, r3, #4
 8004004:	18d3      	adds	r3, r2, r3
 8004006:	3302      	adds	r3, #2
 8004008:	7819      	ldrb	r1, [r3, #0]
 800400a:	4b2a      	ldr	r3, [pc, #168]	; (80040b4 <WLS_Handle+0x1c0>)
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	0112      	lsls	r2, r2, #4
 8004010:	54d1      	strb	r1, [r2, r3]
			__wls_sensor[i].is_debouncing = 0;
 8004012:	4a28      	ldr	r2, [pc, #160]	; (80040b4 <WLS_Handle+0x1c0>)
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	011b      	lsls	r3, r3, #4
 8004018:	18d3      	adds	r3, r2, r3
 800401a:	3303      	adds	r3, #3
 800401c:	2200      	movs	r2, #0
 800401e:	701a      	strb	r2, [r3, #0]
		}

		if(__wls_sensor[i].Sensor_Current_State != __wls_sensor[i].Sensor_Last_State){
 8004020:	4b24      	ldr	r3, [pc, #144]	; (80040b4 <WLS_Handle+0x1c0>)
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	0112      	lsls	r2, r2, #4
 8004026:	5cd2      	ldrb	r2, [r2, r3]
 8004028:	4922      	ldr	r1, [pc, #136]	; (80040b4 <WLS_Handle+0x1c0>)
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	011b      	lsls	r3, r3, #4
 800402e:	18cb      	adds	r3, r1, r3
 8004030:	3301      	adds	r3, #1
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	429a      	cmp	r2, r3
 8004036:	d02f      	beq.n	8004098 <WLS_Handle+0x1a4>
			if(__wls_sensor[i].Sensor_Current_State == !__sensor_normal_state)
 8004038:	4b1e      	ldr	r3, [pc, #120]	; (80040b4 <WLS_Handle+0x1c0>)
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	0112      	lsls	r2, r2, #4
 800403e:	5cd3      	ldrb	r3, [r2, r3]
 8004040:	001a      	movs	r2, r3
 8004042:	4b1b      	ldr	r3, [pc, #108]	; (80040b0 <WLS_Handle+0x1bc>)
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	4259      	negs	r1, r3
 8004048:	414b      	adcs	r3, r1
 800404a:	b2db      	uxtb	r3, r3
 800404c:	429a      	cmp	r2, r3
 800404e:	d10b      	bne.n	8004068 <WLS_Handle+0x174>
				__sensor_value_mask |= 1U << i;
 8004050:	2201      	movs	r2, #1
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	409a      	lsls	r2, r3
 8004056:	0013      	movs	r3, r2
 8004058:	b2da      	uxtb	r2, r3
 800405a:	4b17      	ldr	r3, [pc, #92]	; (80040b8 <WLS_Handle+0x1c4>)
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	4313      	orrs	r3, r2
 8004060:	b2da      	uxtb	r2, r3
 8004062:	4b15      	ldr	r3, [pc, #84]	; (80040b8 <WLS_Handle+0x1c4>)
 8004064:	701a      	strb	r2, [r3, #0]
 8004066:	e00c      	b.n	8004082 <WLS_Handle+0x18e>
			else
				__sensor_value_mask &= ~(1U << i);
 8004068:	2201      	movs	r2, #1
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	409a      	lsls	r2, r3
 800406e:	0013      	movs	r3, r2
 8004070:	b2db      	uxtb	r3, r3
 8004072:	43db      	mvns	r3, r3
 8004074:	b2db      	uxtb	r3, r3
 8004076:	4a10      	ldr	r2, [pc, #64]	; (80040b8 <WLS_Handle+0x1c4>)
 8004078:	7812      	ldrb	r2, [r2, #0]
 800407a:	4013      	ands	r3, r2
 800407c:	b2da      	uxtb	r2, r3
 800407e:	4b0e      	ldr	r3, [pc, #56]	; (80040b8 <WLS_Handle+0x1c4>)
 8004080:	701a      	strb	r2, [r3, #0]
			__wls_sensor[i].Sensor_Last_State = __wls_sensor[i].Sensor_Current_State;
 8004082:	4b0c      	ldr	r3, [pc, #48]	; (80040b4 <WLS_Handle+0x1c0>)
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	0112      	lsls	r2, r2, #4
 8004088:	5cd1      	ldrb	r1, [r2, r3]
 800408a:	4a0a      	ldr	r2, [pc, #40]	; (80040b4 <WLS_Handle+0x1c0>)
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	011b      	lsls	r3, r3, #4
 8004090:	18d3      	adds	r3, r2, r3
 8004092:	3301      	adds	r3, #1
 8004094:	1c0a      	adds	r2, r1, #0
 8004096:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 6; i++){
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	3301      	adds	r3, #1
 800409c:	61bb      	str	r3, [r7, #24]
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	2b05      	cmp	r3, #5
 80040a2:	dc00      	bgt.n	80040a6 <WLS_Handle+0x1b2>
 80040a4:	e760      	b.n	8003f68 <WLS_Handle+0x74>
		}
	}
}
 80040a6:	46c0      	nop			; (mov r8, r8)
 80040a8:	46c0      	nop			; (mov r8, r8)
 80040aa:	46bd      	mov	sp, r7
 80040ac:	b008      	add	sp, #32
 80040ae:	bdb0      	pop	{r4, r5, r7, pc}
 80040b0:	2000022d 	.word	0x2000022d
 80040b4:	2000005c 	.word	0x2000005c
 80040b8:	2000022e 	.word	0x2000022e

080040bc <WLS_Init>:

void WLS_Init(){
 80040bc:	b580      	push	{r7, lr}
 80040be:	af00      	add	r7, sp, #0
	__sensor_value_mask = 0x00;
 80040c0:	4b09      	ldr	r3, [pc, #36]	; (80040e8 <WLS_Init+0x2c>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(V_PLUS_PORT, V_PLUS_PIN, 1);
 80040c6:	2390      	movs	r3, #144	; 0x90
 80040c8:	05db      	lsls	r3, r3, #23
 80040ca:	2201      	movs	r2, #1
 80040cc:	2101      	movs	r1, #1
 80040ce:	0018      	movs	r0, r3
 80040d0:	f7fd ff67 	bl	8001fa2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(V_MINUS_PORT, V_MINUS_PIN, 0);
 80040d4:	2390      	movs	r3, #144	; 0x90
 80040d6:	05db      	lsls	r3, r3, #23
 80040d8:	2200      	movs	r2, #0
 80040da:	2102      	movs	r1, #2
 80040dc:	0018      	movs	r0, r3
 80040de:	f7fd ff60 	bl	8001fa2 <HAL_GPIO_WritePin>
}
 80040e2:	46c0      	nop			; (mov r8, r8)
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	2000022e 	.word	0x2000022e

080040ec <WLS_Value>:

uint8_t WLS_Value(){
 80040ec:	b580      	push	{r7, lr}
 80040ee:	af00      	add	r7, sp, #0
	return __sensor_value_mask;
 80040f0:	4b02      	ldr	r3, [pc, #8]	; (80040fc <WLS_Value+0x10>)
 80040f2:	781b      	ldrb	r3, [r3, #0]
}
 80040f4:	0018      	movs	r0, r3
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	46c0      	nop			; (mov r8, r8)
 80040fc:	2000022e 	.word	0x2000022e

08004100 <FLASH_Erase>:
#include "flash.h"

void FLASH_Erase(uint32_t p_page){
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 8004108:	f7fd fc52 	bl	80019b0 <HAL_FLASH_Unlock>
	uint32_t t_PageError;
	FLASH_EraseInitTypeDef eraseInit;
	eraseInit.NbPages = 1;
 800410c:	2108      	movs	r1, #8
 800410e:	187b      	adds	r3, r7, r1
 8004110:	2201      	movs	r2, #1
 8004112:	609a      	str	r2, [r3, #8]
	eraseInit.PageAddress = FIRST_PAGE_ADD + BYTE_PER_PAGE * (p_page);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2280      	movs	r2, #128	; 0x80
 8004118:	0292      	lsls	r2, r2, #10
 800411a:	4694      	mov	ip, r2
 800411c:	4463      	add	r3, ip
 800411e:	029a      	lsls	r2, r3, #10
 8004120:	187b      	adds	r3, r7, r1
 8004122:	605a      	str	r2, [r3, #4]
	eraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8004124:	187b      	adds	r3, r7, r1
 8004126:	2200      	movs	r2, #0
 8004128:	601a      	str	r2, [r3, #0]
	HAL_FLASHEx_Erase(&eraseInit, &t_PageError);
 800412a:	2314      	movs	r3, #20
 800412c:	18fa      	adds	r2, r7, r3
 800412e:	187b      	adds	r3, r7, r1
 8004130:	0011      	movs	r1, r2
 8004132:	0018      	movs	r0, r3
 8004134:	f7fd fcfc 	bl	8001b30 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 8004138:	f7fd fc60 	bl	80019fc <HAL_FLASH_Lock>
//	while(FLASH->CR & FLASH_SR_BSY);
//	FLASH->CR &= ~FLASH_CR_PER;
//	FLASH->CR &= ~FLASH_CR_STRT;
//
//	FLASH->CR |= FLASH_CR_LOCK;
}
 800413c:	46c0      	nop			; (mov r8, r8)
 800413e:	46bd      	mov	sp, r7
 8004140:	b006      	add	sp, #24
 8004142:	bd80      	pop	{r7, pc}

08004144 <FLASH_Write>:

void FLASH_Write(uint32_t p_page, uint8_t *p_data, uint16_t p_len){
 8004144:	b5b0      	push	{r4, r5, r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	1dbb      	adds	r3, r7, #6
 8004150:	801a      	strh	r2, [r3, #0]
	FLASH_Erase(p_page);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	0018      	movs	r0, r3
 8004156:	f7ff ffd3 	bl	8004100 <FLASH_Erase>
	uint32_t t_add = FIRST_PAGE_ADD + BYTE_PER_PAGE * (p_page);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2280      	movs	r2, #128	; 0x80
 800415e:	0292      	lsls	r2, r2, #10
 8004160:	4694      	mov	ip, r2
 8004162:	4463      	add	r3, ip
 8004164:	029b      	lsls	r3, r3, #10
 8004166:	613b      	str	r3, [r7, #16]
	HAL_FLASH_Unlock();
 8004168:	f7fd fc22 	bl	80019b0 <HAL_FLASH_Unlock>
	for(int i = 0; i < p_len; i += 2){
 800416c:	2300      	movs	r3, #0
 800416e:	617b      	str	r3, [r7, #20]
 8004170:	e022      	b.n	80041b8 <FLASH_Write+0x74>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, t_add + i, p_data[i] | (uint16_t)((i+1 >= p_len) ? 0xFF : p_data[i+1]) << 8);
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	18d1      	adds	r1, r2, r3
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	68ba      	ldr	r2, [r7, #8]
 800417c:	18d3      	adds	r3, r2, r3
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	0018      	movs	r0, r3
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	1c5a      	adds	r2, r3, #1
 8004186:	1dbb      	adds	r3, r7, #6
 8004188:	881b      	ldrh	r3, [r3, #0]
 800418a:	429a      	cmp	r2, r3
 800418c:	da06      	bge.n	800419c <FLASH_Write+0x58>
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	3301      	adds	r3, #1
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	18d3      	adds	r3, r2, r3
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	021b      	lsls	r3, r3, #8
 800419a:	e001      	b.n	80041a0 <FLASH_Write+0x5c>
 800419c:	23ff      	movs	r3, #255	; 0xff
 800419e:	021b      	lsls	r3, r3, #8
 80041a0:	4303      	orrs	r3, r0
 80041a2:	001c      	movs	r4, r3
 80041a4:	17db      	asrs	r3, r3, #31
 80041a6:	001d      	movs	r5, r3
 80041a8:	0022      	movs	r2, r4
 80041aa:	002b      	movs	r3, r5
 80041ac:	2001      	movs	r0, #1
 80041ae:	f7fd fb69 	bl	8001884 <HAL_FLASH_Program>
	for(int i = 0; i < p_len; i += 2){
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	3302      	adds	r3, #2
 80041b6:	617b      	str	r3, [r7, #20]
 80041b8:	1dbb      	adds	r3, r7, #6
 80041ba:	881b      	ldrh	r3, [r3, #0]
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	429a      	cmp	r2, r3
 80041c0:	dbd7      	blt.n	8004172 <FLASH_Write+0x2e>
	}
	HAL_FLASH_Lock();
 80041c2:	f7fd fc1b 	bl	80019fc <HAL_FLASH_Lock>
//	}
//	FLASH->CR |= FLASH_CR_PG;
//	for(int i = 0; i < p_len; i += 2){
//		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, t_add + i, p_data[i] | (uint16_t)((i+1 >= p_len) ? 0xFF : p_data[i+1]) << 8);
//	}
}
 80041c6:	46c0      	nop			; (mov r8, r8)
 80041c8:	46bd      	mov	sp, r7
 80041ca:	b006      	add	sp, #24
 80041cc:	bdb0      	pop	{r4, r5, r7, pc}

080041ce <FLASH_Read>:

void FLASH_Read(uint32_t add, uint8_t *p_data, uint16_t p_len){
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b086      	sub	sp, #24
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	60f8      	str	r0, [r7, #12]
 80041d6:	60b9      	str	r1, [r7, #8]
 80041d8:	1dbb      	adds	r3, r7, #6
 80041da:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < p_len; i += 2){
 80041dc:	2300      	movs	r3, #0
 80041de:	617b      	str	r3, [r7, #20]
 80041e0:	e01b      	b.n	800421a <FLASH_Read+0x4c>
		uint16_t t_data = *(volatile uint16_t *)(add + i);
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	18d3      	adds	r3, r2, r3
 80041e8:	001a      	movs	r2, r3
 80041ea:	2112      	movs	r1, #18
 80041ec:	187b      	adds	r3, r7, r1
 80041ee:	8812      	ldrh	r2, [r2, #0]
 80041f0:	801a      	strh	r2, [r3, #0]
		p_data[i] = t_data;
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	68ba      	ldr	r2, [r7, #8]
 80041f6:	18d3      	adds	r3, r2, r3
 80041f8:	187a      	adds	r2, r7, r1
 80041fa:	8812      	ldrh	r2, [r2, #0]
 80041fc:	b2d2      	uxtb	r2, r2
 80041fe:	701a      	strb	r2, [r3, #0]
		p_data[i+1] = t_data >> 8;
 8004200:	187b      	adds	r3, r7, r1
 8004202:	881b      	ldrh	r3, [r3, #0]
 8004204:	0a1b      	lsrs	r3, r3, #8
 8004206:	b299      	uxth	r1, r3
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	3301      	adds	r3, #1
 800420c:	68ba      	ldr	r2, [r7, #8]
 800420e:	18d3      	adds	r3, r2, r3
 8004210:	b2ca      	uxtb	r2, r1
 8004212:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < p_len; i += 2){
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	3302      	adds	r3, #2
 8004218:	617b      	str	r3, [r7, #20]
 800421a:	1dbb      	adds	r3, r7, #6
 800421c:	881b      	ldrh	r3, [r3, #0]
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	429a      	cmp	r2, r3
 8004222:	dbde      	blt.n	80041e2 <FLASH_Read+0x14>
	}
}
 8004224:	46c0      	nop			; (mov r8, r8)
 8004226:	46c0      	nop			; (mov r8, r8)
 8004228:	46bd      	mov	sp, r7
 800422a:	b006      	add	sp, #24
 800422c:	bd80      	pop	{r7, pc}
	...

08004230 <__errno>:
 8004230:	4b01      	ldr	r3, [pc, #4]	; (8004238 <__errno+0x8>)
 8004232:	6818      	ldr	r0, [r3, #0]
 8004234:	4770      	bx	lr
 8004236:	46c0      	nop			; (mov r8, r8)
 8004238:	200000bc 	.word	0x200000bc

0800423c <__libc_init_array>:
 800423c:	b570      	push	{r4, r5, r6, lr}
 800423e:	2600      	movs	r6, #0
 8004240:	4d0c      	ldr	r5, [pc, #48]	; (8004274 <__libc_init_array+0x38>)
 8004242:	4c0d      	ldr	r4, [pc, #52]	; (8004278 <__libc_init_array+0x3c>)
 8004244:	1b64      	subs	r4, r4, r5
 8004246:	10a4      	asrs	r4, r4, #2
 8004248:	42a6      	cmp	r6, r4
 800424a:	d109      	bne.n	8004260 <__libc_init_array+0x24>
 800424c:	2600      	movs	r6, #0
 800424e:	f000 fc8d 	bl	8004b6c <_init>
 8004252:	4d0a      	ldr	r5, [pc, #40]	; (800427c <__libc_init_array+0x40>)
 8004254:	4c0a      	ldr	r4, [pc, #40]	; (8004280 <__libc_init_array+0x44>)
 8004256:	1b64      	subs	r4, r4, r5
 8004258:	10a4      	asrs	r4, r4, #2
 800425a:	42a6      	cmp	r6, r4
 800425c:	d105      	bne.n	800426a <__libc_init_array+0x2e>
 800425e:	bd70      	pop	{r4, r5, r6, pc}
 8004260:	00b3      	lsls	r3, r6, #2
 8004262:	58eb      	ldr	r3, [r5, r3]
 8004264:	4798      	blx	r3
 8004266:	3601      	adds	r6, #1
 8004268:	e7ee      	b.n	8004248 <__libc_init_array+0xc>
 800426a:	00b3      	lsls	r3, r6, #2
 800426c:	58eb      	ldr	r3, [r5, r3]
 800426e:	4798      	blx	r3
 8004270:	3601      	adds	r6, #1
 8004272:	e7f2      	b.n	800425a <__libc_init_array+0x1e>
 8004274:	08004cd4 	.word	0x08004cd4
 8004278:	08004cd4 	.word	0x08004cd4
 800427c:	08004cd4 	.word	0x08004cd4
 8004280:	08004cd8 	.word	0x08004cd8

08004284 <memcpy>:
 8004284:	2300      	movs	r3, #0
 8004286:	b510      	push	{r4, lr}
 8004288:	429a      	cmp	r2, r3
 800428a:	d100      	bne.n	800428e <memcpy+0xa>
 800428c:	bd10      	pop	{r4, pc}
 800428e:	5ccc      	ldrb	r4, [r1, r3]
 8004290:	54c4      	strb	r4, [r0, r3]
 8004292:	3301      	adds	r3, #1
 8004294:	e7f8      	b.n	8004288 <memcpy+0x4>

08004296 <memset>:
 8004296:	0003      	movs	r3, r0
 8004298:	1882      	adds	r2, r0, r2
 800429a:	4293      	cmp	r3, r2
 800429c:	d100      	bne.n	80042a0 <memset+0xa>
 800429e:	4770      	bx	lr
 80042a0:	7019      	strb	r1, [r3, #0]
 80042a2:	3301      	adds	r3, #1
 80042a4:	e7f9      	b.n	800429a <memset+0x4>
	...

080042a8 <_vsiprintf_r>:
 80042a8:	b500      	push	{lr}
 80042aa:	b09b      	sub	sp, #108	; 0x6c
 80042ac:	9100      	str	r1, [sp, #0]
 80042ae:	9104      	str	r1, [sp, #16]
 80042b0:	4906      	ldr	r1, [pc, #24]	; (80042cc <_vsiprintf_r+0x24>)
 80042b2:	9105      	str	r1, [sp, #20]
 80042b4:	9102      	str	r1, [sp, #8]
 80042b6:	4906      	ldr	r1, [pc, #24]	; (80042d0 <_vsiprintf_r+0x28>)
 80042b8:	9103      	str	r1, [sp, #12]
 80042ba:	4669      	mov	r1, sp
 80042bc:	f000 f878 	bl	80043b0 <_svfiprintf_r>
 80042c0:	2300      	movs	r3, #0
 80042c2:	9a00      	ldr	r2, [sp, #0]
 80042c4:	7013      	strb	r3, [r2, #0]
 80042c6:	b01b      	add	sp, #108	; 0x6c
 80042c8:	bd00      	pop	{pc}
 80042ca:	46c0      	nop			; (mov r8, r8)
 80042cc:	7fffffff 	.word	0x7fffffff
 80042d0:	ffff0208 	.word	0xffff0208

080042d4 <vsiprintf>:
 80042d4:	b510      	push	{r4, lr}
 80042d6:	0013      	movs	r3, r2
 80042d8:	000a      	movs	r2, r1
 80042da:	0001      	movs	r1, r0
 80042dc:	4802      	ldr	r0, [pc, #8]	; (80042e8 <vsiprintf+0x14>)
 80042de:	6800      	ldr	r0, [r0, #0]
 80042e0:	f7ff ffe2 	bl	80042a8 <_vsiprintf_r>
 80042e4:	bd10      	pop	{r4, pc}
 80042e6:	46c0      	nop			; (mov r8, r8)
 80042e8:	200000bc 	.word	0x200000bc

080042ec <__ssputs_r>:
 80042ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042ee:	688e      	ldr	r6, [r1, #8]
 80042f0:	b085      	sub	sp, #20
 80042f2:	0007      	movs	r7, r0
 80042f4:	000c      	movs	r4, r1
 80042f6:	9203      	str	r2, [sp, #12]
 80042f8:	9301      	str	r3, [sp, #4]
 80042fa:	429e      	cmp	r6, r3
 80042fc:	d83c      	bhi.n	8004378 <__ssputs_r+0x8c>
 80042fe:	2390      	movs	r3, #144	; 0x90
 8004300:	898a      	ldrh	r2, [r1, #12]
 8004302:	00db      	lsls	r3, r3, #3
 8004304:	421a      	tst	r2, r3
 8004306:	d034      	beq.n	8004372 <__ssputs_r+0x86>
 8004308:	6909      	ldr	r1, [r1, #16]
 800430a:	6823      	ldr	r3, [r4, #0]
 800430c:	6960      	ldr	r0, [r4, #20]
 800430e:	1a5b      	subs	r3, r3, r1
 8004310:	9302      	str	r3, [sp, #8]
 8004312:	2303      	movs	r3, #3
 8004314:	4343      	muls	r3, r0
 8004316:	0fdd      	lsrs	r5, r3, #31
 8004318:	18ed      	adds	r5, r5, r3
 800431a:	9b01      	ldr	r3, [sp, #4]
 800431c:	9802      	ldr	r0, [sp, #8]
 800431e:	3301      	adds	r3, #1
 8004320:	181b      	adds	r3, r3, r0
 8004322:	106d      	asrs	r5, r5, #1
 8004324:	42ab      	cmp	r3, r5
 8004326:	d900      	bls.n	800432a <__ssputs_r+0x3e>
 8004328:	001d      	movs	r5, r3
 800432a:	0553      	lsls	r3, r2, #21
 800432c:	d532      	bpl.n	8004394 <__ssputs_r+0xa8>
 800432e:	0029      	movs	r1, r5
 8004330:	0038      	movs	r0, r7
 8004332:	f000 fb49 	bl	80049c8 <_malloc_r>
 8004336:	1e06      	subs	r6, r0, #0
 8004338:	d109      	bne.n	800434e <__ssputs_r+0x62>
 800433a:	230c      	movs	r3, #12
 800433c:	603b      	str	r3, [r7, #0]
 800433e:	2340      	movs	r3, #64	; 0x40
 8004340:	2001      	movs	r0, #1
 8004342:	89a2      	ldrh	r2, [r4, #12]
 8004344:	4240      	negs	r0, r0
 8004346:	4313      	orrs	r3, r2
 8004348:	81a3      	strh	r3, [r4, #12]
 800434a:	b005      	add	sp, #20
 800434c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800434e:	9a02      	ldr	r2, [sp, #8]
 8004350:	6921      	ldr	r1, [r4, #16]
 8004352:	f7ff ff97 	bl	8004284 <memcpy>
 8004356:	89a3      	ldrh	r3, [r4, #12]
 8004358:	4a14      	ldr	r2, [pc, #80]	; (80043ac <__ssputs_r+0xc0>)
 800435a:	401a      	ands	r2, r3
 800435c:	2380      	movs	r3, #128	; 0x80
 800435e:	4313      	orrs	r3, r2
 8004360:	81a3      	strh	r3, [r4, #12]
 8004362:	9b02      	ldr	r3, [sp, #8]
 8004364:	6126      	str	r6, [r4, #16]
 8004366:	18f6      	adds	r6, r6, r3
 8004368:	6026      	str	r6, [r4, #0]
 800436a:	6165      	str	r5, [r4, #20]
 800436c:	9e01      	ldr	r6, [sp, #4]
 800436e:	1aed      	subs	r5, r5, r3
 8004370:	60a5      	str	r5, [r4, #8]
 8004372:	9b01      	ldr	r3, [sp, #4]
 8004374:	429e      	cmp	r6, r3
 8004376:	d900      	bls.n	800437a <__ssputs_r+0x8e>
 8004378:	9e01      	ldr	r6, [sp, #4]
 800437a:	0032      	movs	r2, r6
 800437c:	9903      	ldr	r1, [sp, #12]
 800437e:	6820      	ldr	r0, [r4, #0]
 8004380:	f000 faa3 	bl	80048ca <memmove>
 8004384:	68a3      	ldr	r3, [r4, #8]
 8004386:	2000      	movs	r0, #0
 8004388:	1b9b      	subs	r3, r3, r6
 800438a:	60a3      	str	r3, [r4, #8]
 800438c:	6823      	ldr	r3, [r4, #0]
 800438e:	199e      	adds	r6, r3, r6
 8004390:	6026      	str	r6, [r4, #0]
 8004392:	e7da      	b.n	800434a <__ssputs_r+0x5e>
 8004394:	002a      	movs	r2, r5
 8004396:	0038      	movs	r0, r7
 8004398:	f000 fb8c 	bl	8004ab4 <_realloc_r>
 800439c:	1e06      	subs	r6, r0, #0
 800439e:	d1e0      	bne.n	8004362 <__ssputs_r+0x76>
 80043a0:	0038      	movs	r0, r7
 80043a2:	6921      	ldr	r1, [r4, #16]
 80043a4:	f000 faa4 	bl	80048f0 <_free_r>
 80043a8:	e7c7      	b.n	800433a <__ssputs_r+0x4e>
 80043aa:	46c0      	nop			; (mov r8, r8)
 80043ac:	fffffb7f 	.word	0xfffffb7f

080043b0 <_svfiprintf_r>:
 80043b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043b2:	b0a1      	sub	sp, #132	; 0x84
 80043b4:	9003      	str	r0, [sp, #12]
 80043b6:	001d      	movs	r5, r3
 80043b8:	898b      	ldrh	r3, [r1, #12]
 80043ba:	000f      	movs	r7, r1
 80043bc:	0016      	movs	r6, r2
 80043be:	061b      	lsls	r3, r3, #24
 80043c0:	d511      	bpl.n	80043e6 <_svfiprintf_r+0x36>
 80043c2:	690b      	ldr	r3, [r1, #16]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10e      	bne.n	80043e6 <_svfiprintf_r+0x36>
 80043c8:	2140      	movs	r1, #64	; 0x40
 80043ca:	f000 fafd 	bl	80049c8 <_malloc_r>
 80043ce:	6038      	str	r0, [r7, #0]
 80043d0:	6138      	str	r0, [r7, #16]
 80043d2:	2800      	cmp	r0, #0
 80043d4:	d105      	bne.n	80043e2 <_svfiprintf_r+0x32>
 80043d6:	230c      	movs	r3, #12
 80043d8:	9a03      	ldr	r2, [sp, #12]
 80043da:	3801      	subs	r0, #1
 80043dc:	6013      	str	r3, [r2, #0]
 80043de:	b021      	add	sp, #132	; 0x84
 80043e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043e2:	2340      	movs	r3, #64	; 0x40
 80043e4:	617b      	str	r3, [r7, #20]
 80043e6:	2300      	movs	r3, #0
 80043e8:	ac08      	add	r4, sp, #32
 80043ea:	6163      	str	r3, [r4, #20]
 80043ec:	3320      	adds	r3, #32
 80043ee:	7663      	strb	r3, [r4, #25]
 80043f0:	3310      	adds	r3, #16
 80043f2:	76a3      	strb	r3, [r4, #26]
 80043f4:	9507      	str	r5, [sp, #28]
 80043f6:	0035      	movs	r5, r6
 80043f8:	782b      	ldrb	r3, [r5, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <_svfiprintf_r+0x52>
 80043fe:	2b25      	cmp	r3, #37	; 0x25
 8004400:	d147      	bne.n	8004492 <_svfiprintf_r+0xe2>
 8004402:	1bab      	subs	r3, r5, r6
 8004404:	9305      	str	r3, [sp, #20]
 8004406:	42b5      	cmp	r5, r6
 8004408:	d00c      	beq.n	8004424 <_svfiprintf_r+0x74>
 800440a:	0032      	movs	r2, r6
 800440c:	0039      	movs	r1, r7
 800440e:	9803      	ldr	r0, [sp, #12]
 8004410:	f7ff ff6c 	bl	80042ec <__ssputs_r>
 8004414:	1c43      	adds	r3, r0, #1
 8004416:	d100      	bne.n	800441a <_svfiprintf_r+0x6a>
 8004418:	e0ae      	b.n	8004578 <_svfiprintf_r+0x1c8>
 800441a:	6962      	ldr	r2, [r4, #20]
 800441c:	9b05      	ldr	r3, [sp, #20]
 800441e:	4694      	mov	ip, r2
 8004420:	4463      	add	r3, ip
 8004422:	6163      	str	r3, [r4, #20]
 8004424:	782b      	ldrb	r3, [r5, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d100      	bne.n	800442c <_svfiprintf_r+0x7c>
 800442a:	e0a5      	b.n	8004578 <_svfiprintf_r+0x1c8>
 800442c:	2201      	movs	r2, #1
 800442e:	2300      	movs	r3, #0
 8004430:	4252      	negs	r2, r2
 8004432:	6062      	str	r2, [r4, #4]
 8004434:	a904      	add	r1, sp, #16
 8004436:	3254      	adds	r2, #84	; 0x54
 8004438:	1852      	adds	r2, r2, r1
 800443a:	1c6e      	adds	r6, r5, #1
 800443c:	6023      	str	r3, [r4, #0]
 800443e:	60e3      	str	r3, [r4, #12]
 8004440:	60a3      	str	r3, [r4, #8]
 8004442:	7013      	strb	r3, [r2, #0]
 8004444:	65a3      	str	r3, [r4, #88]	; 0x58
 8004446:	2205      	movs	r2, #5
 8004448:	7831      	ldrb	r1, [r6, #0]
 800444a:	4854      	ldr	r0, [pc, #336]	; (800459c <_svfiprintf_r+0x1ec>)
 800444c:	f000 fa32 	bl	80048b4 <memchr>
 8004450:	1c75      	adds	r5, r6, #1
 8004452:	2800      	cmp	r0, #0
 8004454:	d11f      	bne.n	8004496 <_svfiprintf_r+0xe6>
 8004456:	6822      	ldr	r2, [r4, #0]
 8004458:	06d3      	lsls	r3, r2, #27
 800445a:	d504      	bpl.n	8004466 <_svfiprintf_r+0xb6>
 800445c:	2353      	movs	r3, #83	; 0x53
 800445e:	a904      	add	r1, sp, #16
 8004460:	185b      	adds	r3, r3, r1
 8004462:	2120      	movs	r1, #32
 8004464:	7019      	strb	r1, [r3, #0]
 8004466:	0713      	lsls	r3, r2, #28
 8004468:	d504      	bpl.n	8004474 <_svfiprintf_r+0xc4>
 800446a:	2353      	movs	r3, #83	; 0x53
 800446c:	a904      	add	r1, sp, #16
 800446e:	185b      	adds	r3, r3, r1
 8004470:	212b      	movs	r1, #43	; 0x2b
 8004472:	7019      	strb	r1, [r3, #0]
 8004474:	7833      	ldrb	r3, [r6, #0]
 8004476:	2b2a      	cmp	r3, #42	; 0x2a
 8004478:	d016      	beq.n	80044a8 <_svfiprintf_r+0xf8>
 800447a:	0035      	movs	r5, r6
 800447c:	2100      	movs	r1, #0
 800447e:	200a      	movs	r0, #10
 8004480:	68e3      	ldr	r3, [r4, #12]
 8004482:	782a      	ldrb	r2, [r5, #0]
 8004484:	1c6e      	adds	r6, r5, #1
 8004486:	3a30      	subs	r2, #48	; 0x30
 8004488:	2a09      	cmp	r2, #9
 800448a:	d94e      	bls.n	800452a <_svfiprintf_r+0x17a>
 800448c:	2900      	cmp	r1, #0
 800448e:	d111      	bne.n	80044b4 <_svfiprintf_r+0x104>
 8004490:	e017      	b.n	80044c2 <_svfiprintf_r+0x112>
 8004492:	3501      	adds	r5, #1
 8004494:	e7b0      	b.n	80043f8 <_svfiprintf_r+0x48>
 8004496:	4b41      	ldr	r3, [pc, #260]	; (800459c <_svfiprintf_r+0x1ec>)
 8004498:	6822      	ldr	r2, [r4, #0]
 800449a:	1ac0      	subs	r0, r0, r3
 800449c:	2301      	movs	r3, #1
 800449e:	4083      	lsls	r3, r0
 80044a0:	4313      	orrs	r3, r2
 80044a2:	002e      	movs	r6, r5
 80044a4:	6023      	str	r3, [r4, #0]
 80044a6:	e7ce      	b.n	8004446 <_svfiprintf_r+0x96>
 80044a8:	9b07      	ldr	r3, [sp, #28]
 80044aa:	1d19      	adds	r1, r3, #4
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	9107      	str	r1, [sp, #28]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	db01      	blt.n	80044b8 <_svfiprintf_r+0x108>
 80044b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80044b6:	e004      	b.n	80044c2 <_svfiprintf_r+0x112>
 80044b8:	425b      	negs	r3, r3
 80044ba:	60e3      	str	r3, [r4, #12]
 80044bc:	2302      	movs	r3, #2
 80044be:	4313      	orrs	r3, r2
 80044c0:	6023      	str	r3, [r4, #0]
 80044c2:	782b      	ldrb	r3, [r5, #0]
 80044c4:	2b2e      	cmp	r3, #46	; 0x2e
 80044c6:	d10a      	bne.n	80044de <_svfiprintf_r+0x12e>
 80044c8:	786b      	ldrb	r3, [r5, #1]
 80044ca:	2b2a      	cmp	r3, #42	; 0x2a
 80044cc:	d135      	bne.n	800453a <_svfiprintf_r+0x18a>
 80044ce:	9b07      	ldr	r3, [sp, #28]
 80044d0:	3502      	adds	r5, #2
 80044d2:	1d1a      	adds	r2, r3, #4
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	9207      	str	r2, [sp, #28]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	db2b      	blt.n	8004534 <_svfiprintf_r+0x184>
 80044dc:	9309      	str	r3, [sp, #36]	; 0x24
 80044de:	4e30      	ldr	r6, [pc, #192]	; (80045a0 <_svfiprintf_r+0x1f0>)
 80044e0:	2203      	movs	r2, #3
 80044e2:	0030      	movs	r0, r6
 80044e4:	7829      	ldrb	r1, [r5, #0]
 80044e6:	f000 f9e5 	bl	80048b4 <memchr>
 80044ea:	2800      	cmp	r0, #0
 80044ec:	d006      	beq.n	80044fc <_svfiprintf_r+0x14c>
 80044ee:	2340      	movs	r3, #64	; 0x40
 80044f0:	1b80      	subs	r0, r0, r6
 80044f2:	4083      	lsls	r3, r0
 80044f4:	6822      	ldr	r2, [r4, #0]
 80044f6:	3501      	adds	r5, #1
 80044f8:	4313      	orrs	r3, r2
 80044fa:	6023      	str	r3, [r4, #0]
 80044fc:	7829      	ldrb	r1, [r5, #0]
 80044fe:	2206      	movs	r2, #6
 8004500:	4828      	ldr	r0, [pc, #160]	; (80045a4 <_svfiprintf_r+0x1f4>)
 8004502:	1c6e      	adds	r6, r5, #1
 8004504:	7621      	strb	r1, [r4, #24]
 8004506:	f000 f9d5 	bl	80048b4 <memchr>
 800450a:	2800      	cmp	r0, #0
 800450c:	d03c      	beq.n	8004588 <_svfiprintf_r+0x1d8>
 800450e:	4b26      	ldr	r3, [pc, #152]	; (80045a8 <_svfiprintf_r+0x1f8>)
 8004510:	2b00      	cmp	r3, #0
 8004512:	d125      	bne.n	8004560 <_svfiprintf_r+0x1b0>
 8004514:	2207      	movs	r2, #7
 8004516:	9b07      	ldr	r3, [sp, #28]
 8004518:	3307      	adds	r3, #7
 800451a:	4393      	bics	r3, r2
 800451c:	3308      	adds	r3, #8
 800451e:	9307      	str	r3, [sp, #28]
 8004520:	6963      	ldr	r3, [r4, #20]
 8004522:	9a04      	ldr	r2, [sp, #16]
 8004524:	189b      	adds	r3, r3, r2
 8004526:	6163      	str	r3, [r4, #20]
 8004528:	e765      	b.n	80043f6 <_svfiprintf_r+0x46>
 800452a:	4343      	muls	r3, r0
 800452c:	0035      	movs	r5, r6
 800452e:	2101      	movs	r1, #1
 8004530:	189b      	adds	r3, r3, r2
 8004532:	e7a6      	b.n	8004482 <_svfiprintf_r+0xd2>
 8004534:	2301      	movs	r3, #1
 8004536:	425b      	negs	r3, r3
 8004538:	e7d0      	b.n	80044dc <_svfiprintf_r+0x12c>
 800453a:	2300      	movs	r3, #0
 800453c:	200a      	movs	r0, #10
 800453e:	001a      	movs	r2, r3
 8004540:	3501      	adds	r5, #1
 8004542:	6063      	str	r3, [r4, #4]
 8004544:	7829      	ldrb	r1, [r5, #0]
 8004546:	1c6e      	adds	r6, r5, #1
 8004548:	3930      	subs	r1, #48	; 0x30
 800454a:	2909      	cmp	r1, #9
 800454c:	d903      	bls.n	8004556 <_svfiprintf_r+0x1a6>
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0c5      	beq.n	80044de <_svfiprintf_r+0x12e>
 8004552:	9209      	str	r2, [sp, #36]	; 0x24
 8004554:	e7c3      	b.n	80044de <_svfiprintf_r+0x12e>
 8004556:	4342      	muls	r2, r0
 8004558:	0035      	movs	r5, r6
 800455a:	2301      	movs	r3, #1
 800455c:	1852      	adds	r2, r2, r1
 800455e:	e7f1      	b.n	8004544 <_svfiprintf_r+0x194>
 8004560:	ab07      	add	r3, sp, #28
 8004562:	9300      	str	r3, [sp, #0]
 8004564:	003a      	movs	r2, r7
 8004566:	0021      	movs	r1, r4
 8004568:	4b10      	ldr	r3, [pc, #64]	; (80045ac <_svfiprintf_r+0x1fc>)
 800456a:	9803      	ldr	r0, [sp, #12]
 800456c:	e000      	b.n	8004570 <_svfiprintf_r+0x1c0>
 800456e:	bf00      	nop
 8004570:	9004      	str	r0, [sp, #16]
 8004572:	9b04      	ldr	r3, [sp, #16]
 8004574:	3301      	adds	r3, #1
 8004576:	d1d3      	bne.n	8004520 <_svfiprintf_r+0x170>
 8004578:	89bb      	ldrh	r3, [r7, #12]
 800457a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800457c:	065b      	lsls	r3, r3, #25
 800457e:	d400      	bmi.n	8004582 <_svfiprintf_r+0x1d2>
 8004580:	e72d      	b.n	80043de <_svfiprintf_r+0x2e>
 8004582:	2001      	movs	r0, #1
 8004584:	4240      	negs	r0, r0
 8004586:	e72a      	b.n	80043de <_svfiprintf_r+0x2e>
 8004588:	ab07      	add	r3, sp, #28
 800458a:	9300      	str	r3, [sp, #0]
 800458c:	003a      	movs	r2, r7
 800458e:	0021      	movs	r1, r4
 8004590:	4b06      	ldr	r3, [pc, #24]	; (80045ac <_svfiprintf_r+0x1fc>)
 8004592:	9803      	ldr	r0, [sp, #12]
 8004594:	f000 f87c 	bl	8004690 <_printf_i>
 8004598:	e7ea      	b.n	8004570 <_svfiprintf_r+0x1c0>
 800459a:	46c0      	nop			; (mov r8, r8)
 800459c:	08004ca0 	.word	0x08004ca0
 80045a0:	08004ca6 	.word	0x08004ca6
 80045a4:	08004caa 	.word	0x08004caa
 80045a8:	00000000 	.word	0x00000000
 80045ac:	080042ed 	.word	0x080042ed

080045b0 <_printf_common>:
 80045b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045b2:	0015      	movs	r5, r2
 80045b4:	9301      	str	r3, [sp, #4]
 80045b6:	688a      	ldr	r2, [r1, #8]
 80045b8:	690b      	ldr	r3, [r1, #16]
 80045ba:	000c      	movs	r4, r1
 80045bc:	9000      	str	r0, [sp, #0]
 80045be:	4293      	cmp	r3, r2
 80045c0:	da00      	bge.n	80045c4 <_printf_common+0x14>
 80045c2:	0013      	movs	r3, r2
 80045c4:	0022      	movs	r2, r4
 80045c6:	602b      	str	r3, [r5, #0]
 80045c8:	3243      	adds	r2, #67	; 0x43
 80045ca:	7812      	ldrb	r2, [r2, #0]
 80045cc:	2a00      	cmp	r2, #0
 80045ce:	d001      	beq.n	80045d4 <_printf_common+0x24>
 80045d0:	3301      	adds	r3, #1
 80045d2:	602b      	str	r3, [r5, #0]
 80045d4:	6823      	ldr	r3, [r4, #0]
 80045d6:	069b      	lsls	r3, r3, #26
 80045d8:	d502      	bpl.n	80045e0 <_printf_common+0x30>
 80045da:	682b      	ldr	r3, [r5, #0]
 80045dc:	3302      	adds	r3, #2
 80045de:	602b      	str	r3, [r5, #0]
 80045e0:	6822      	ldr	r2, [r4, #0]
 80045e2:	2306      	movs	r3, #6
 80045e4:	0017      	movs	r7, r2
 80045e6:	401f      	ands	r7, r3
 80045e8:	421a      	tst	r2, r3
 80045ea:	d027      	beq.n	800463c <_printf_common+0x8c>
 80045ec:	0023      	movs	r3, r4
 80045ee:	3343      	adds	r3, #67	; 0x43
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	1e5a      	subs	r2, r3, #1
 80045f4:	4193      	sbcs	r3, r2
 80045f6:	6822      	ldr	r2, [r4, #0]
 80045f8:	0692      	lsls	r2, r2, #26
 80045fa:	d430      	bmi.n	800465e <_printf_common+0xae>
 80045fc:	0022      	movs	r2, r4
 80045fe:	9901      	ldr	r1, [sp, #4]
 8004600:	9800      	ldr	r0, [sp, #0]
 8004602:	9e08      	ldr	r6, [sp, #32]
 8004604:	3243      	adds	r2, #67	; 0x43
 8004606:	47b0      	blx	r6
 8004608:	1c43      	adds	r3, r0, #1
 800460a:	d025      	beq.n	8004658 <_printf_common+0xa8>
 800460c:	2306      	movs	r3, #6
 800460e:	6820      	ldr	r0, [r4, #0]
 8004610:	682a      	ldr	r2, [r5, #0]
 8004612:	68e1      	ldr	r1, [r4, #12]
 8004614:	2500      	movs	r5, #0
 8004616:	4003      	ands	r3, r0
 8004618:	2b04      	cmp	r3, #4
 800461a:	d103      	bne.n	8004624 <_printf_common+0x74>
 800461c:	1a8d      	subs	r5, r1, r2
 800461e:	43eb      	mvns	r3, r5
 8004620:	17db      	asrs	r3, r3, #31
 8004622:	401d      	ands	r5, r3
 8004624:	68a3      	ldr	r3, [r4, #8]
 8004626:	6922      	ldr	r2, [r4, #16]
 8004628:	4293      	cmp	r3, r2
 800462a:	dd01      	ble.n	8004630 <_printf_common+0x80>
 800462c:	1a9b      	subs	r3, r3, r2
 800462e:	18ed      	adds	r5, r5, r3
 8004630:	2700      	movs	r7, #0
 8004632:	42bd      	cmp	r5, r7
 8004634:	d120      	bne.n	8004678 <_printf_common+0xc8>
 8004636:	2000      	movs	r0, #0
 8004638:	e010      	b.n	800465c <_printf_common+0xac>
 800463a:	3701      	adds	r7, #1
 800463c:	68e3      	ldr	r3, [r4, #12]
 800463e:	682a      	ldr	r2, [r5, #0]
 8004640:	1a9b      	subs	r3, r3, r2
 8004642:	42bb      	cmp	r3, r7
 8004644:	ddd2      	ble.n	80045ec <_printf_common+0x3c>
 8004646:	0022      	movs	r2, r4
 8004648:	2301      	movs	r3, #1
 800464a:	9901      	ldr	r1, [sp, #4]
 800464c:	9800      	ldr	r0, [sp, #0]
 800464e:	9e08      	ldr	r6, [sp, #32]
 8004650:	3219      	adds	r2, #25
 8004652:	47b0      	blx	r6
 8004654:	1c43      	adds	r3, r0, #1
 8004656:	d1f0      	bne.n	800463a <_printf_common+0x8a>
 8004658:	2001      	movs	r0, #1
 800465a:	4240      	negs	r0, r0
 800465c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800465e:	2030      	movs	r0, #48	; 0x30
 8004660:	18e1      	adds	r1, r4, r3
 8004662:	3143      	adds	r1, #67	; 0x43
 8004664:	7008      	strb	r0, [r1, #0]
 8004666:	0021      	movs	r1, r4
 8004668:	1c5a      	adds	r2, r3, #1
 800466a:	3145      	adds	r1, #69	; 0x45
 800466c:	7809      	ldrb	r1, [r1, #0]
 800466e:	18a2      	adds	r2, r4, r2
 8004670:	3243      	adds	r2, #67	; 0x43
 8004672:	3302      	adds	r3, #2
 8004674:	7011      	strb	r1, [r2, #0]
 8004676:	e7c1      	b.n	80045fc <_printf_common+0x4c>
 8004678:	0022      	movs	r2, r4
 800467a:	2301      	movs	r3, #1
 800467c:	9901      	ldr	r1, [sp, #4]
 800467e:	9800      	ldr	r0, [sp, #0]
 8004680:	9e08      	ldr	r6, [sp, #32]
 8004682:	321a      	adds	r2, #26
 8004684:	47b0      	blx	r6
 8004686:	1c43      	adds	r3, r0, #1
 8004688:	d0e6      	beq.n	8004658 <_printf_common+0xa8>
 800468a:	3701      	adds	r7, #1
 800468c:	e7d1      	b.n	8004632 <_printf_common+0x82>
	...

08004690 <_printf_i>:
 8004690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004692:	b08b      	sub	sp, #44	; 0x2c
 8004694:	9206      	str	r2, [sp, #24]
 8004696:	000a      	movs	r2, r1
 8004698:	3243      	adds	r2, #67	; 0x43
 800469a:	9307      	str	r3, [sp, #28]
 800469c:	9005      	str	r0, [sp, #20]
 800469e:	9204      	str	r2, [sp, #16]
 80046a0:	7e0a      	ldrb	r2, [r1, #24]
 80046a2:	000c      	movs	r4, r1
 80046a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80046a6:	2a78      	cmp	r2, #120	; 0x78
 80046a8:	d807      	bhi.n	80046ba <_printf_i+0x2a>
 80046aa:	2a62      	cmp	r2, #98	; 0x62
 80046ac:	d809      	bhi.n	80046c2 <_printf_i+0x32>
 80046ae:	2a00      	cmp	r2, #0
 80046b0:	d100      	bne.n	80046b4 <_printf_i+0x24>
 80046b2:	e0c1      	b.n	8004838 <_printf_i+0x1a8>
 80046b4:	2a58      	cmp	r2, #88	; 0x58
 80046b6:	d100      	bne.n	80046ba <_printf_i+0x2a>
 80046b8:	e08c      	b.n	80047d4 <_printf_i+0x144>
 80046ba:	0026      	movs	r6, r4
 80046bc:	3642      	adds	r6, #66	; 0x42
 80046be:	7032      	strb	r2, [r6, #0]
 80046c0:	e022      	b.n	8004708 <_printf_i+0x78>
 80046c2:	0010      	movs	r0, r2
 80046c4:	3863      	subs	r0, #99	; 0x63
 80046c6:	2815      	cmp	r0, #21
 80046c8:	d8f7      	bhi.n	80046ba <_printf_i+0x2a>
 80046ca:	f7fb fd25 	bl	8000118 <__gnu_thumb1_case_shi>
 80046ce:	0016      	.short	0x0016
 80046d0:	fff6001f 	.word	0xfff6001f
 80046d4:	fff6fff6 	.word	0xfff6fff6
 80046d8:	001ffff6 	.word	0x001ffff6
 80046dc:	fff6fff6 	.word	0xfff6fff6
 80046e0:	fff6fff6 	.word	0xfff6fff6
 80046e4:	003600a8 	.word	0x003600a8
 80046e8:	fff6009a 	.word	0xfff6009a
 80046ec:	00b9fff6 	.word	0x00b9fff6
 80046f0:	0036fff6 	.word	0x0036fff6
 80046f4:	fff6fff6 	.word	0xfff6fff6
 80046f8:	009e      	.short	0x009e
 80046fa:	0026      	movs	r6, r4
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	3642      	adds	r6, #66	; 0x42
 8004700:	1d11      	adds	r1, r2, #4
 8004702:	6019      	str	r1, [r3, #0]
 8004704:	6813      	ldr	r3, [r2, #0]
 8004706:	7033      	strb	r3, [r6, #0]
 8004708:	2301      	movs	r3, #1
 800470a:	e0a7      	b.n	800485c <_printf_i+0x1cc>
 800470c:	6808      	ldr	r0, [r1, #0]
 800470e:	6819      	ldr	r1, [r3, #0]
 8004710:	1d0a      	adds	r2, r1, #4
 8004712:	0605      	lsls	r5, r0, #24
 8004714:	d50b      	bpl.n	800472e <_printf_i+0x9e>
 8004716:	680d      	ldr	r5, [r1, #0]
 8004718:	601a      	str	r2, [r3, #0]
 800471a:	2d00      	cmp	r5, #0
 800471c:	da03      	bge.n	8004726 <_printf_i+0x96>
 800471e:	232d      	movs	r3, #45	; 0x2d
 8004720:	9a04      	ldr	r2, [sp, #16]
 8004722:	426d      	negs	r5, r5
 8004724:	7013      	strb	r3, [r2, #0]
 8004726:	4b61      	ldr	r3, [pc, #388]	; (80048ac <_printf_i+0x21c>)
 8004728:	270a      	movs	r7, #10
 800472a:	9303      	str	r3, [sp, #12]
 800472c:	e01b      	b.n	8004766 <_printf_i+0xd6>
 800472e:	680d      	ldr	r5, [r1, #0]
 8004730:	601a      	str	r2, [r3, #0]
 8004732:	0641      	lsls	r1, r0, #25
 8004734:	d5f1      	bpl.n	800471a <_printf_i+0x8a>
 8004736:	b22d      	sxth	r5, r5
 8004738:	e7ef      	b.n	800471a <_printf_i+0x8a>
 800473a:	680d      	ldr	r5, [r1, #0]
 800473c:	6819      	ldr	r1, [r3, #0]
 800473e:	1d08      	adds	r0, r1, #4
 8004740:	6018      	str	r0, [r3, #0]
 8004742:	062e      	lsls	r6, r5, #24
 8004744:	d501      	bpl.n	800474a <_printf_i+0xba>
 8004746:	680d      	ldr	r5, [r1, #0]
 8004748:	e003      	b.n	8004752 <_printf_i+0xc2>
 800474a:	066d      	lsls	r5, r5, #25
 800474c:	d5fb      	bpl.n	8004746 <_printf_i+0xb6>
 800474e:	680d      	ldr	r5, [r1, #0]
 8004750:	b2ad      	uxth	r5, r5
 8004752:	4b56      	ldr	r3, [pc, #344]	; (80048ac <_printf_i+0x21c>)
 8004754:	2708      	movs	r7, #8
 8004756:	9303      	str	r3, [sp, #12]
 8004758:	2a6f      	cmp	r2, #111	; 0x6f
 800475a:	d000      	beq.n	800475e <_printf_i+0xce>
 800475c:	3702      	adds	r7, #2
 800475e:	0023      	movs	r3, r4
 8004760:	2200      	movs	r2, #0
 8004762:	3343      	adds	r3, #67	; 0x43
 8004764:	701a      	strb	r2, [r3, #0]
 8004766:	6863      	ldr	r3, [r4, #4]
 8004768:	60a3      	str	r3, [r4, #8]
 800476a:	2b00      	cmp	r3, #0
 800476c:	db03      	blt.n	8004776 <_printf_i+0xe6>
 800476e:	2204      	movs	r2, #4
 8004770:	6821      	ldr	r1, [r4, #0]
 8004772:	4391      	bics	r1, r2
 8004774:	6021      	str	r1, [r4, #0]
 8004776:	2d00      	cmp	r5, #0
 8004778:	d102      	bne.n	8004780 <_printf_i+0xf0>
 800477a:	9e04      	ldr	r6, [sp, #16]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00c      	beq.n	800479a <_printf_i+0x10a>
 8004780:	9e04      	ldr	r6, [sp, #16]
 8004782:	0028      	movs	r0, r5
 8004784:	0039      	movs	r1, r7
 8004786:	f7fb fd57 	bl	8000238 <__aeabi_uidivmod>
 800478a:	9b03      	ldr	r3, [sp, #12]
 800478c:	3e01      	subs	r6, #1
 800478e:	5c5b      	ldrb	r3, [r3, r1]
 8004790:	7033      	strb	r3, [r6, #0]
 8004792:	002b      	movs	r3, r5
 8004794:	0005      	movs	r5, r0
 8004796:	429f      	cmp	r7, r3
 8004798:	d9f3      	bls.n	8004782 <_printf_i+0xf2>
 800479a:	2f08      	cmp	r7, #8
 800479c:	d109      	bne.n	80047b2 <_printf_i+0x122>
 800479e:	6823      	ldr	r3, [r4, #0]
 80047a0:	07db      	lsls	r3, r3, #31
 80047a2:	d506      	bpl.n	80047b2 <_printf_i+0x122>
 80047a4:	6863      	ldr	r3, [r4, #4]
 80047a6:	6922      	ldr	r2, [r4, #16]
 80047a8:	4293      	cmp	r3, r2
 80047aa:	dc02      	bgt.n	80047b2 <_printf_i+0x122>
 80047ac:	2330      	movs	r3, #48	; 0x30
 80047ae:	3e01      	subs	r6, #1
 80047b0:	7033      	strb	r3, [r6, #0]
 80047b2:	9b04      	ldr	r3, [sp, #16]
 80047b4:	1b9b      	subs	r3, r3, r6
 80047b6:	6123      	str	r3, [r4, #16]
 80047b8:	9b07      	ldr	r3, [sp, #28]
 80047ba:	0021      	movs	r1, r4
 80047bc:	9300      	str	r3, [sp, #0]
 80047be:	9805      	ldr	r0, [sp, #20]
 80047c0:	9b06      	ldr	r3, [sp, #24]
 80047c2:	aa09      	add	r2, sp, #36	; 0x24
 80047c4:	f7ff fef4 	bl	80045b0 <_printf_common>
 80047c8:	1c43      	adds	r3, r0, #1
 80047ca:	d14c      	bne.n	8004866 <_printf_i+0x1d6>
 80047cc:	2001      	movs	r0, #1
 80047ce:	4240      	negs	r0, r0
 80047d0:	b00b      	add	sp, #44	; 0x2c
 80047d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047d4:	3145      	adds	r1, #69	; 0x45
 80047d6:	700a      	strb	r2, [r1, #0]
 80047d8:	4a34      	ldr	r2, [pc, #208]	; (80048ac <_printf_i+0x21c>)
 80047da:	9203      	str	r2, [sp, #12]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	6821      	ldr	r1, [r4, #0]
 80047e0:	ca20      	ldmia	r2!, {r5}
 80047e2:	601a      	str	r2, [r3, #0]
 80047e4:	0608      	lsls	r0, r1, #24
 80047e6:	d516      	bpl.n	8004816 <_printf_i+0x186>
 80047e8:	07cb      	lsls	r3, r1, #31
 80047ea:	d502      	bpl.n	80047f2 <_printf_i+0x162>
 80047ec:	2320      	movs	r3, #32
 80047ee:	4319      	orrs	r1, r3
 80047f0:	6021      	str	r1, [r4, #0]
 80047f2:	2710      	movs	r7, #16
 80047f4:	2d00      	cmp	r5, #0
 80047f6:	d1b2      	bne.n	800475e <_printf_i+0xce>
 80047f8:	2320      	movs	r3, #32
 80047fa:	6822      	ldr	r2, [r4, #0]
 80047fc:	439a      	bics	r2, r3
 80047fe:	6022      	str	r2, [r4, #0]
 8004800:	e7ad      	b.n	800475e <_printf_i+0xce>
 8004802:	2220      	movs	r2, #32
 8004804:	6809      	ldr	r1, [r1, #0]
 8004806:	430a      	orrs	r2, r1
 8004808:	6022      	str	r2, [r4, #0]
 800480a:	0022      	movs	r2, r4
 800480c:	2178      	movs	r1, #120	; 0x78
 800480e:	3245      	adds	r2, #69	; 0x45
 8004810:	7011      	strb	r1, [r2, #0]
 8004812:	4a27      	ldr	r2, [pc, #156]	; (80048b0 <_printf_i+0x220>)
 8004814:	e7e1      	b.n	80047da <_printf_i+0x14a>
 8004816:	0648      	lsls	r0, r1, #25
 8004818:	d5e6      	bpl.n	80047e8 <_printf_i+0x158>
 800481a:	b2ad      	uxth	r5, r5
 800481c:	e7e4      	b.n	80047e8 <_printf_i+0x158>
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	680d      	ldr	r5, [r1, #0]
 8004822:	1d10      	adds	r0, r2, #4
 8004824:	6949      	ldr	r1, [r1, #20]
 8004826:	6018      	str	r0, [r3, #0]
 8004828:	6813      	ldr	r3, [r2, #0]
 800482a:	062e      	lsls	r6, r5, #24
 800482c:	d501      	bpl.n	8004832 <_printf_i+0x1a2>
 800482e:	6019      	str	r1, [r3, #0]
 8004830:	e002      	b.n	8004838 <_printf_i+0x1a8>
 8004832:	066d      	lsls	r5, r5, #25
 8004834:	d5fb      	bpl.n	800482e <_printf_i+0x19e>
 8004836:	8019      	strh	r1, [r3, #0]
 8004838:	2300      	movs	r3, #0
 800483a:	9e04      	ldr	r6, [sp, #16]
 800483c:	6123      	str	r3, [r4, #16]
 800483e:	e7bb      	b.n	80047b8 <_printf_i+0x128>
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	1d11      	adds	r1, r2, #4
 8004844:	6019      	str	r1, [r3, #0]
 8004846:	6816      	ldr	r6, [r2, #0]
 8004848:	2100      	movs	r1, #0
 800484a:	0030      	movs	r0, r6
 800484c:	6862      	ldr	r2, [r4, #4]
 800484e:	f000 f831 	bl	80048b4 <memchr>
 8004852:	2800      	cmp	r0, #0
 8004854:	d001      	beq.n	800485a <_printf_i+0x1ca>
 8004856:	1b80      	subs	r0, r0, r6
 8004858:	6060      	str	r0, [r4, #4]
 800485a:	6863      	ldr	r3, [r4, #4]
 800485c:	6123      	str	r3, [r4, #16]
 800485e:	2300      	movs	r3, #0
 8004860:	9a04      	ldr	r2, [sp, #16]
 8004862:	7013      	strb	r3, [r2, #0]
 8004864:	e7a8      	b.n	80047b8 <_printf_i+0x128>
 8004866:	6923      	ldr	r3, [r4, #16]
 8004868:	0032      	movs	r2, r6
 800486a:	9906      	ldr	r1, [sp, #24]
 800486c:	9805      	ldr	r0, [sp, #20]
 800486e:	9d07      	ldr	r5, [sp, #28]
 8004870:	47a8      	blx	r5
 8004872:	1c43      	adds	r3, r0, #1
 8004874:	d0aa      	beq.n	80047cc <_printf_i+0x13c>
 8004876:	6823      	ldr	r3, [r4, #0]
 8004878:	079b      	lsls	r3, r3, #30
 800487a:	d415      	bmi.n	80048a8 <_printf_i+0x218>
 800487c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800487e:	68e0      	ldr	r0, [r4, #12]
 8004880:	4298      	cmp	r0, r3
 8004882:	daa5      	bge.n	80047d0 <_printf_i+0x140>
 8004884:	0018      	movs	r0, r3
 8004886:	e7a3      	b.n	80047d0 <_printf_i+0x140>
 8004888:	0022      	movs	r2, r4
 800488a:	2301      	movs	r3, #1
 800488c:	9906      	ldr	r1, [sp, #24]
 800488e:	9805      	ldr	r0, [sp, #20]
 8004890:	9e07      	ldr	r6, [sp, #28]
 8004892:	3219      	adds	r2, #25
 8004894:	47b0      	blx	r6
 8004896:	1c43      	adds	r3, r0, #1
 8004898:	d098      	beq.n	80047cc <_printf_i+0x13c>
 800489a:	3501      	adds	r5, #1
 800489c:	68e3      	ldr	r3, [r4, #12]
 800489e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048a0:	1a9b      	subs	r3, r3, r2
 80048a2:	42ab      	cmp	r3, r5
 80048a4:	dcf0      	bgt.n	8004888 <_printf_i+0x1f8>
 80048a6:	e7e9      	b.n	800487c <_printf_i+0x1ec>
 80048a8:	2500      	movs	r5, #0
 80048aa:	e7f7      	b.n	800489c <_printf_i+0x20c>
 80048ac:	08004cb1 	.word	0x08004cb1
 80048b0:	08004cc2 	.word	0x08004cc2

080048b4 <memchr>:
 80048b4:	b2c9      	uxtb	r1, r1
 80048b6:	1882      	adds	r2, r0, r2
 80048b8:	4290      	cmp	r0, r2
 80048ba:	d101      	bne.n	80048c0 <memchr+0xc>
 80048bc:	2000      	movs	r0, #0
 80048be:	4770      	bx	lr
 80048c0:	7803      	ldrb	r3, [r0, #0]
 80048c2:	428b      	cmp	r3, r1
 80048c4:	d0fb      	beq.n	80048be <memchr+0xa>
 80048c6:	3001      	adds	r0, #1
 80048c8:	e7f6      	b.n	80048b8 <memchr+0x4>

080048ca <memmove>:
 80048ca:	b510      	push	{r4, lr}
 80048cc:	4288      	cmp	r0, r1
 80048ce:	d902      	bls.n	80048d6 <memmove+0xc>
 80048d0:	188b      	adds	r3, r1, r2
 80048d2:	4298      	cmp	r0, r3
 80048d4:	d303      	bcc.n	80048de <memmove+0x14>
 80048d6:	2300      	movs	r3, #0
 80048d8:	e007      	b.n	80048ea <memmove+0x20>
 80048da:	5c8b      	ldrb	r3, [r1, r2]
 80048dc:	5483      	strb	r3, [r0, r2]
 80048de:	3a01      	subs	r2, #1
 80048e0:	d2fb      	bcs.n	80048da <memmove+0x10>
 80048e2:	bd10      	pop	{r4, pc}
 80048e4:	5ccc      	ldrb	r4, [r1, r3]
 80048e6:	54c4      	strb	r4, [r0, r3]
 80048e8:	3301      	adds	r3, #1
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d1fa      	bne.n	80048e4 <memmove+0x1a>
 80048ee:	e7f8      	b.n	80048e2 <memmove+0x18>

080048f0 <_free_r>:
 80048f0:	b570      	push	{r4, r5, r6, lr}
 80048f2:	0005      	movs	r5, r0
 80048f4:	2900      	cmp	r1, #0
 80048f6:	d010      	beq.n	800491a <_free_r+0x2a>
 80048f8:	1f0c      	subs	r4, r1, #4
 80048fa:	6823      	ldr	r3, [r4, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	da00      	bge.n	8004902 <_free_r+0x12>
 8004900:	18e4      	adds	r4, r4, r3
 8004902:	0028      	movs	r0, r5
 8004904:	f000 f918 	bl	8004b38 <__malloc_lock>
 8004908:	4a1d      	ldr	r2, [pc, #116]	; (8004980 <_free_r+0x90>)
 800490a:	6813      	ldr	r3, [r2, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d105      	bne.n	800491c <_free_r+0x2c>
 8004910:	6063      	str	r3, [r4, #4]
 8004912:	6014      	str	r4, [r2, #0]
 8004914:	0028      	movs	r0, r5
 8004916:	f000 f917 	bl	8004b48 <__malloc_unlock>
 800491a:	bd70      	pop	{r4, r5, r6, pc}
 800491c:	42a3      	cmp	r3, r4
 800491e:	d908      	bls.n	8004932 <_free_r+0x42>
 8004920:	6821      	ldr	r1, [r4, #0]
 8004922:	1860      	adds	r0, r4, r1
 8004924:	4283      	cmp	r3, r0
 8004926:	d1f3      	bne.n	8004910 <_free_r+0x20>
 8004928:	6818      	ldr	r0, [r3, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	1841      	adds	r1, r0, r1
 800492e:	6021      	str	r1, [r4, #0]
 8004930:	e7ee      	b.n	8004910 <_free_r+0x20>
 8004932:	001a      	movs	r2, r3
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <_free_r+0x4e>
 800493a:	42a3      	cmp	r3, r4
 800493c:	d9f9      	bls.n	8004932 <_free_r+0x42>
 800493e:	6811      	ldr	r1, [r2, #0]
 8004940:	1850      	adds	r0, r2, r1
 8004942:	42a0      	cmp	r0, r4
 8004944:	d10b      	bne.n	800495e <_free_r+0x6e>
 8004946:	6820      	ldr	r0, [r4, #0]
 8004948:	1809      	adds	r1, r1, r0
 800494a:	1850      	adds	r0, r2, r1
 800494c:	6011      	str	r1, [r2, #0]
 800494e:	4283      	cmp	r3, r0
 8004950:	d1e0      	bne.n	8004914 <_free_r+0x24>
 8004952:	6818      	ldr	r0, [r3, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	1841      	adds	r1, r0, r1
 8004958:	6011      	str	r1, [r2, #0]
 800495a:	6053      	str	r3, [r2, #4]
 800495c:	e7da      	b.n	8004914 <_free_r+0x24>
 800495e:	42a0      	cmp	r0, r4
 8004960:	d902      	bls.n	8004968 <_free_r+0x78>
 8004962:	230c      	movs	r3, #12
 8004964:	602b      	str	r3, [r5, #0]
 8004966:	e7d5      	b.n	8004914 <_free_r+0x24>
 8004968:	6821      	ldr	r1, [r4, #0]
 800496a:	1860      	adds	r0, r4, r1
 800496c:	4283      	cmp	r3, r0
 800496e:	d103      	bne.n	8004978 <_free_r+0x88>
 8004970:	6818      	ldr	r0, [r3, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	1841      	adds	r1, r0, r1
 8004976:	6021      	str	r1, [r4, #0]
 8004978:	6063      	str	r3, [r4, #4]
 800497a:	6054      	str	r4, [r2, #4]
 800497c:	e7ca      	b.n	8004914 <_free_r+0x24>
 800497e:	46c0      	nop			; (mov r8, r8)
 8004980:	20000230 	.word	0x20000230

08004984 <sbrk_aligned>:
 8004984:	b570      	push	{r4, r5, r6, lr}
 8004986:	4e0f      	ldr	r6, [pc, #60]	; (80049c4 <sbrk_aligned+0x40>)
 8004988:	000d      	movs	r5, r1
 800498a:	6831      	ldr	r1, [r6, #0]
 800498c:	0004      	movs	r4, r0
 800498e:	2900      	cmp	r1, #0
 8004990:	d102      	bne.n	8004998 <sbrk_aligned+0x14>
 8004992:	f000 f8bf 	bl	8004b14 <_sbrk_r>
 8004996:	6030      	str	r0, [r6, #0]
 8004998:	0029      	movs	r1, r5
 800499a:	0020      	movs	r0, r4
 800499c:	f000 f8ba 	bl	8004b14 <_sbrk_r>
 80049a0:	1c43      	adds	r3, r0, #1
 80049a2:	d00a      	beq.n	80049ba <sbrk_aligned+0x36>
 80049a4:	2303      	movs	r3, #3
 80049a6:	1cc5      	adds	r5, r0, #3
 80049a8:	439d      	bics	r5, r3
 80049aa:	42a8      	cmp	r0, r5
 80049ac:	d007      	beq.n	80049be <sbrk_aligned+0x3a>
 80049ae:	1a29      	subs	r1, r5, r0
 80049b0:	0020      	movs	r0, r4
 80049b2:	f000 f8af 	bl	8004b14 <_sbrk_r>
 80049b6:	1c43      	adds	r3, r0, #1
 80049b8:	d101      	bne.n	80049be <sbrk_aligned+0x3a>
 80049ba:	2501      	movs	r5, #1
 80049bc:	426d      	negs	r5, r5
 80049be:	0028      	movs	r0, r5
 80049c0:	bd70      	pop	{r4, r5, r6, pc}
 80049c2:	46c0      	nop			; (mov r8, r8)
 80049c4:	20000234 	.word	0x20000234

080049c8 <_malloc_r>:
 80049c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049ca:	2203      	movs	r2, #3
 80049cc:	1ccb      	adds	r3, r1, #3
 80049ce:	4393      	bics	r3, r2
 80049d0:	3308      	adds	r3, #8
 80049d2:	0006      	movs	r6, r0
 80049d4:	001f      	movs	r7, r3
 80049d6:	2b0c      	cmp	r3, #12
 80049d8:	d232      	bcs.n	8004a40 <_malloc_r+0x78>
 80049da:	270c      	movs	r7, #12
 80049dc:	42b9      	cmp	r1, r7
 80049de:	d831      	bhi.n	8004a44 <_malloc_r+0x7c>
 80049e0:	0030      	movs	r0, r6
 80049e2:	f000 f8a9 	bl	8004b38 <__malloc_lock>
 80049e6:	4d32      	ldr	r5, [pc, #200]	; (8004ab0 <_malloc_r+0xe8>)
 80049e8:	682b      	ldr	r3, [r5, #0]
 80049ea:	001c      	movs	r4, r3
 80049ec:	2c00      	cmp	r4, #0
 80049ee:	d12e      	bne.n	8004a4e <_malloc_r+0x86>
 80049f0:	0039      	movs	r1, r7
 80049f2:	0030      	movs	r0, r6
 80049f4:	f7ff ffc6 	bl	8004984 <sbrk_aligned>
 80049f8:	0004      	movs	r4, r0
 80049fa:	1c43      	adds	r3, r0, #1
 80049fc:	d11e      	bne.n	8004a3c <_malloc_r+0x74>
 80049fe:	682c      	ldr	r4, [r5, #0]
 8004a00:	0025      	movs	r5, r4
 8004a02:	2d00      	cmp	r5, #0
 8004a04:	d14a      	bne.n	8004a9c <_malloc_r+0xd4>
 8004a06:	6823      	ldr	r3, [r4, #0]
 8004a08:	0029      	movs	r1, r5
 8004a0a:	18e3      	adds	r3, r4, r3
 8004a0c:	0030      	movs	r0, r6
 8004a0e:	9301      	str	r3, [sp, #4]
 8004a10:	f000 f880 	bl	8004b14 <_sbrk_r>
 8004a14:	9b01      	ldr	r3, [sp, #4]
 8004a16:	4283      	cmp	r3, r0
 8004a18:	d143      	bne.n	8004aa2 <_malloc_r+0xda>
 8004a1a:	6823      	ldr	r3, [r4, #0]
 8004a1c:	3703      	adds	r7, #3
 8004a1e:	1aff      	subs	r7, r7, r3
 8004a20:	2303      	movs	r3, #3
 8004a22:	439f      	bics	r7, r3
 8004a24:	3708      	adds	r7, #8
 8004a26:	2f0c      	cmp	r7, #12
 8004a28:	d200      	bcs.n	8004a2c <_malloc_r+0x64>
 8004a2a:	270c      	movs	r7, #12
 8004a2c:	0039      	movs	r1, r7
 8004a2e:	0030      	movs	r0, r6
 8004a30:	f7ff ffa8 	bl	8004984 <sbrk_aligned>
 8004a34:	1c43      	adds	r3, r0, #1
 8004a36:	d034      	beq.n	8004aa2 <_malloc_r+0xda>
 8004a38:	6823      	ldr	r3, [r4, #0]
 8004a3a:	19df      	adds	r7, r3, r7
 8004a3c:	6027      	str	r7, [r4, #0]
 8004a3e:	e013      	b.n	8004a68 <_malloc_r+0xa0>
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	dacb      	bge.n	80049dc <_malloc_r+0x14>
 8004a44:	230c      	movs	r3, #12
 8004a46:	2500      	movs	r5, #0
 8004a48:	6033      	str	r3, [r6, #0]
 8004a4a:	0028      	movs	r0, r5
 8004a4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004a4e:	6822      	ldr	r2, [r4, #0]
 8004a50:	1bd1      	subs	r1, r2, r7
 8004a52:	d420      	bmi.n	8004a96 <_malloc_r+0xce>
 8004a54:	290b      	cmp	r1, #11
 8004a56:	d917      	bls.n	8004a88 <_malloc_r+0xc0>
 8004a58:	19e2      	adds	r2, r4, r7
 8004a5a:	6027      	str	r7, [r4, #0]
 8004a5c:	42a3      	cmp	r3, r4
 8004a5e:	d111      	bne.n	8004a84 <_malloc_r+0xbc>
 8004a60:	602a      	str	r2, [r5, #0]
 8004a62:	6863      	ldr	r3, [r4, #4]
 8004a64:	6011      	str	r1, [r2, #0]
 8004a66:	6053      	str	r3, [r2, #4]
 8004a68:	0030      	movs	r0, r6
 8004a6a:	0025      	movs	r5, r4
 8004a6c:	f000 f86c 	bl	8004b48 <__malloc_unlock>
 8004a70:	2207      	movs	r2, #7
 8004a72:	350b      	adds	r5, #11
 8004a74:	1d23      	adds	r3, r4, #4
 8004a76:	4395      	bics	r5, r2
 8004a78:	1aea      	subs	r2, r5, r3
 8004a7a:	429d      	cmp	r5, r3
 8004a7c:	d0e5      	beq.n	8004a4a <_malloc_r+0x82>
 8004a7e:	1b5b      	subs	r3, r3, r5
 8004a80:	50a3      	str	r3, [r4, r2]
 8004a82:	e7e2      	b.n	8004a4a <_malloc_r+0x82>
 8004a84:	605a      	str	r2, [r3, #4]
 8004a86:	e7ec      	b.n	8004a62 <_malloc_r+0x9a>
 8004a88:	6862      	ldr	r2, [r4, #4]
 8004a8a:	42a3      	cmp	r3, r4
 8004a8c:	d101      	bne.n	8004a92 <_malloc_r+0xca>
 8004a8e:	602a      	str	r2, [r5, #0]
 8004a90:	e7ea      	b.n	8004a68 <_malloc_r+0xa0>
 8004a92:	605a      	str	r2, [r3, #4]
 8004a94:	e7e8      	b.n	8004a68 <_malloc_r+0xa0>
 8004a96:	0023      	movs	r3, r4
 8004a98:	6864      	ldr	r4, [r4, #4]
 8004a9a:	e7a7      	b.n	80049ec <_malloc_r+0x24>
 8004a9c:	002c      	movs	r4, r5
 8004a9e:	686d      	ldr	r5, [r5, #4]
 8004aa0:	e7af      	b.n	8004a02 <_malloc_r+0x3a>
 8004aa2:	230c      	movs	r3, #12
 8004aa4:	0030      	movs	r0, r6
 8004aa6:	6033      	str	r3, [r6, #0]
 8004aa8:	f000 f84e 	bl	8004b48 <__malloc_unlock>
 8004aac:	e7cd      	b.n	8004a4a <_malloc_r+0x82>
 8004aae:	46c0      	nop			; (mov r8, r8)
 8004ab0:	20000230 	.word	0x20000230

08004ab4 <_realloc_r>:
 8004ab4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ab6:	0007      	movs	r7, r0
 8004ab8:	000e      	movs	r6, r1
 8004aba:	0014      	movs	r4, r2
 8004abc:	2900      	cmp	r1, #0
 8004abe:	d105      	bne.n	8004acc <_realloc_r+0x18>
 8004ac0:	0011      	movs	r1, r2
 8004ac2:	f7ff ff81 	bl	80049c8 <_malloc_r>
 8004ac6:	0005      	movs	r5, r0
 8004ac8:	0028      	movs	r0, r5
 8004aca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004acc:	2a00      	cmp	r2, #0
 8004ace:	d103      	bne.n	8004ad8 <_realloc_r+0x24>
 8004ad0:	f7ff ff0e 	bl	80048f0 <_free_r>
 8004ad4:	0025      	movs	r5, r4
 8004ad6:	e7f7      	b.n	8004ac8 <_realloc_r+0x14>
 8004ad8:	f000 f83e 	bl	8004b58 <_malloc_usable_size_r>
 8004adc:	9001      	str	r0, [sp, #4]
 8004ade:	4284      	cmp	r4, r0
 8004ae0:	d803      	bhi.n	8004aea <_realloc_r+0x36>
 8004ae2:	0035      	movs	r5, r6
 8004ae4:	0843      	lsrs	r3, r0, #1
 8004ae6:	42a3      	cmp	r3, r4
 8004ae8:	d3ee      	bcc.n	8004ac8 <_realloc_r+0x14>
 8004aea:	0021      	movs	r1, r4
 8004aec:	0038      	movs	r0, r7
 8004aee:	f7ff ff6b 	bl	80049c8 <_malloc_r>
 8004af2:	1e05      	subs	r5, r0, #0
 8004af4:	d0e8      	beq.n	8004ac8 <_realloc_r+0x14>
 8004af6:	9b01      	ldr	r3, [sp, #4]
 8004af8:	0022      	movs	r2, r4
 8004afa:	429c      	cmp	r4, r3
 8004afc:	d900      	bls.n	8004b00 <_realloc_r+0x4c>
 8004afe:	001a      	movs	r2, r3
 8004b00:	0031      	movs	r1, r6
 8004b02:	0028      	movs	r0, r5
 8004b04:	f7ff fbbe 	bl	8004284 <memcpy>
 8004b08:	0031      	movs	r1, r6
 8004b0a:	0038      	movs	r0, r7
 8004b0c:	f7ff fef0 	bl	80048f0 <_free_r>
 8004b10:	e7da      	b.n	8004ac8 <_realloc_r+0x14>
	...

08004b14 <_sbrk_r>:
 8004b14:	2300      	movs	r3, #0
 8004b16:	b570      	push	{r4, r5, r6, lr}
 8004b18:	4d06      	ldr	r5, [pc, #24]	; (8004b34 <_sbrk_r+0x20>)
 8004b1a:	0004      	movs	r4, r0
 8004b1c:	0008      	movs	r0, r1
 8004b1e:	602b      	str	r3, [r5, #0]
 8004b20:	f7fc fd0e 	bl	8001540 <_sbrk>
 8004b24:	1c43      	adds	r3, r0, #1
 8004b26:	d103      	bne.n	8004b30 <_sbrk_r+0x1c>
 8004b28:	682b      	ldr	r3, [r5, #0]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d000      	beq.n	8004b30 <_sbrk_r+0x1c>
 8004b2e:	6023      	str	r3, [r4, #0]
 8004b30:	bd70      	pop	{r4, r5, r6, pc}
 8004b32:	46c0      	nop			; (mov r8, r8)
 8004b34:	20000238 	.word	0x20000238

08004b38 <__malloc_lock>:
 8004b38:	b510      	push	{r4, lr}
 8004b3a:	4802      	ldr	r0, [pc, #8]	; (8004b44 <__malloc_lock+0xc>)
 8004b3c:	f000 f814 	bl	8004b68 <__retarget_lock_acquire_recursive>
 8004b40:	bd10      	pop	{r4, pc}
 8004b42:	46c0      	nop			; (mov r8, r8)
 8004b44:	2000023c 	.word	0x2000023c

08004b48 <__malloc_unlock>:
 8004b48:	b510      	push	{r4, lr}
 8004b4a:	4802      	ldr	r0, [pc, #8]	; (8004b54 <__malloc_unlock+0xc>)
 8004b4c:	f000 f80d 	bl	8004b6a <__retarget_lock_release_recursive>
 8004b50:	bd10      	pop	{r4, pc}
 8004b52:	46c0      	nop			; (mov r8, r8)
 8004b54:	2000023c 	.word	0x2000023c

08004b58 <_malloc_usable_size_r>:
 8004b58:	1f0b      	subs	r3, r1, #4
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	1f18      	subs	r0, r3, #4
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	da01      	bge.n	8004b66 <_malloc_usable_size_r+0xe>
 8004b62:	580b      	ldr	r3, [r1, r0]
 8004b64:	18c0      	adds	r0, r0, r3
 8004b66:	4770      	bx	lr

08004b68 <__retarget_lock_acquire_recursive>:
 8004b68:	4770      	bx	lr

08004b6a <__retarget_lock_release_recursive>:
 8004b6a:	4770      	bx	lr

08004b6c <_init>:
 8004b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b6e:	46c0      	nop			; (mov r8, r8)
 8004b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b72:	bc08      	pop	{r3}
 8004b74:	469e      	mov	lr, r3
 8004b76:	4770      	bx	lr

08004b78 <_fini>:
 8004b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b7a:	46c0      	nop			; (mov r8, r8)
 8004b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b7e:	bc08      	pop	{r3}
 8004b80:	469e      	mov	lr, r3
 8004b82:	4770      	bx	lr
